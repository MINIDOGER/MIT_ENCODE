
ye_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800a180  0800a180  0001a180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6a0  0800a6a0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6a0  0800a6a0  0001a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6a8  0800a6a8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6a8  0800a6a8  0001a6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6ac  0800a6ac  0001a6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001e0  0800a890  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  0800a890  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015175  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f78  00000000  00000000  00035385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00038300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00039490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244bd  00000000  00000000  0003a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016033  00000000  00000000  0005e995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7463  00000000  00000000  000749c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014be2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006124  00000000  00000000  0014be7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a164 	.word	0x0800a164

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a164 	.word	0x0800a164

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_CAN1_Init+0x64>)
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <MX_CAN1_Init+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_CAN1_Init+0x64>)
 8001044:	2208      	movs	r2, #8
 8001046:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_CAN1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_CAN1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_CAN1_Init+0x64>)
 8001056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_CAN1_Init+0x64>)
 800105e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001062:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <MX_CAN1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_CAN1_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_CAN1_Init+0x64>)
 8001072:	2201      	movs	r2, #1
 8001074:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_CAN1_Init+0x64>)
 8001078:	2201      	movs	r2, #1
 800107a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_CAN1_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_CAN1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_CAN1_Init+0x64>)
 800108a:	f001 f921 	bl	80022d0 <HAL_CAN_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001094:	f000 fd88 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000210 	.word	0x20000210
 80010a0:	40006400 	.word	0x40006400

080010a4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_CAN2_Init+0x64>)
 80010aa:	4a18      	ldr	r2, [pc, #96]	; (800110c <MX_CAN2_Init+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_CAN2_Init+0x64>)
 80010b0:	2208      	movs	r2, #8
 80010b2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_CAN2_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_CAN2_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_CAN2_Init+0x64>)
 80010c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_CAN2_Init+0x64>)
 80010ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010ce:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <MX_CAN2_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_CAN2_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_CAN2_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_CAN2_Init+0x64>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_CAN2_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_CAN2_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_CAN2_Init+0x64>)
 80010f6:	f001 f8eb 	bl	80022d0 <HAL_CAN_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001100:	f000 fd52 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000238 	.word	0x20000238
 800110c:	40006800 	.word	0x40006800

08001110 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a53      	ldr	r2, [pc, #332]	; (800127c <HAL_CAN_MspInit+0x16c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d146      	bne.n	80011c0 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001132:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_CAN_MspInit+0x170>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	4a51      	ldr	r2, [pc, #324]	; (8001280 <HAL_CAN_MspInit+0x170>)
 800113a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800113c:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_CAN_MspInit+0x170>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d10d      	bne.n	8001160 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	4b4e      	ldr	r3, [pc, #312]	; (8001284 <HAL_CAN_MspInit+0x174>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	4a4d      	ldr	r2, [pc, #308]	; (8001284 <HAL_CAN_MspInit+0x174>)
 800114e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <HAL_CAN_MspInit+0x174>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	4b47      	ldr	r3, [pc, #284]	; (8001284 <HAL_CAN_MspInit+0x174>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	4a46      	ldr	r2, [pc, #280]	; (8001284 <HAL_CAN_MspInit+0x174>)
 800116a:	f043 0302 	orr.w	r3, r3, #2
 800116e:	6313      	str	r3, [r2, #48]	; 0x30
 8001170:	4b44      	ldr	r3, [pc, #272]	; (8001284 <HAL_CAN_MspInit+0x174>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001186:	2301      	movs	r3, #1
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800118e:	2309      	movs	r3, #9
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	483b      	ldr	r0, [pc, #236]	; (8001288 <HAL_CAN_MspInit+0x178>)
 800119a:	f002 f817 	bl	80031cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2014      	movs	r0, #20
 80011a4:	f001 ffdb 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011a8:	2014      	movs	r0, #20
 80011aa:	f001 fff4 	bl	8003196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2015      	movs	r0, #21
 80011b4:	f001 ffd3 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80011b8:	2015      	movs	r0, #21
 80011ba:	f001 ffec 	bl	8003196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80011be:	e058      	b.n	8001272 <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a31      	ldr	r2, [pc, #196]	; (800128c <HAL_CAN_MspInit+0x17c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d153      	bne.n	8001272 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_CAN_MspInit+0x174>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <HAL_CAN_MspInit+0x174>)
 80011d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_CAN_MspInit+0x174>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_CAN_MspInit+0x170>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	4a24      	ldr	r2, [pc, #144]	; (8001280 <HAL_CAN_MspInit+0x170>)
 80011ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_CAN_MspInit+0x170>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d10d      	bne.n	8001214 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <HAL_CAN_MspInit+0x174>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a20      	ldr	r2, [pc, #128]	; (8001284 <HAL_CAN_MspInit+0x174>)
 8001202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_CAN_MspInit+0x174>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_CAN_MspInit+0x174>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_CAN_MspInit+0x174>)
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	6313      	str	r3, [r2, #48]	; 0x30
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_CAN_MspInit+0x174>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001230:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123a:	2301      	movs	r3, #1
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001242:	2309      	movs	r3, #9
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	480e      	ldr	r0, [pc, #56]	; (8001288 <HAL_CAN_MspInit+0x178>)
 800124e:	f001 ffbd 	bl	80031cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2040      	movs	r0, #64	; 0x40
 8001258:	f001 ff81 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800125c:	2040      	movs	r0, #64	; 0x40
 800125e:	f001 ff9a 	bl	8003196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2041      	movs	r0, #65	; 0x41
 8001268:	f001 ff79 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800126c:	2041      	movs	r0, #65	; 0x41
 800126e:	f001 ff92 	bl	8003196 <HAL_NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3730      	adds	r7, #48	; 0x30
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40006400 	.word	0x40006400
 8001280:	20000260 	.word	0x20000260
 8001284:	40023800 	.word	0x40023800
 8001288:	40020400 	.word	0x40020400
 800128c:	40006800 	.word	0x40006800

08001290 <CAN_SetFilters>:
/* USER CODE BEGIN 1 */


////设定CAN过滤器，全部接收////BEG
HAL_StatusTypeDef CAN_SetFilters()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef canFilter;
  canFilter.FilterBank = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800129e:	2301      	movs	r3, #1
 80012a0:	623b      	str	r3, [r7, #32]

  canFilter.FilterIdHigh = 0x0000;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  canFilter.FilterIdLow = 0x0000;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  canFilter.FilterMaskIdHigh = 0x0000;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  canFilter.FilterMaskIdLow = 0x0000;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]

  canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  canFilter.FilterActivation = ENABLE;
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  canFilter.SlaveStartFilterBank = 14;
 80012ba:	230e      	movs	r3, #14
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_StatusTypeDef result = HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <CAN_SetFilters+0x4c>)
 80012c4:	f001 f900 	bl	80024c8 <HAL_CAN_ConfigFilter>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  return result;
 80012ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3730      	adds	r7, #48	; 0x30
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000210 	.word	0x20000210

080012e0 <fmaxf>:
////设定CAN过滤器，全部接收////END


////取较大值////BEG
float fmaxf(float x, float y){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ea:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 80012ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f2:	edd7 7a00 	vldr	s15, [r7]
 80012f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	dd01      	ble.n	8001304 <fmaxf+0x24>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	e000      	b.n	8001306 <fmaxf+0x26>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	ee07 3a90 	vmov	s15, r3
    }
 800130a:	eeb0 0a67 	vmov.f32	s0, s15
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <fminf>:
////取较大值////END


////取较小值////BEG
float fminf(float x, float y){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001322:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8001326:	ed97 7a01 	vldr	s14, [r7, #4]
 800132a:	edd7 7a00 	vldr	s15, [r7]
 800132e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	d501      	bpl.n	800133c <fminf+0x24>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	e000      	b.n	800133e <fminf+0x26>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	ee07 3a90 	vmov	s15, r3
    }
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <S_Trajectory>:
}
////测试：爬升计算////END


////测试：S计算////BEG未测试
float S_Trajectory(float x0, float x, uint32_t t, float flexible, float X_stretching, float X_displacement){
 8001350:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001354:	b08a      	sub	sp, #40	; 0x28
 8001356:	af00      	add	r7, sp, #0
 8001358:	ed87 0a05 	vstr	s0, [r7, #20]
 800135c:	edc7 0a04 	vstr	s1, [r7, #16]
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	ed87 1a02 	vstr	s2, [r7, #8]
 8001366:	edc7 1a01 	vstr	s3, [r7, #4]
 800136a:	ed87 2a00 	vstr	s4, [r7]
	//x:调节纵轴拉伸，终值
	//t:自变量，时间
	//flexible:横轴整体改变
	//X_stretching:调节横轴拉伸
	//X_stretching:调节横轴平移
	float y = 0;
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
	float x_error = 0;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
	float index = 0;
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
	x_error = x - x0;
 8001380:	ed97 7a04 	vldr	s14, [r7, #16]
 8001384:	edd7 7a05 	vldr	s15, [r7, #20]
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	edc7 7a08 	vstr	s15, [r7, #32]
	index = flexible*(t*X_stretching - X_displacement);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800139a:	edd7 7a01 	vldr	s15, [r7, #4]
 800139e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a2:	edd7 7a00 	vldr	s15, [r7]
 80013a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80013ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b2:	edc7 7a07 	vstr	s15, [r7, #28]
	y = x0 + x_error/(1 + exp(index));
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff f8e6 	bl	8000588 <__aeabi_f2d>
 80013bc:	4604      	mov	r4, r0
 80013be:	460d      	mov	r5, r1
 80013c0:	6a38      	ldr	r0, [r7, #32]
 80013c2:	f7ff f8e1 	bl	8000588 <__aeabi_f2d>
 80013c6:	4680      	mov	r8, r0
 80013c8:	4689      	mov	r9, r1
 80013ca:	69f8      	ldr	r0, [r7, #28]
 80013cc:	f7ff f8dc 	bl	8000588 <__aeabi_f2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	ec43 2b10 	vmov	d0, r2, r3
 80013d8:	f008 fcbe 	bl	8009d58 <exp>
 80013dc:	ec51 0b10 	vmov	r0, r1, d0
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <S_Trajectory+0xd4>)
 80013e6:	f7fe ff71 	bl	80002cc <__adddf3>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4640      	mov	r0, r8
 80013f0:	4649      	mov	r1, r9
 80013f2:	f7ff fa4b 	bl	800088c <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7fe ff65 	bl	80002cc <__adddf3>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fc0d 	bl	8000c28 <__aeabi_d2f>
 800140e:	4603      	mov	r3, r0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
	return y;
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	ee07 3a90 	vmov	s15, r3
}
 8001418:	eeb0 0a67 	vmov.f32	s0, s15
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001424:	3ff00000 	.word	0x3ff00000

08001428 <float_to_uint>:
////测试：S计算////END


////float转unit，应该是浮点型转整型////BEG
int float_to_uint(float x, float x_min, float x_max, int bits){
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001432:	edc7 0a02 	vstr	s1, [r7, #8]
 8001436:	ed87 1a01 	vstr	s2, [r7, #4]
 800143a:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 800143c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001440:	edd7 7a02 	vldr	s15, [r7, #8]
 8001444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001448:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8001450:	ed97 7a03 	vldr	s14, [r7, #12]
 8001454:	edd7 7a04 	vldr	s15, [r7, #16]
 8001458:	ee37 7a67 	vsub.f32	s14, s14, s15
 800145c:	2201      	movs	r2, #1
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001472:	ed97 7a05 	vldr	s14, [r7, #20]
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	ee17 3a90 	vmov	r3, s15
    }
 8001482:	4618      	mov	r0, r3
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <uint_to_float>:
////float转unit，应该是浮点型转整型////END


////unit转float，应该是整型转浮点型////BEG
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 800148e:	b480      	push	{r7}
 8001490:	b087      	sub	sp, #28
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	ed87 0a02 	vstr	s0, [r7, #8]
 800149a:	edc7 0a01 	vstr	s1, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 80014a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80014a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ac:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014be:	edd7 7a05 	vldr	s15, [r7, #20]
 80014c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014c6:	2201      	movs	r2, #1
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	3b01      	subs	r3, #1
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <cansend>:
////进入电机模式指令////END


////CAN数据帧发送函数////BEG
void cansend(uint32_t std_id, float p, float v, float kpf, float kdf, float tff)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b098      	sub	sp, #96	; 0x60
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6178      	str	r0, [r7, #20]
 80014fc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001500:	edc7 0a03 	vstr	s1, [r7, #12]
 8001504:	ed87 1a02 	vstr	s2, [r7, #8]
 8001508:	edc7 1a01 	vstr	s3, [r7, #4]
 800150c:	ed87 2a00 	vstr	s4, [r7]
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8];
  uint32_t TxMailbox;
  TxHeader.RTR = CAN_RTR_DATA;
 8001510:	2300      	movs	r3, #0
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
  TxHeader.IDE = CAN_ID_STD;            
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  TxHeader.StdId=std_id;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  TxHeader.TransmitGlobalTime = DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  TxHeader.DLC = 8;
 8001522:	2308      	movs	r3, #8
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38

  /// limit data to be within bounds 将数杮陝制在�??????定范围内///
  float p_des = fminf(fmaxf(P_MIN, p), P_MAX);
 8001526:	edd7 0a04 	vldr	s1, [r7, #16]
 800152a:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800152e:	f7ff fed7 	bl	80012e0 <fmaxf>
 8001532:	eef0 7a40 	vmov.f32	s15, s0
 8001536:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	f7ff feeb 	bl	8001318 <fminf>
 8001542:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
  float v_des = fminf(fmaxf(V_MIN, v), V_MAX);
 8001546:	edd7 0a03 	vldr	s1, [r7, #12]
 800154a:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80016e4 <cansend+0x1f0>
 800154e:	f7ff fec7 	bl	80012e0 <fmaxf>
 8001552:	eef0 7a40 	vmov.f32	s15, s0
 8001556:	eddf 0a64 	vldr	s1, [pc, #400]	; 80016e8 <cansend+0x1f4>
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	f7ff fedb 	bl	8001318 <fminf>
 8001562:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
  float kp = fminf(fmaxf(KP_MIN, kpf), KP_MAX);
 8001566:	edd7 0a02 	vldr	s1, [r7, #8]
 800156a:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80016ec <cansend+0x1f8>
 800156e:	f7ff feb7 	bl	80012e0 <fmaxf>
 8001572:	eef0 7a40 	vmov.f32	s15, s0
 8001576:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80016f0 <cansend+0x1fc>
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	f7ff fecb 	bl	8001318 <fminf>
 8001582:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
  float kd = fminf(fmaxf(KD_MIN, kdf), KD_MAX);
 8001586:	edd7 0a01 	vldr	s1, [r7, #4]
 800158a:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80016ec <cansend+0x1f8>
 800158e:	f7ff fea7 	bl	80012e0 <fmaxf>
 8001592:	eef0 7a40 	vmov.f32	s15, s0
 8001596:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800159a:	eeb0 0a67 	vmov.f32	s0, s15
 800159e:	f7ff febb 	bl	8001318 <fminf>
 80015a2:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
  float t_ff = fminf(fmaxf(T_MIN, tff), T_MAX);
 80015a6:	edd7 0a00 	vldr	s1, [r7]
 80015aa:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 80015ae:	f7ff fe97 	bl	80012e0 <fmaxf>
 80015b2:	eef0 7a40 	vmov.f32	s15, s0
 80015b6:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 80015ba:	eeb0 0a67 	vmov.f32	s0, s15
 80015be:	f7ff feab 	bl	8001318 <fminf>
 80015c2:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
  /// convert floats to unsigned ints 将浮点数转杢为无符坷整数///
  uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 80015c6:	2010      	movs	r0, #16
 80015c8:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 80015cc:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 80015d0:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 80015d4:	f7ff ff28 	bl	8001428 <float_to_uint>
 80015d8:	4603      	mov	r3, r0
 80015da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 80015de:	200c      	movs	r0, #12
 80015e0:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80016e8 <cansend+0x1f4>
 80015e4:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80016e4 <cansend+0x1f0>
 80015e8:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80015ec:	f7ff ff1c 	bl	8001428 <float_to_uint>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 80015f6:	200c      	movs	r0, #12
 80015f8:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 80016f0 <cansend+0x1fc>
 80015fc:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80016ec <cansend+0x1f8>
 8001600:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8001604:	f7ff ff10 	bl	8001428 <float_to_uint>
 8001608:	4603      	mov	r3, r0
 800160a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 800160e:	200c      	movs	r0, #12
 8001610:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001614:	eddf 0a35 	vldr	s1, [pc, #212]	; 80016ec <cansend+0x1f8>
 8001618:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800161c:	f7ff ff04 	bl	8001428 <float_to_uint>
 8001620:	4603      	mov	r3, r0
 8001622:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 8001626:	200c      	movs	r0, #12
 8001628:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 800162c:	eefb 0a02 	vmov.f32	s1, #178	; 0xc1900000 -18.0
 8001630:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001634:	f7ff fef8 	bl	8001428 <float_to_uint>
 8001638:	4603      	mov	r3, r0
 800163a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /// pack ints into the can buffer 将整型数杮打包到can缓冲区中///
  TxData[0] = p_int>>8;
 800163e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	b29b      	uxth	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f887 3020 	strb.w	r3, [r7, #32]
  TxData[1] = p_int&0xFF;
 800164c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  TxData[2] = v_int>>4;
 8001656:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	b29b      	uxth	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  TxData[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 8001664:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	b25a      	sxtb	r2, r3
 800166c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b29b      	uxth	r3, r3
 8001674:	b25b      	sxtb	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b25b      	sxtb	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  TxData[4] = kp_int&0xFF;
 8001680:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  TxData[5] = kd_int>>4;
 800168a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	b29b      	uxth	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  TxData[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 8001698:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	b25a      	sxtb	r2, r3
 80016a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  TxData[7] = t_int&0xff;
 80016b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	f107 0220 	add.w	r2, r7, #32
 80016c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80016ca:	480a      	ldr	r0, [pc, #40]	; (80016f4 <cansend+0x200>)
 80016cc:	f001 f820 	bl	8002710 <HAL_CAN_AddTxMessage>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <cansend+0x1e6>
  {
    /* Transmission request Error */
	//HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
    Error_Handler();
 80016d6:	f000 fa67 	bl	8001ba8 <Error_Handler>
  //if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
  //{
    /* Transmission request Error */
    //Error_Handler();
  //}
}
 80016da:	bf00      	nop
 80016dc:	3760      	adds	r7, #96	; 0x60
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	c2340000 	.word	0xc2340000
 80016e8:	42340000 	.word	0x42340000
 80016ec:	00000000 	.word	0x00000000
 80016f0:	43fa0000 	.word	0x43fa0000
 80016f4:	20000210 	.word	0x20000210

080016f8 <canread>:
////CAN数据帧发送函数////END


////CAN数据帧读取函数////BEG
void canread()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08e      	sub	sp, #56	; 0x38
 80016fc:	af00      	add	r7, sp, #0
  /*RxHeader.RTR = CAN_RTR_DATA;
  RxHeader.IDE = CAN_ID_STD;            
  RxHeader.StdId=std_id;
  RxHeader.DLC = 8;*/

  if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80016fe:	463b      	mov	r3, r7
 8001700:	f107 0208 	add.w	r2, r7, #8
 8001704:	2100      	movs	r1, #0
 8001706:	4828      	ldr	r0, [pc, #160]	; (80017a8 <canread+0xb0>)
 8001708:	f001 f8dd 	bl	80028c6 <HAL_CAN_GetRxMessage>
  {

  }

  uint16_t id = RxData[0];
 800170c:	783b      	ldrb	r3, [r7, #0]
 800170e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t p_int = (RxData[1]<<8)|RxData[2];
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	78bb      	ldrb	r3, [r7, #2]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b21b      	sxth	r3, r3
 800171e:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t v_int = (RxData[3]<<4)|(RxData[4]>>4);
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	b21a      	sxth	r2, r3
 8001726:	793b      	ldrb	r3, [r7, #4]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	b2db      	uxtb	r3, r3
 800172c:	b21b      	sxth	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b21b      	sxth	r3, r3
 8001732:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t i_int = ((RxData[4]&0xF)<<8)|RxData[5];
 8001734:	793b      	ldrb	r3, [r7, #4]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b21b      	sxth	r3, r3
 800173a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800173e:	b21a      	sxth	r2, r3
 8001740:	797b      	ldrb	r3, [r7, #5]
 8001742:	b21b      	sxth	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b21b      	sxth	r3, r3
 8001748:	863b      	strh	r3, [r7, #48]	; 0x30
  /// convert uints to floats ///
  float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 800174a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800174c:	2110      	movs	r1, #16
 800174e:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001752:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fe99 	bl	800148e <uint_to_float>
 800175c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001760:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001762:	210c      	movs	r1, #12
 8001764:	eddf 0a11 	vldr	s1, [pc, #68]	; 80017ac <canread+0xb4>
 8001768:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80017b0 <canread+0xb8>
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fe8e 	bl	800148e <uint_to_float>
 8001772:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 8001776:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001778:	210c      	movs	r1, #12
 800177a:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 800177e:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fe83 	bl	800148e <uint_to_float>
 8001788:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

  val_out.p_out = p;
 800178c:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <canread+0xbc>)
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	6013      	str	r3, [r2, #0]
  val_out.v_out = v;
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <canread+0xbc>)
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	6053      	str	r3, [r2, #4]
  val_out.t_out = t;
 8001798:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <canread+0xbc>)
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	6093      	str	r3, [r2, #8]

  //return val;
}
 800179e:	bf00      	nop
 80017a0:	3738      	adds	r7, #56	; 0x38
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000210 	.word	0x20000210
 80017ac:	42340000 	.word	0x42340000
 80017b0:	c2340000 	.word	0xc2340000
 80017b4:	20000204 	.word	0x20000204

080017b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <MX_GPIO_Init+0xb4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a25      	ldr	r2, [pc, #148]	; (800186c <MX_GPIO_Init+0xb4>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <MX_GPIO_Init+0xb4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_GPIO_Init+0xb4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a1e      	ldr	r2, [pc, #120]	; (800186c <MX_GPIO_Init+0xb4>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_GPIO_Init+0xb4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <MX_GPIO_Init+0xb4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <MX_GPIO_Init+0xb4>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_GPIO_Init+0xb4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_GPIO_Init+0xb4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <MX_GPIO_Init+0xb4>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_GPIO_Init+0xb4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2110      	movs	r1, #16
 8001842:	480b      	ldr	r0, [pc, #44]	; (8001870 <MX_GPIO_Init+0xb8>)
 8001844:	f001 fe56 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001848:	2310      	movs	r3, #16
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	2302      	movs	r3, #2
 8001856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_GPIO_Init+0xb8>)
 8001860:	f001 fcb4 	bl	80031cc <HAL_GPIO_Init>

}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001874:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800187c:	f000 fc92 	bl	80021a4 <HAL_Init>

	/* USER CODE BEGIN Init */


	////测试：理想状态角度返回相对零点值_汪part0////BEG
	data_ang.angle_first = 0;
 8001880:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <main+0x12c>)
 8001882:	2200      	movs	r2, #0
 8001884:	801a      	strh	r2, [r3, #0]
	data_ang.angle_now = 0;
 8001886:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <main+0x12c>)
 8001888:	2200      	movs	r2, #0
 800188a:	805a      	strh	r2, [r3, #2]
	data_ang.angle_rel = 0;
 800188c:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <main+0x12c>)
 800188e:	2200      	movs	r2, #0
 8001890:	809a      	strh	r2, [r3, #4]
	data_ang.angle_state = 0;
 8001892:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <main+0x12c>)
 8001894:	2200      	movs	r2, #0
 8001896:	719a      	strb	r2, [r3, #6]


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001898:	f000 f8aa 	bl	80019f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800189c:	f7ff ff8c 	bl	80017b8 <MX_GPIO_Init>
	MX_CAN1_Init();
 80018a0:	f7ff fbca 	bl	8001038 <MX_CAN1_Init>
	MX_TIM2_Init();
 80018a4:	f000 fb70 	bl	8001f88 <MX_TIM2_Init>
	MX_CAN2_Init();
 80018a8:	f7ff fbfc 	bl	80010a4 <MX_CAN2_Init>
	MX_USART2_UART_Init();
 80018ac:	f000 fbde 	bl	800206c <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80018b0:	f000 f98e 	bl	8001bd0 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */


	////初始化printf，TIM2中断，CAN过滤器，CAN1打开////BEG
	setvbuf(stdout, NULL, _IONBF, 0); //输出缓冲
 80018b4:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <main+0x130>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6898      	ldr	r0, [r3, #8]
 80018ba:	2300      	movs	r3, #0
 80018bc:	2202      	movs	r2, #2
 80018be:	2100      	movs	r1, #0
 80018c0:	f004 fb8e 	bl	8005fe0 <setvbuf>
	HAL_TIM_Base_Start_IT(&htim2);
 80018c4:	4838      	ldr	r0, [pc, #224]	; (80019a8 <main+0x134>)
 80018c6:	f002 fcd3 	bl	8004270 <HAL_TIM_Base_Start_IT>
	CAN_SetFilters();
 80018ca:	f7ff fce1 	bl	8001290 <CAN_SetFilters>
	HAL_CAN_Start(&hcan1);
 80018ce:	4837      	ldr	r0, [pc, #220]	; (80019ac <main+0x138>)
 80018d0:	f000 feda 	bl	8002688 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO1_MSG_PENDING);
 80018d4:	2110      	movs	r1, #16
 80018d6:	4835      	ldr	r0, [pc, #212]	; (80019ac <main+0x138>)
 80018d8:	f001 f907 	bl	8002aea <HAL_CAN_ActivateNotification>
	/*///通电“零点”角度返回值part1////BEG/
	SPI_AS5048A_Origin_Value();
	////通电“零点”角度返回值part1////END*/


	HAL_Delay(1);
 80018dc:	2001      	movs	r0, #1
 80018de:	f000 fcd3 	bl	8002288 <HAL_Delay>

	CANID = 0x00;
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <main+0x13c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
	p = 3.14;
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <main+0x140>)
 80018ea:	4a33      	ldr	r2, [pc, #204]	; (80019b8 <main+0x144>)
 80018ec:	601a      	str	r2, [r3, #0]
	v = 0;
 80018ee:	4b33      	ldr	r3, [pc, #204]	; (80019bc <main+0x148>)
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
	kp = 2;
 80018f6:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <main+0x14c>)
 80018f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fc:	601a      	str	r2, [r3, #0]
	kd = 1;
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <main+0x150>)
 8001900:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001904:	601a      	str	r2, [r3, #0]
	tr = 0;
 8001906:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <main+0x154>)
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	601a      	str	r2, [r3, #0]

	p_crx = p;
 800190e:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <main+0x140>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2e      	ldr	r2, [pc, #184]	; (80019cc <main+0x158>)
 8001914:	6013      	str	r3, [r2, #0]
	v_crx = v;
 8001916:	4b29      	ldr	r3, [pc, #164]	; (80019bc <main+0x148>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <main+0x15c>)
 800191c:	6013      	str	r3, [r2, #0]

	Mode = 0;
 800191e:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <main+0x160>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
	Mode_p = 0;
 8001924:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <main+0x164>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
		////测试：p爬升变化////END*/


		////测试：S型速度曲线变化////BEG
		HAL_CAN_Start(&hcan1);
 800192a:	4820      	ldr	r0, [pc, #128]	; (80019ac <main+0x138>)
 800192c:	f000 feac 	bl	8002688 <HAL_CAN_Start>
		v = S_Trajectory(0, 6.28, ss, -1, 5, 7);
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <main+0x168>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	eeb1 2a0c 	vmov.f32	s4, #28	; 0x40e00000  7.0
 8001938:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 800193c:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001940:	4618      	mov	r0, r3
 8001942:	eddf 0a27 	vldr	s1, [pc, #156]	; 80019e0 <main+0x16c>
 8001946:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80019e4 <main+0x170>
 800194a:	f7ff fd01 	bl	8001350 <S_Trajectory>
 800194e:	eef0 7a40 	vmov.f32	s15, s0
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <main+0x148>)
 8001954:	edc3 7a00 	vstr	s15, [r3]
		//cansend(0x00, 0, v, 0, 1, 0);
		canread();
 8001958:	f7ff fece 	bl	80016f8 <canread>
		printf("pos = %.3f, vel = %.3f, v_in = %.3f\r\n", val_out.p_out, val_out.v_out, v);
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <main+0x174>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fe11 	bl	8000588 <__aeabi_f2d>
 8001966:	4680      	mov	r8, r0
 8001968:	4689      	mov	r9, r1
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <main+0x174>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe0a 	bl	8000588 <__aeabi_f2d>
 8001974:	4604      	mov	r4, r0
 8001976:	460d      	mov	r5, r1
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <main+0x148>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fe03 	bl	8000588 <__aeabi_f2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800198a:	e9cd 4500 	strd	r4, r5, [sp]
 800198e:	4642      	mov	r2, r8
 8001990:	464b      	mov	r3, r9
 8001992:	4816      	ldr	r0, [pc, #88]	; (80019ec <main+0x178>)
 8001994:	f004 fb0c 	bl	8005fb0 <iprintf>
		HAL_Delay(10);
 8001998:	200a      	movs	r0, #10
 800199a:	f000 fc75 	bl	8002288 <HAL_Delay>
		HAL_CAN_Start(&hcan1);
 800199e:	e7c4      	b.n	800192a <main+0xb6>
 80019a0:	200001fc 	.word	0x200001fc
 80019a4:	2000000c 	.word	0x2000000c
 80019a8:	200002e8 	.word	0x200002e8
 80019ac:	20000210 	.word	0x20000210
 80019b0:	20000264 	.word	0x20000264
 80019b4:	20000268 	.word	0x20000268
 80019b8:	4048f5c3 	.word	0x4048f5c3
 80019bc:	2000026c 	.word	0x2000026c
 80019c0:	20000270 	.word	0x20000270
 80019c4:	20000274 	.word	0x20000274
 80019c8:	20000278 	.word	0x20000278
 80019cc:	20000284 	.word	0x20000284
 80019d0:	20000288 	.word	0x20000288
 80019d4:	20000282 	.word	0x20000282
 80019d8:	20000283 	.word	0x20000283
 80019dc:	2000027c 	.word	0x2000027c
 80019e0:	40c8f5c3 	.word	0x40c8f5c3
 80019e4:	00000000 	.word	0x00000000
 80019e8:	20000204 	.word	0x20000204
 80019ec:	0800a180 	.word	0x0800a180

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	; 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	2234      	movs	r2, #52	; 0x34
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fc54 	bl	80052ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 0308 	add.w	r3, r7, #8
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <SystemClock_Config+0xdc>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a2b      	ldr	r2, [pc, #172]	; (8001acc <SystemClock_Config+0xdc>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <SystemClock_Config+0xdc>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a30:	2300      	movs	r3, #0
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <SystemClock_Config+0xe0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <SystemClock_Config+0xe0>)
 8001a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <SystemClock_Config+0xe0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a50:	2301      	movs	r3, #1
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a54:	2310      	movs	r3, #16
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a60:	2308      	movs	r3, #8
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001a64:	23b4      	movs	r3, #180	; 0xb4
 8001a66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 f883 	bl	8003b84 <HAL_RCC_OscConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a84:	f000 f890 	bl	8001ba8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a88:	f001 fd68 	bl	800355c <HAL_PWREx_EnableOverDrive>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001a92:	f000 f889 	bl	8001ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a96:	230f      	movs	r3, #15
 8001a98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	2105      	movs	r1, #5
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 fda1 	bl	80035fc <HAL_RCC_ClockConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ac0:	f000 f872 	bl	8001ba8 <Error_Handler>
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3750      	adds	r7, #80	; 0x50
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

////计时////BEG
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001adc:	2101      	movs	r1, #1
 8001ade:	4823      	ldr	r0, [pc, #140]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001ae0:	f001 fd21 	bl	8003526 <HAL_GPIO_TogglePin>
  ss++;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001aee:	801a      	strh	r2, [r3, #0]
  if(ss == 100){
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	2b64      	cmp	r3, #100	; 0x64
 8001af6:	d135      	bne.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x90>
	//爬升模式下注释掉ss=0
	ss = 0;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	801a      	strh	r2, [r3, #0]
	s++;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b08:	701a      	strb	r2, [r3, #0]
    if(s == 60){
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b3c      	cmp	r3, #60	; 0x3c
 8001b10:	d11b      	bne.n	8001b4a <HAL_TIM_PeriodElapsedCallback+0x76>
      s = 0;
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
      m++;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b22:	701a      	strb	r2, [r3, #0]
      compare++;
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b2e:	701a      	strb	r2, [r3, #0]
      if(m == 60){
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b3c      	cmp	r3, #60	; 0x3c
 8001b36:	d108      	bne.n	8001b4a <HAL_TIM_PeriodElapsedCallback+0x76>
    	  m = 0;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
    	  h++;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b48:	701a      	strb	r2, [r3, #0]
      }
    }
    compare++;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b54:	701a      	strb	r2, [r3, #0]
    if(compare >= 10){
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b09      	cmp	r3, #9
 8001b5c:	d902      	bls.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x90>
    	compare = 0;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	2000027c 	.word	0x2000027c
 8001b74:	2000027e 	.word	0x2000027e
 8001b78:	2000027f 	.word	0x2000027f
 8001b7c:	20000281 	.word	0x20000281
 8001b80:	20000280 	.word	0x20000280

08001b84 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001b8c:	1d39      	adds	r1, r7, #4
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	2201      	movs	r2, #1
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <__io_putchar+0x20>)
 8001b96:	f002 ffea 	bl	8004b6e <HAL_UART_Transmit>
	return ch;
 8001b9a:	687b      	ldr	r3, [r7, #4]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000330 	.word	0x20000330

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	cansend(0x00, 0, 0, 2, 1, 0);
 8001bac:	ed9f 2a07 	vldr	s4, [pc, #28]	; 8001bcc <Error_Handler+0x24>
 8001bb0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001bb4:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8001bb8:	eddf 0a04 	vldr	s1, [pc, #16]	; 8001bcc <Error_Handler+0x24>
 8001bbc:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001bcc <Error_Handler+0x24>
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fc97 	bl	80014f4 <cansend>
  while (1)
  {
  }*/

  /* USER CODE END Error_Handler_Debug */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001bd6:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <MX_SPI1_Init+0x6c>)
 8001bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001c06:	2220      	movs	r2, #32
 8001c08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001c1e:	220a      	movs	r2, #10
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001c24:	f002 fa4c 	bl	80040c0 <HAL_SPI_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001c2e:	f7ff ffbb 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000028c 	.word	0x2000028c
 8001c3c:	40013000 	.word	0x40013000

08001c40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_SPI_MspInit+0x84>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d12b      	bne.n	8001cba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a17      	ldr	r2, [pc, #92]	; (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c9a:	23e0      	movs	r3, #224	; 0xe0
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001caa:	2305      	movs	r3, #5
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_SPI_MspInit+0x8c>)
 8001cb6:	f001 fa89 	bl	80031cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <HAL_MspInit+0x4c>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <NMI_Handler+0x4>

08001d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler+0x4>

08001d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f000 fa6c 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <CAN1_RX0_IRQHandler+0x10>)
 8001d7a:	f000 fedc 	bl	8002b36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000210 	.word	0x20000210

08001d88 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <CAN1_RX1_IRQHandler+0x10>)
 8001d8e:	f000 fed2 	bl	8002b36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000210 	.word	0x20000210

08001d9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <TIM2_IRQHandler+0x10>)
 8001da2:	f002 fad5 	bl	8004350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200002e8 	.word	0x200002e8

08001db0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <CAN2_RX0_IRQHandler+0x10>)
 8001db6:	f000 febe 	bl	8002b36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000238 	.word	0x20000238

08001dc4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <CAN2_RX1_IRQHandler+0x10>)
 8001dca:	f000 feb4 	bl	8002b36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000238 	.word	0x20000238

08001dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
	return 1;
 8001ddc:	2301      	movs	r3, #1
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_kill>:

int _kill(int pid, int sig)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001df2:	f003 fa31 	bl	8005258 <__errno>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2216      	movs	r2, #22
 8001dfa:	601a      	str	r2, [r3, #0]
	return -1;
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_exit>:

void _exit (int status)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ffe7 	bl	8001de8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e1a:	e7fe      	b.n	8001e1a <_exit+0x12>

08001e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e00a      	b.n	8001e44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e2e:	f3af 8000 	nop.w
 8001e32:	4601      	mov	r1, r0
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	b2ca      	uxtb	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf0      	blt.n	8001e2e <_read+0x12>
	}

return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e009      	b.n	8001e7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	60ba      	str	r2, [r7, #8]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fe87 	bl	8001b84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dbf1      	blt.n	8001e68 <_write+0x12>
	}
	return len;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_close>:

int _close(int file)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
	return -1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb6:	605a      	str	r2, [r3, #4]
	return 0;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <_isatty>:

int _isatty(int file)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <_sbrk+0x5c>)
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <_sbrk+0x60>)
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <_sbrk+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <_sbrk+0x64>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <_sbrk+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d207      	bcs.n	8001f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f28:	f003 f996 	bl	8005258 <__errno>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	220c      	movs	r2, #12
 8001f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	e009      	b.n	8001f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <_sbrk+0x64>)
 8001f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20020000 	.word	0x20020000
 8001f58:	00000400 	.word	0x00000400
 8001f5c:	200002e4 	.word	0x200002e4
 8001f60:	20000388 	.word	0x20000388

08001f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SystemInit+0x20>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <SystemInit+0x20>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <MX_TIM2_Init+0x94>)
 8001fa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001faa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <MX_TIM2_Init+0x94>)
 8001fae:	f242 3227 	movw	r2, #8999	; 0x2327
 8001fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_TIM2_Init+0x94>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <MX_TIM2_Init+0x94>)
 8001fbc:	2263      	movs	r2, #99	; 0x63
 8001fbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <MX_TIM2_Init+0x94>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <MX_TIM2_Init+0x94>)
 8001fc8:	2280      	movs	r2, #128	; 0x80
 8001fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fcc:	4813      	ldr	r0, [pc, #76]	; (800201c <MX_TIM2_Init+0x94>)
 8001fce:	f002 f900 	bl	80041d2 <HAL_TIM_Base_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001fd8:	f7ff fde6 	bl	8001ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <MX_TIM2_Init+0x94>)
 8001fea:	f002 fab9 	bl	8004560 <HAL_TIM_ConfigClockSource>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ff4:	f7ff fdd8 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002000:	463b      	mov	r3, r7
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_TIM2_Init+0x94>)
 8002006:	f002 fcd5 	bl	80049b4 <HAL_TIMEx_MasterConfigSynchronization>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002010:	f7ff fdca 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200002e8 	.word	0x200002e8

08002020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d115      	bne.n	800205e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_TIM_Base_MspInit+0x48>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <HAL_TIM_Base_MspInit+0x48>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_TIM_Base_MspInit+0x48>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	201c      	movs	r0, #28
 8002054:	f001 f883 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002058:	201c      	movs	r0, #28
 800205a:	f001 f89c 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <MX_USART2_UART_Init+0x50>)
 8002074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002078:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800207c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 80020a4:	f002 fd16 	bl	8004ad4 <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ae:	f7ff fd7b 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000330 	.word	0x20000330
 80020bc:	40004400 	.word	0x40004400

080020c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a19      	ldr	r2, [pc, #100]	; (8002144 <HAL_UART_MspInit+0x84>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d12b      	bne.n	800213a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_UART_MspInit+0x88>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_UART_MspInit+0x88>)
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_UART_MspInit+0x88>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_UART_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_UART_MspInit+0x88>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_UART_MspInit+0x88>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800211a:	230c      	movs	r3, #12
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800212a:	2307      	movs	r3, #7
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <HAL_UART_MspInit+0x8c>)
 8002136:	f001 f849 	bl	80031cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800213a:	bf00      	nop
 800213c:	3728      	adds	r7, #40	; 0x28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40004400 	.word	0x40004400
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000

08002150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002156:	490e      	ldr	r1, [pc, #56]	; (8002190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002158:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800215c:	e002      	b.n	8002164 <LoopCopyDataInit>

0800215e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002162:	3304      	adds	r3, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002168:	d3f9      	bcc.n	800215e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800216c:	4c0b      	ldr	r4, [pc, #44]	; (800219c <LoopFillZerobss+0x26>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002170:	e001      	b.n	8002176 <LoopFillZerobss>

08002172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002174:	3204      	adds	r2, #4

08002176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002178:	d3fb      	bcc.n	8002172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800217a:	f7ff fef3 	bl	8001f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800217e:	f003 f871 	bl	8005264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002182:	f7ff fb77 	bl	8001874 <main>
  bx  lr    
 8002186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002194:	0800a6b0 	.word	0x0800a6b0
  ldr r2, =_sbss
 8002198:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800219c:	20000388 	.word	0x20000388

080021a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC_IRQHandler>
	...

080021a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <HAL_Init+0x40>)
 80021ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_Init+0x40>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_Init+0x40>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 ffbb 	bl	8003148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	200f      	movs	r0, #15
 80021d4:	f000 f808 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fd7a 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 ffd3 	bl	80031b2 <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f000 ff9b 	bl	800315e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000000 	.word	0x20000000
 8002240:	20000008 	.word	0x20000008
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000008 	.word	0x20000008
 800226c:	20000374 	.word	0x20000374

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000374 	.word	0x20000374

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffde 	bl	8002270 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0ed      	b.n	80024be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe ff0e 	bl	8001110 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002304:	f7ff ffb4 	bl	8002270 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800230a:	e012      	b.n	8002332 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800230c:	f7ff ffb0 	bl	8002270 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b0a      	cmp	r3, #10
 8002318:	d90b      	bls.n	8002332 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0c5      	b.n	80024be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0e5      	beq.n	800230c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0202 	bic.w	r2, r2, #2
 800234e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002350:	f7ff ff8e 	bl	8002270 <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002356:	e012      	b.n	800237e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002358:	f7ff ff8a 	bl	8002270 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b0a      	cmp	r3, #10
 8002364:	d90b      	bls.n	800237e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2205      	movs	r2, #5
 8002376:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e09f      	b.n	80024be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e5      	bne.n	8002358 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e1b      	ldrb	r3, [r3, #24]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d108      	bne.n	80023a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e007      	b.n	80023b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7e5b      	ldrb	r3, [r3, #25]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e007      	b.n	80023e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7e9b      	ldrb	r3, [r3, #26]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d108      	bne.n	80023fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0220 	orr.w	r2, r2, #32
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e007      	b.n	800240a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0220 	bic.w	r2, r2, #32
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7edb      	ldrb	r3, [r3, #27]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d108      	bne.n	8002424 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0210 	bic.w	r2, r2, #16
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e007      	b.n	8002434 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0210 	orr.w	r2, r2, #16
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7f1b      	ldrb	r3, [r3, #28]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d108      	bne.n	800244e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0208 	orr.w	r2, r2, #8
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e007      	b.n	800245e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0208 	bic.w	r2, r2, #8
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7f5b      	ldrb	r3, [r3, #29]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d108      	bne.n	8002478 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0204 	orr.w	r2, r2, #4
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e007      	b.n	8002488 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0204 	bic.w	r2, r2, #4
 8002486:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	ea42 0103 	orr.w	r1, r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d003      	beq.n	80024ee <HAL_CAN_ConfigFilter+0x26>
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	f040 80be 	bne.w	800266a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80024ee:	4b65      	ldr	r3, [pc, #404]	; (8002684 <HAL_CAN_ConfigFilter+0x1bc>)
 80024f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002508:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	431a      	orrs	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2201      	movs	r2, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	43db      	mvns	r3, r3
 8002540:	401a      	ands	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d123      	bne.n	8002598 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43db      	mvns	r3, r3
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002572:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3248      	adds	r2, #72	; 0x48
 8002578:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800258c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800258e:	6979      	ldr	r1, [r7, #20]
 8002590:	3348      	adds	r3, #72	; 0x48
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d122      	bne.n	80025e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3248      	adds	r2, #72	; 0x48
 80025c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025dc:	6979      	ldr	r1, [r7, #20]
 80025de:	3348      	adds	r3, #72	; 0x48
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002600:	e007      	b.n	8002612 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	431a      	orrs	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	401a      	ands	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800262c:	e007      	b.n	800263e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	431a      	orrs	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	431a      	orrs	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800265c:	f023 0201 	bic.w	r2, r3, #1
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e006      	b.n	8002678 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40006400 	.word	0x40006400

08002688 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d12e      	bne.n	80026fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026b4:	f7ff fddc 	bl	8002270 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026ba:	e012      	b.n	80026e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026bc:	f7ff fdd8 	bl	8002270 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b0a      	cmp	r3, #10
 80026c8:	d90b      	bls.n	80026e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2205      	movs	r2, #5
 80026da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e012      	b.n	8002708 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e5      	bne.n	80026bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e006      	b.n	8002708 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002724:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800272e:	7ffb      	ldrb	r3, [r7, #31]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d003      	beq.n	800273c <HAL_CAN_AddTxMessage+0x2c>
 8002734:	7ffb      	ldrb	r3, [r7, #31]
 8002736:	2b02      	cmp	r3, #2
 8002738:	f040 80b8 	bne.w	80028ac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80a0 	beq.w	800289c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	0e1b      	lsrs	r3, r3, #24
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d907      	bls.n	800277c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e09e      	b.n	80028ba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800277c:	2201      	movs	r2, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	409a      	lsls	r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	6809      	ldr	r1, [r1, #0]
 800279c:	431a      	orrs	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3318      	adds	r3, #24
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	440b      	add	r3, r1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e00f      	b.n	80027ca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3318      	adds	r3, #24
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	440b      	add	r3, r1
 80027c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3318      	adds	r3, #24
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	440b      	add	r3, r1
 80027da:	3304      	adds	r3, #4
 80027dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	7d1b      	ldrb	r3, [r3, #20]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d111      	bne.n	800280a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3318      	adds	r3, #24
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	4413      	add	r3, r2
 80027f2:	3304      	adds	r3, #4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	6811      	ldr	r1, [r2, #0]
 80027fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3318      	adds	r3, #24
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	440b      	add	r3, r1
 8002806:	3304      	adds	r3, #4
 8002808:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3307      	adds	r3, #7
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	061a      	lsls	r2, r3, #24
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3306      	adds	r3, #6
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3305      	adds	r3, #5
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	4313      	orrs	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	3204      	adds	r2, #4
 800282a:	7812      	ldrb	r2, [r2, #0]
 800282c:	4610      	mov	r0, r2
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	6811      	ldr	r1, [r2, #0]
 8002832:	ea43 0200 	orr.w	r2, r3, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	440b      	add	r3, r1
 800283c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002840:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3303      	adds	r3, #3
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	061a      	lsls	r2, r3, #24
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3302      	adds	r3, #2
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3301      	adds	r3, #1
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	4313      	orrs	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	4610      	mov	r0, r2
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	6811      	ldr	r1, [r2, #0]
 8002868:	ea43 0200 	orr.w	r2, r3, r0
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	440b      	add	r3, r1
 8002872:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002876:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3318      	adds	r3, #24
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	4413      	add	r3, r2
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6811      	ldr	r1, [r2, #0]
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3318      	adds	r3, #24
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	440b      	add	r3, r1
 8002896:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e00e      	b.n	80028ba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e006      	b.n	80028ba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80028c6:	b480      	push	{r7}
 80028c8:	b087      	sub	sp, #28
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d003      	beq.n	80028ea <HAL_CAN_GetRxMessage+0x24>
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	f040 80f3 	bne.w	8002ad0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10e      	bne.n	800290e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d116      	bne.n	800292c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0e7      	b.n	8002ade <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0d8      	b.n	8002ade <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	331b      	adds	r3, #27
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	4413      	add	r3, r2
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0204 	and.w	r2, r3, #4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	331b      	adds	r3, #27
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	4413      	add	r3, r2
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0d5b      	lsrs	r3, r3, #21
 800295a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e00b      	b.n	800297c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	331b      	adds	r3, #27
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	4413      	add	r3, r2
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	08db      	lsrs	r3, r3, #3
 8002974:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	331b      	adds	r3, #27
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	4413      	add	r3, r2
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0202 	and.w	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	331b      	adds	r3, #27
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	4413      	add	r3, r2
 800299e:	3304      	adds	r3, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 020f 	and.w	r2, r3, #15
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	331b      	adds	r3, #27
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	4413      	add	r3, r2
 80029b6:	3304      	adds	r3, #4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	331b      	adds	r3, #27
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0a1a      	lsrs	r2, r3, #8
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0c1a      	lsrs	r2, r3, #16
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	3302      	adds	r3, #2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e1a      	lsrs	r2, r3, #24
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	3303      	adds	r3, #3
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	3304      	adds	r3, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0a1a      	lsrs	r2, r3, #8
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	3305      	adds	r3, #5
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0c1a      	lsrs	r2, r3, #16
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	3306      	adds	r3, #6
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0e1a      	lsrs	r2, r3, #24
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	3307      	adds	r3, #7
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0220 	orr.w	r2, r2, #32
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	e007      	b.n	8002acc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0220 	orr.w	r2, r2, #32
 8002aca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e006      	b.n	8002ade <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d002      	beq.n	8002b08 <HAL_CAN_ActivateNotification+0x1e>
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d109      	bne.n	8002b1c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6959      	ldr	r1, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e006      	b.n	8002b2a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b08a      	sub	sp, #40	; 0x28
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d07c      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d023      	beq.n	8002bce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f983 	bl	8002ea4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b9e:	e016      	b.n	8002bce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d004      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb2:	e00c      	b.n	8002bce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	e002      	b.n	8002bce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f989 	bl	8002ee0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d024      	beq.n	8002c22 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002be0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f963 	bl	8002eb8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002bf2:	e016      	b.n	8002c22 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d004      	beq.n	8002c08 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	e00c      	b.n	8002c22 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d004      	beq.n	8002c1c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1a:	e002      	b.n	8002c22 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f969 	bl	8002ef4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d024      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f943 	bl	8002ecc <HAL_CAN_TxMailbox2CompleteCallback>
 8002c46:	e016      	b.n	8002c76 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	e00c      	b.n	8002c76 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	e002      	b.n	8002c76 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f949 	bl	8002f08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00c      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2210      	movs	r2, #16
 8002c98:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f93a 	bl	8002f30 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f921 	bl	8002f1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00c      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2208      	movs	r2, #8
 8002d18:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f91c 	bl	8002f58 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f903 	bl	8002f44 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2210      	movs	r2, #16
 8002d58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f906 	bl	8002f6c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2208      	movs	r2, #8
 8002d7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f8ff 	bl	8002f80 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d07b      	beq.n	8002e84 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d072      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f043 0304 	orr.w	r3, r3, #4
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d043      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d03e      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e04:	2b60      	cmp	r3, #96	; 0x60
 8002e06:	d02b      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x32a>
 8002e08:	2b60      	cmp	r3, #96	; 0x60
 8002e0a:	d82e      	bhi.n	8002e6a <HAL_CAN_IRQHandler+0x334>
 8002e0c:	2b50      	cmp	r3, #80	; 0x50
 8002e0e:	d022      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x320>
 8002e10:	2b50      	cmp	r3, #80	; 0x50
 8002e12:	d82a      	bhi.n	8002e6a <HAL_CAN_IRQHandler+0x334>
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d019      	beq.n	8002e4c <HAL_CAN_IRQHandler+0x316>
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d826      	bhi.n	8002e6a <HAL_CAN_IRQHandler+0x334>
 8002e1c:	2b30      	cmp	r3, #48	; 0x30
 8002e1e:	d010      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x30c>
 8002e20:	2b30      	cmp	r3, #48	; 0x30
 8002e22:	d822      	bhi.n	8002e6a <HAL_CAN_IRQHandler+0x334>
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d002      	beq.n	8002e2e <HAL_CAN_IRQHandler+0x2f8>
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d005      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e2c:	e01d      	b.n	8002e6a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e36:	e019      	b.n	8002e6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	f043 0310 	orr.w	r3, r3, #16
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e40:	e014      	b.n	8002e6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	f043 0320 	orr.w	r3, r3, #32
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e4a:	e00f      	b.n	8002e6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e54:	e00a      	b.n	8002e6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e5e:	e005      	b.n	8002e6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e68:	e000      	b.n	8002e6c <HAL_CAN_IRQHandler+0x336>
            break;
 8002e6a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e7a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2204      	movs	r2, #4
 8002e82:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f87c 	bl	8002f94 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3728      	adds	r7, #40	; 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fda:	4a04      	ldr	r2, [pc, #16]	; (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	60d3      	str	r3, [r2, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <__NVIC_GetPriorityGrouping+0x18>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	f003 0307 	and.w	r3, r3, #7
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	2b00      	cmp	r3, #0
 800301c:	db0b      	blt.n	8003036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4907      	ldr	r1, [pc, #28]	; (8003044 <__NVIC_EnableIRQ+0x38>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2001      	movs	r0, #1
 800302e:	fa00 f202 	lsl.w	r2, r0, r2
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000e100 	.word	0xe000e100

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
         );
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003114:	d301      	bcc.n	800311a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003116:	2301      	movs	r3, #1
 8003118:	e00f      	b.n	800313a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <SysTick_Config+0x40>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003122:	210f      	movs	r1, #15
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f7ff ff8e 	bl	8003048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <SysTick_Config+0x40>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <SysTick_Config+0x40>)
 8003134:	2207      	movs	r2, #7
 8003136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000e010 	.word	0xe000e010

08003148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff29 	bl	8002fa8 <__NVIC_SetPriorityGrouping>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003170:	f7ff ff3e 	bl	8002ff0 <__NVIC_GetPriorityGrouping>
 8003174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f7ff ff8e 	bl	800309c <NVIC_EncodePriority>
 8003180:	4602      	mov	r2, r0
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff5d 	bl	8003048 <__NVIC_SetPriority>
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff31 	bl	800300c <__NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ffa2 	bl	8003104 <SysTick_Config>
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	e165      	b.n	80034b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	429a      	cmp	r2, r3
 8003202:	f040 8154 	bne.w	80034ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d005      	beq.n	800321e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321a:	2b02      	cmp	r3, #2
 800321c:	d130      	bne.n	8003280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2203      	movs	r2, #3
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003254:	2201      	movs	r2, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 0201 	and.w	r2, r3, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b03      	cmp	r3, #3
 800328a:	d017      	beq.n	80032bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d123      	bne.n	8003310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	08da      	lsrs	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3208      	adds	r2, #8
 80032d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	220f      	movs	r2, #15
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	08da      	lsrs	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3208      	adds	r2, #8
 800330a:	69b9      	ldr	r1, [r7, #24]
 800330c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2203      	movs	r2, #3
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0203 	and.w	r2, r3, #3
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80ae 	beq.w	80034ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b5d      	ldr	r3, [pc, #372]	; (80034cc <HAL_GPIO_Init+0x300>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4a5c      	ldr	r2, [pc, #368]	; (80034cc <HAL_GPIO_Init+0x300>)
 800335c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	4b5a      	ldr	r3, [pc, #360]	; (80034cc <HAL_GPIO_Init+0x300>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800336e:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_GPIO_Init+0x304>)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	3302      	adds	r3, #2
 8003376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	220f      	movs	r2, #15
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4f      	ldr	r2, [pc, #316]	; (80034d4 <HAL_GPIO_Init+0x308>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d025      	beq.n	80033e6 <HAL_GPIO_Init+0x21a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4e      	ldr	r2, [pc, #312]	; (80034d8 <HAL_GPIO_Init+0x30c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01f      	beq.n	80033e2 <HAL_GPIO_Init+0x216>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4d      	ldr	r2, [pc, #308]	; (80034dc <HAL_GPIO_Init+0x310>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d019      	beq.n	80033de <HAL_GPIO_Init+0x212>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4c      	ldr	r2, [pc, #304]	; (80034e0 <HAL_GPIO_Init+0x314>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_GPIO_Init+0x20e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4b      	ldr	r2, [pc, #300]	; (80034e4 <HAL_GPIO_Init+0x318>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00d      	beq.n	80033d6 <HAL_GPIO_Init+0x20a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4a      	ldr	r2, [pc, #296]	; (80034e8 <HAL_GPIO_Init+0x31c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d007      	beq.n	80033d2 <HAL_GPIO_Init+0x206>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a49      	ldr	r2, [pc, #292]	; (80034ec <HAL_GPIO_Init+0x320>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d101      	bne.n	80033ce <HAL_GPIO_Init+0x202>
 80033ca:	2306      	movs	r3, #6
 80033cc:	e00c      	b.n	80033e8 <HAL_GPIO_Init+0x21c>
 80033ce:	2307      	movs	r3, #7
 80033d0:	e00a      	b.n	80033e8 <HAL_GPIO_Init+0x21c>
 80033d2:	2305      	movs	r3, #5
 80033d4:	e008      	b.n	80033e8 <HAL_GPIO_Init+0x21c>
 80033d6:	2304      	movs	r3, #4
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_Init+0x21c>
 80033da:	2303      	movs	r3, #3
 80033dc:	e004      	b.n	80033e8 <HAL_GPIO_Init+0x21c>
 80033de:	2302      	movs	r3, #2
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_Init+0x21c>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_GPIO_Init+0x21c>
 80033e6:	2300      	movs	r3, #0
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f002 0203 	and.w	r2, r2, #3
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4093      	lsls	r3, r2
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f8:	4935      	ldr	r1, [pc, #212]	; (80034d0 <HAL_GPIO_Init+0x304>)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	3302      	adds	r3, #2
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003406:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <HAL_GPIO_Init+0x324>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342a:	4a31      	ldr	r2, [pc, #196]	; (80034f0 <HAL_GPIO_Init+0x324>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003430:	4b2f      	ldr	r3, [pc, #188]	; (80034f0 <HAL_GPIO_Init+0x324>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003454:	4a26      	ldr	r2, [pc, #152]	; (80034f0 <HAL_GPIO_Init+0x324>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_GPIO_Init+0x324>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800347e:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <HAL_GPIO_Init+0x324>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003484:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <HAL_GPIO_Init+0x324>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034a8:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <HAL_GPIO_Init+0x324>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3301      	adds	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	f67f ae96 	bls.w	80031e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40013800 	.word	0x40013800
 80034d4:	40020000 	.word	0x40020000
 80034d8:	40020400 	.word	0x40020400
 80034dc:	40020800 	.word	0x40020800
 80034e0:	40020c00 	.word	0x40020c00
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40021400 	.word	0x40021400
 80034ec:	40021800 	.word	0x40021800
 80034f0:	40013c00 	.word	0x40013c00

080034f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
 8003500:	4613      	mov	r3, r2
 8003502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003504:	787b      	ldrb	r3, [r7, #1]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003510:	e003      	b.n	800351a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003512:	887b      	ldrh	r3, [r7, #2]
 8003514:	041a      	lsls	r2, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	619a      	str	r2, [r3, #24]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003538:	887a      	ldrh	r2, [r7, #2]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4013      	ands	r3, r2
 800353e:	041a      	lsls	r2, r3, #16
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43d9      	mvns	r1, r3
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	400b      	ands	r3, r1
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	619a      	str	r2, [r3, #24]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_PWREx_EnableOverDrive+0x90>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <HAL_PWREx_EnableOverDrive+0x90>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <HAL_PWREx_EnableOverDrive+0x90>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003588:	f7fe fe72 	bl	8002270 <HAL_GetTick>
 800358c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800358e:	e009      	b.n	80035a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003590:	f7fe fe6e 	bl	8002270 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359e:	d901      	bls.n	80035a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e01f      	b.n	80035e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	d1ee      	bne.n	8003590 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b8:	f7fe fe5a 	bl	8002270 <HAL_GetTick>
 80035bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035be:	e009      	b.n	80035d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035c0:	f7fe fe56 	bl	8002270 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ce:	d901      	bls.n	80035d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e007      	b.n	80035e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035e0:	d1ee      	bne.n	80035c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	420e0040 	.word	0x420e0040
 80035f4:	40007000 	.word	0x40007000
 80035f8:	420e0044 	.word	0x420e0044

080035fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0cc      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b68      	ldr	r3, [pc, #416]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d90c      	bls.n	8003638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0b8      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003650:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800365a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003668:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a52      	ldr	r2, [pc, #328]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003674:	4b50      	ldr	r3, [pc, #320]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	494d      	ldr	r1, [pc, #308]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d044      	beq.n	800371c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d119      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e07f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e06f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e067      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4934      	ldr	r1, [pc, #208]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ec:	f7fe fdc0 	bl	8002270 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fe fdbc 	bl	8002270 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e04f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 020c 	and.w	r2, r3, #12
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1eb      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d20c      	bcs.n	8003744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e032      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4916      	ldr	r1, [pc, #88]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	490e      	ldr	r1, [pc, #56]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003782:	f000 f855 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 8003786:	4602      	mov	r2, r0
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	490a      	ldr	r1, [pc, #40]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	5ccb      	ldrb	r3, [r1, r3]
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fd20 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023c00 	.word	0x40023c00
 80037b8:	40023800 	.word	0x40023800
 80037bc:	0800a1a8 	.word	0x0800a1a8
 80037c0:	20000000 	.word	0x20000000
 80037c4:	20000004 	.word	0x20000004

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000

080037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037e4:	f7ff fff0 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	0a9b      	lsrs	r3, r3, #10
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	0800a1b8 	.word	0x0800a1b8

08003808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800380c:	f7ff ffdc 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0b5b      	lsrs	r3, r3, #13
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	; (800382c <HAL_RCC_GetPCLK2Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800
 800382c:	0800a1b8 	.word	0x0800a1b8

08003830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003834:	b0a6      	sub	sp, #152	; 0x98
 8003836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003856:	4bc8      	ldr	r3, [pc, #800]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b0c      	cmp	r3, #12
 8003860:	f200 817e 	bhi.w	8003b60 <HAL_RCC_GetSysClockFreq+0x330>
 8003864:	a201      	add	r2, pc, #4	; (adr r2, 800386c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	080038a1 	.word	0x080038a1
 8003870:	08003b61 	.word	0x08003b61
 8003874:	08003b61 	.word	0x08003b61
 8003878:	08003b61 	.word	0x08003b61
 800387c:	080038a9 	.word	0x080038a9
 8003880:	08003b61 	.word	0x08003b61
 8003884:	08003b61 	.word	0x08003b61
 8003888:	08003b61 	.word	0x08003b61
 800388c:	080038b1 	.word	0x080038b1
 8003890:	08003b61 	.word	0x08003b61
 8003894:	08003b61 	.word	0x08003b61
 8003898:	08003b61 	.word	0x08003b61
 800389c:	08003a1b 	.word	0x08003a1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a0:	4bb6      	ldr	r3, [pc, #728]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x34c>)
 80038a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80038a6:	e15f      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038a8:	4bb5      	ldr	r3, [pc, #724]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x350>)
 80038aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80038ae:	e15b      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b0:	4bb1      	ldr	r3, [pc, #708]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038bc:	4bae      	ldr	r3, [pc, #696]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d031      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c8:	4bab      	ldr	r3, [pc, #684]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	2200      	movs	r2, #0
 80038d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038da:	663b      	str	r3, [r7, #96]	; 0x60
 80038dc:	2300      	movs	r3, #0
 80038de:	667b      	str	r3, [r7, #100]	; 0x64
 80038e0:	4ba7      	ldr	r3, [pc, #668]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x350>)
 80038e2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80038e6:	462a      	mov	r2, r5
 80038e8:	fb03 f202 	mul.w	r2, r3, r2
 80038ec:	2300      	movs	r3, #0
 80038ee:	4621      	mov	r1, r4
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	4aa2      	ldr	r2, [pc, #648]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x350>)
 80038f8:	4621      	mov	r1, r4
 80038fa:	fba1 1202 	umull	r1, r2, r1, r2
 80038fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003900:	460a      	mov	r2, r1
 8003902:	67ba      	str	r2, [r7, #120]	; 0x78
 8003904:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003906:	4413      	add	r3, r2
 8003908:	67fb      	str	r3, [r7, #124]	; 0x7c
 800390a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800390e:	2200      	movs	r2, #0
 8003910:	65bb      	str	r3, [r7, #88]	; 0x58
 8003912:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003914:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003918:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800391c:	f7fd f9d4 	bl	8000cc8 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4613      	mov	r3, r2
 8003926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800392a:	e064      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392c:	4b92      	ldr	r3, [pc, #584]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	2200      	movs	r2, #0
 8003934:	653b      	str	r3, [r7, #80]	; 0x50
 8003936:	657a      	str	r2, [r7, #84]	; 0x54
 8003938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003940:	2300      	movs	r3, #0
 8003942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003944:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003948:	4622      	mov	r2, r4
 800394a:	462b      	mov	r3, r5
 800394c:	f04f 0000 	mov.w	r0, #0
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	0159      	lsls	r1, r3, #5
 8003956:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800395a:	0150      	lsls	r0, r2, #5
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4621      	mov	r1, r4
 8003962:	1a51      	subs	r1, r2, r1
 8003964:	6139      	str	r1, [r7, #16]
 8003966:	4629      	mov	r1, r5
 8003968:	eb63 0301 	sbc.w	r3, r3, r1
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800397a:	4659      	mov	r1, fp
 800397c:	018b      	lsls	r3, r1, #6
 800397e:	4651      	mov	r1, sl
 8003980:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003984:	4651      	mov	r1, sl
 8003986:	018a      	lsls	r2, r1, #6
 8003988:	4651      	mov	r1, sl
 800398a:	ebb2 0801 	subs.w	r8, r2, r1
 800398e:	4659      	mov	r1, fp
 8003990:	eb63 0901 	sbc.w	r9, r3, r1
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039a8:	4690      	mov	r8, r2
 80039aa:	4699      	mov	r9, r3
 80039ac:	4623      	mov	r3, r4
 80039ae:	eb18 0303 	adds.w	r3, r8, r3
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	462b      	mov	r3, r5
 80039b6:	eb49 0303 	adc.w	r3, r9, r3
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039c8:	4629      	mov	r1, r5
 80039ca:	028b      	lsls	r3, r1, #10
 80039cc:	4621      	mov	r1, r4
 80039ce:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039d2:	4621      	mov	r1, r4
 80039d4:	028a      	lsls	r2, r1, #10
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039de:	2200      	movs	r2, #0
 80039e0:	643b      	str	r3, [r7, #64]	; 0x40
 80039e2:	647a      	str	r2, [r7, #68]	; 0x44
 80039e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039e8:	f7fd f96e 	bl	8000cc8 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4613      	mov	r3, r2
 80039f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039f6:	4b60      	ldr	r3, [pc, #384]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	0c1b      	lsrs	r3, r3, #16
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	3301      	adds	r3, #1
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003a08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003a18:	e0a6      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a1a:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a26:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d02a      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a32:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	2200      	movs	r2, #0
 8003a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a44:	2100      	movs	r1, #0
 8003a46:	4b4e      	ldr	r3, [pc, #312]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a48:	fb03 f201 	mul.w	r2, r3, r1
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	fb00 f303 	mul.w	r3, r0, r3
 8003a52:	4413      	add	r3, r2
 8003a54:	4a4a      	ldr	r2, [pc, #296]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a56:	fba0 1202 	umull	r1, r2, r0, r2
 8003a5a:	677a      	str	r2, [r7, #116]	; 0x74
 8003a5c:	460a      	mov	r2, r1
 8003a5e:	673a      	str	r2, [r7, #112]	; 0x70
 8003a60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a62:	4413      	add	r3, r2
 8003a64:	677b      	str	r3, [r7, #116]	; 0x74
 8003a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a6e:	637a      	str	r2, [r7, #52]	; 0x34
 8003a70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a74:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003a78:	f7fd f926 	bl	8000cc8 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4613      	mov	r3, r2
 8003a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a86:	e05b      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a88:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	2200      	movs	r2, #0
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	f04f 0000 	mov.w	r0, #0
 8003aac:	f04f 0100 	mov.w	r1, #0
 8003ab0:	0159      	lsls	r1, r3, #5
 8003ab2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab6:	0150      	lsls	r0, r2, #5
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4641      	mov	r1, r8
 8003abe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ad4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ad8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003adc:	ebb2 040a 	subs.w	r4, r2, sl
 8003ae0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	00eb      	lsls	r3, r5, #3
 8003aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af2:	00e2      	lsls	r2, r4, #3
 8003af4:	4614      	mov	r4, r2
 8003af6:	461d      	mov	r5, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	18e3      	adds	r3, r4, r3
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	464b      	mov	r3, r9
 8003b00:	eb45 0303 	adc.w	r3, r5, r3
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b12:	4629      	mov	r1, r5
 8003b14:	028b      	lsls	r3, r1, #10
 8003b16:	4621      	mov	r1, r4
 8003b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	028a      	lsls	r2, r1, #10
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b28:	2200      	movs	r2, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	61fa      	str	r2, [r7, #28]
 8003b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b32:	f7fd f8c9 	bl	8000cc8 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b40:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	0f1b      	lsrs	r3, r3, #28
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b5e:	e003      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3798      	adds	r7, #152	; 0x98
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	00f42400 	.word	0x00f42400
 8003b80:	017d7840 	.word	0x017d7840

08003b84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e28d      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8083 	beq.w	8003caa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ba4:	4b94      	ldr	r3, [pc, #592]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d019      	beq.n	8003be4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bb0:	4b91      	ldr	r3, [pc, #580]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bbc:	4b8e      	ldr	r3, [pc, #568]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc8:	d00c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b8b      	ldr	r3, [pc, #556]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d112      	bne.n	8003bfc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd6:	4b88      	ldr	r3, [pc, #544]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be2:	d10b      	bne.n	8003bfc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	4b84      	ldr	r3, [pc, #528]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05b      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x124>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d157      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e25a      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d106      	bne.n	8003c14 <HAL_RCC_OscConfig+0x90>
 8003c06:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7b      	ldr	r2, [pc, #492]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e01d      	b.n	8003c50 <HAL_RCC_OscConfig+0xcc>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0xb4>
 8003c1e:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a75      	ldr	r2, [pc, #468]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b73      	ldr	r3, [pc, #460]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a72      	ldr	r2, [pc, #456]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0xcc>
 8003c38:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a6e      	ldr	r2, [pc, #440]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b6c      	ldr	r3, [pc, #432]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6b      	ldr	r2, [pc, #428]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fb0a 	bl	8002270 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe fb06 	bl	8002270 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e21f      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0xdc>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe faf6 	bl	8002270 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe faf2 	bl	8002270 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e20b      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x104>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d06f      	beq.n	8003d96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cb6:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d017      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cc2:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d105      	bne.n	8003cda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d11c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b44      	ldr	r3, [pc, #272]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d116      	bne.n	8003d20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_RCC_OscConfig+0x186>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e1d3      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4937      	ldr	r1, [pc, #220]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1e:	e03a      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d28:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCC_OscConfig+0x278>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fe fa9f 	bl	8002270 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d36:	f7fe fa9b 	bl	8002270 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1b4      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d54:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4925      	ldr	r1, [pc, #148]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]
 8003d68:	e015      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCC_OscConfig+0x278>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe fa7e 	bl	8002270 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fe fa7a 	bl	8002270 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e193      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d036      	beq.n	8003e10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_RCC_OscConfig+0x27c>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fe fa5e 	bl	8002270 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db8:	f7fe fa5a 	bl	8002270 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e173      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x234>
 8003dd6:	e01b      	b.n	8003e10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_OscConfig+0x27c>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fe fa47 	bl	8002270 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	e00e      	b.n	8003e04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de6:	f7fe fa43 	bl	8002270 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d907      	bls.n	8003e04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e15c      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	42470000 	.word	0x42470000
 8003e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	4b8a      	ldr	r3, [pc, #552]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ea      	bne.n	8003de6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8097 	beq.w	8003f4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e22:	4b83      	ldr	r3, [pc, #524]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a7e      	ldr	r2, [pc, #504]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3e:	4b7c      	ldr	r3, [pc, #496]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	4b79      	ldr	r3, [pc, #484]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d118      	bne.n	8003e8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5a:	4b76      	ldr	r3, [pc, #472]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a75      	ldr	r2, [pc, #468]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e66:	f7fe fa03 	bl	8002270 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fe f9ff 	bl	8002270 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e118      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b6c      	ldr	r3, [pc, #432]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x31e>
 8003e94:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a65      	ldr	r2, [pc, #404]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	e01c      	b.n	8003edc <HAL_RCC_OscConfig+0x358>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x340>
 8003eaa:	4b61      	ldr	r3, [pc, #388]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	4a60      	ldr	r2, [pc, #384]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eb0:	f043 0304 	orr.w	r3, r3, #4
 8003eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb6:	4b5e      	ldr	r3, [pc, #376]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a5d      	ldr	r2, [pc, #372]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0x358>
 8003ec4:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a59      	ldr	r2, [pc, #356]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	4b57      	ldr	r3, [pc, #348]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a56      	ldr	r2, [pc, #344]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ed6:	f023 0304 	bic.w	r3, r3, #4
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fe f9c4 	bl	8002270 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fe f9c0 	bl	8002270 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0d7      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ee      	beq.n	8003eec <HAL_RCC_OscConfig+0x368>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fe f9ae 	bl	8002270 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fe f9aa 	bl	8002270 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e0c1      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2e:	4b40      	ldr	r3, [pc, #256]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ee      	bne.n	8003f18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	4a3a      	ldr	r2, [pc, #232]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80ad 	beq.w	80040b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d060      	beq.n	8004024 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d145      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6a:	4b33      	ldr	r3, [pc, #204]	; (8004038 <HAL_RCC_OscConfig+0x4b4>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe f97e 	bl	8002270 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fe f97a 	bl	8002270 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e093      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	4b29      	ldr	r3, [pc, #164]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	071b      	lsls	r3, r3, #28
 8003fc2:	491b      	ldr	r1, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_RCC_OscConfig+0x4b4>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fe f94f 	bl	8002270 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fe f94b 	bl	8002270 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e064      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x452>
 8003ff4:	e05c      	b.n	80040b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_RCC_OscConfig+0x4b4>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe f938 	bl	8002270 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004004:	f7fe f934 	bl	8002270 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e04d      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x480>
 8004022:	e045      	b.n	80040b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e040      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
 8004030:	40023800 	.word	0x40023800
 8004034:	40007000 	.word	0x40007000
 8004038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800403c:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <HAL_RCC_OscConfig+0x538>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d030      	beq.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d129      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d122      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004074:	4293      	cmp	r3, r2
 8004076:	d119      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	3b01      	subs	r3, #1
 8004086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d10f      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e07b      	b.n	80041ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d108      	bne.n	80040ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e2:	d009      	beq.n	80040f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	61da      	str	r2, [r3, #28]
 80040ea:	e005      	b.n	80040f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fd fd94 	bl	8001c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800412e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	ea42 0103 	orr.w	r1, r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f003 0104 	and.w	r1, r3, #4
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0210 	and.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e041      	b.n	8004268 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7fd ff11 	bl	8002020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	4619      	mov	r1, r3
 8004210:	4610      	mov	r0, r2
 8004212:	f000 fa95 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d001      	beq.n	8004288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e04e      	b.n	8004326 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a23      	ldr	r2, [pc, #140]	; (8004334 <HAL_TIM_Base_Start_IT+0xc4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b2:	d01d      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_TIM_Base_Start_IT+0xc8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1e      	ldr	r2, [pc, #120]	; (800433c <HAL_TIM_Base_Start_IT+0xcc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_TIM_Base_Start_IT+0xd0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <HAL_TIM_Base_Start_IT+0xd4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a19      	ldr	r2, [pc, #100]	; (8004348 <HAL_TIM_Base_Start_IT+0xd8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a18      	ldr	r2, [pc, #96]	; (800434c <HAL_TIM_Base_Start_IT+0xdc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d111      	bne.n	8004314 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d010      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e007      	b.n	8004324 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40010400 	.word	0x40010400
 8004348:	40014000 	.word	0x40014000
 800434c:	40001800 	.word	0x40001800

08004350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d122      	bne.n	80043ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b02      	cmp	r3, #2
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0202 	mvn.w	r2, #2
 800437c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f9b5 	bl	8004702 <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9a7 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f9b8 	bl	8004716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d122      	bne.n	8004400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d11b      	bne.n	8004400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0204 	mvn.w	r2, #4
 80043d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f98b 	bl	8004702 <HAL_TIM_IC_CaptureCallback>
 80043ec:	e005      	b.n	80043fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f97d 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f98e 	bl	8004716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b08      	cmp	r3, #8
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b08      	cmp	r3, #8
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0208 	mvn.w	r2, #8
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2204      	movs	r2, #4
 800442a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f961 	bl	8004702 <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f953 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f964 	bl	8004716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b10      	cmp	r3, #16
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b10      	cmp	r3, #16
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0210 	mvn.w	r2, #16
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2208      	movs	r2, #8
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f937 	bl	8004702 <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f929 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f93a 	bl	8004716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10e      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d107      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0201 	mvn.w	r2, #1
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fd fb00 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b80      	cmp	r3, #128	; 0x80
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b80      	cmp	r3, #128	; 0x80
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fae0 	bl	8004ac0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d10e      	bne.n	800452c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d107      	bne.n	800452c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f8ff 	bl	800472a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b20      	cmp	r3, #32
 8004538:	d10e      	bne.n	8004558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b20      	cmp	r3, #32
 8004546:	d107      	bne.n	8004558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0220 	mvn.w	r2, #32
 8004550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 faaa 	bl	8004aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_TIM_ConfigClockSource+0x1c>
 8004578:	2302      	movs	r3, #2
 800457a:	e0b4      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x186>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800459a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b4:	d03e      	beq.n	8004634 <HAL_TIM_ConfigClockSource+0xd4>
 80045b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ba:	f200 8087 	bhi.w	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c2:	f000 8086 	beq.w	80046d2 <HAL_TIM_ConfigClockSource+0x172>
 80045c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ca:	d87f      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b70      	cmp	r3, #112	; 0x70
 80045ce:	d01a      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xa6>
 80045d0:	2b70      	cmp	r3, #112	; 0x70
 80045d2:	d87b      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b60      	cmp	r3, #96	; 0x60
 80045d6:	d050      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x11a>
 80045d8:	2b60      	cmp	r3, #96	; 0x60
 80045da:	d877      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b50      	cmp	r3, #80	; 0x50
 80045de:	d03c      	beq.n	800465a <HAL_TIM_ConfigClockSource+0xfa>
 80045e0:	2b50      	cmp	r3, #80	; 0x50
 80045e2:	d873      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d058      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x13a>
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d86f      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b30      	cmp	r3, #48	; 0x30
 80045ee:	d064      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x15a>
 80045f0:	2b30      	cmp	r3, #48	; 0x30
 80045f2:	d86b      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d060      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x15a>
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d867      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d05c      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	2b10      	cmp	r3, #16
 8004602:	d05a      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x15a>
 8004604:	e062      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f000 f9ad 	bl	8004974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	609a      	str	r2, [r3, #8]
      break;
 8004632:	e04f      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6899      	ldr	r1, [r3, #8]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f000 f996 	bl	8004974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004656:	609a      	str	r2, [r3, #8]
      break;
 8004658:	e03c      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	461a      	mov	r2, r3
 8004668:	f000 f90a 	bl	8004880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2150      	movs	r1, #80	; 0x50
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f963 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004678:	e02c      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6859      	ldr	r1, [r3, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	461a      	mov	r2, r3
 8004688:	f000 f929 	bl	80048de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2160      	movs	r1, #96	; 0x60
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f953 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004698:	e01c      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6859      	ldr	r1, [r3, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f000 f8ea 	bl	8004880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2140      	movs	r1, #64	; 0x40
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 f943 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80046b8:	e00c      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4619      	mov	r1, r3
 80046c4:	4610      	mov	r0, r2
 80046c6:	f000 f93a 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80046ca:	e003      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      break;
 80046d0:	e000      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a40      	ldr	r2, [pc, #256]	; (8004854 <TIM_Base_SetConfig+0x114>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d00f      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <TIM_Base_SetConfig+0x118>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00b      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a3c      	ldr	r2, [pc, #240]	; (800485c <TIM_Base_SetConfig+0x11c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3b      	ldr	r2, [pc, #236]	; (8004860 <TIM_Base_SetConfig+0x120>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3a      	ldr	r2, [pc, #232]	; (8004864 <TIM_Base_SetConfig+0x124>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d108      	bne.n	8004792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <TIM_Base_SetConfig+0x114>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02b      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a0:	d027      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a2c      	ldr	r2, [pc, #176]	; (8004858 <TIM_Base_SetConfig+0x118>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d023      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2b      	ldr	r2, [pc, #172]	; (800485c <TIM_Base_SetConfig+0x11c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01f      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2a      	ldr	r2, [pc, #168]	; (8004860 <TIM_Base_SetConfig+0x120>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01b      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a29      	ldr	r2, [pc, #164]	; (8004864 <TIM_Base_SetConfig+0x124>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d017      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a28      	ldr	r2, [pc, #160]	; (8004868 <TIM_Base_SetConfig+0x128>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a27      	ldr	r2, [pc, #156]	; (800486c <TIM_Base_SetConfig+0x12c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00f      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a26      	ldr	r2, [pc, #152]	; (8004870 <TIM_Base_SetConfig+0x130>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a25      	ldr	r2, [pc, #148]	; (8004874 <TIM_Base_SetConfig+0x134>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a24      	ldr	r2, [pc, #144]	; (8004878 <TIM_Base_SetConfig+0x138>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a23      	ldr	r2, [pc, #140]	; (800487c <TIM_Base_SetConfig+0x13c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d108      	bne.n	8004804 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <TIM_Base_SetConfig+0x114>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_Base_SetConfig+0xf8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <TIM_Base_SetConfig+0x124>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d103      	bne.n	8004840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	615a      	str	r2, [r3, #20]
}
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40010000 	.word	0x40010000
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40000c00 	.word	0x40000c00
 8004864:	40010400 	.word	0x40010400
 8004868:	40014000 	.word	0x40014000
 800486c:	40014400 	.word	0x40014400
 8004870:	40014800 	.word	0x40014800
 8004874:	40001800 	.word	0x40001800
 8004878:	40001c00 	.word	0x40001c00
 800487c:	40002000 	.word	0x40002000

08004880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 030a 	bic.w	r3, r3, #10
 80048bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048de:	b480      	push	{r7}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f023 0210 	bic.w	r2, r3, #16
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	031b      	lsls	r3, r3, #12
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800491a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e05a      	b.n	8004a82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a21      	ldr	r2, [pc, #132]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a18:	d01d      	beq.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1d      	ldr	r2, [pc, #116]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a1a      	ldr	r2, [pc, #104]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a18      	ldr	r2, [pc, #96]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d10c      	bne.n	8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800
 8004a9c:	40000c00 	.word	0x40000c00
 8004aa0:	40010400 	.word	0x40010400
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40001800 	.word	0x40001800

08004aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e03f      	b.n	8004b66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fd fae0 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2224      	movs	r2, #36	; 0x24
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f929 	bl	8004d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b08a      	sub	sp, #40	; 0x28
 8004b72:	af02      	add	r7, sp, #8
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d17c      	bne.n	8004c88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_UART_Transmit+0x2c>
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e075      	b.n	8004c8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_UART_Transmit+0x3e>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e06e      	b.n	8004c8a <HAL_UART_Transmit+0x11c>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2221      	movs	r2, #33	; 0x21
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bc2:	f7fd fb55 	bl	8002270 <HAL_GetTick>
 8004bc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	88fa      	ldrh	r2, [r7, #6]
 8004bd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d108      	bne.n	8004bf0 <HAL_UART_Transmit+0x82>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	e003      	b.n	8004bf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c00:	e02a      	b.n	8004c58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2180      	movs	r1, #128	; 0x80
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f840 	bl	8004c92 <UART_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e036      	b.n	8004c8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	3302      	adds	r3, #2
 8004c36:	61bb      	str	r3, [r7, #24]
 8004c38:	e007      	b.n	8004c4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1cf      	bne.n	8004c02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2140      	movs	r1, #64	; 0x40
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f810 	bl	8004c92 <UART_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e006      	b.n	8004c8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e000      	b.n	8004c8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c88:	2302      	movs	r3, #2
  }
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b090      	sub	sp, #64	; 0x40
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	603b      	str	r3, [r7, #0]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca2:	e050      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	d04c      	beq.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cb2:	f7fd fadd 	bl	8002270 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d241      	bcs.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ce2:	637a      	str	r2, [r7, #52]	; 0x34
 8004ce4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3314      	adds	r3, #20
 8004cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	613b      	str	r3, [r7, #16]
   return(result);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3314      	adds	r3, #20
 8004d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d16:	623a      	str	r2, [r7, #32]
 8004d18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	69f9      	ldr	r1, [r7, #28]
 8004d1c:	6a3a      	ldr	r2, [r7, #32]
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e5      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e00f      	b.n	8004d66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d09f      	beq.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3740      	adds	r7, #64	; 0x40
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d74:	b0c0      	sub	sp, #256	; 0x100
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	68d9      	ldr	r1, [r3, #12]
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	ea40 0301 	orr.w	r3, r0, r1
 8004d98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004dc8:	f021 010c 	bic.w	r1, r1, #12
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dea:	6999      	ldr	r1, [r3, #24]
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	ea40 0301 	orr.w	r3, r0, r1
 8004df6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4b8f      	ldr	r3, [pc, #572]	; (800503c <UART_SetConfig+0x2cc>)
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d005      	beq.n	8004e10 <UART_SetConfig+0xa0>
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4b8d      	ldr	r3, [pc, #564]	; (8005040 <UART_SetConfig+0x2d0>)
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d104      	bne.n	8004e1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e10:	f7fe fcfa 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8004e14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e18:	e003      	b.n	8004e22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e1a:	f7fe fce1 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8004e1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2c:	f040 810c 	bne.w	8005048 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e42:	4622      	mov	r2, r4
 8004e44:	462b      	mov	r3, r5
 8004e46:	1891      	adds	r1, r2, r2
 8004e48:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e4a:	415b      	adcs	r3, r3
 8004e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e52:	4621      	mov	r1, r4
 8004e54:	eb12 0801 	adds.w	r8, r2, r1
 8004e58:	4629      	mov	r1, r5
 8004e5a:	eb43 0901 	adc.w	r9, r3, r1
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e72:	4690      	mov	r8, r2
 8004e74:	4699      	mov	r9, r3
 8004e76:	4623      	mov	r3, r4
 8004e78:	eb18 0303 	adds.w	r3, r8, r3
 8004e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e80:	462b      	mov	r3, r5
 8004e82:	eb49 0303 	adc.w	r3, r9, r3
 8004e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	18db      	adds	r3, r3, r3
 8004ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	eb42 0303 	adc.w	r3, r2, r3
 8004eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8004eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004eb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004eb4:	f7fb ff08 	bl	8000cc8 <__aeabi_uldivmod>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4b61      	ldr	r3, [pc, #388]	; (8005044 <UART_SetConfig+0x2d4>)
 8004ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	011c      	lsls	r4, r3, #4
 8004ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ed0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ed4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	1891      	adds	r1, r2, r2
 8004ede:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ee0:	415b      	adcs	r3, r3
 8004ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ee8:	4641      	mov	r1, r8
 8004eea:	eb12 0a01 	adds.w	sl, r2, r1
 8004eee:	4649      	mov	r1, r9
 8004ef0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f08:	4692      	mov	sl, r2
 8004f0a:	469b      	mov	fp, r3
 8004f0c:	4643      	mov	r3, r8
 8004f0e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f16:	464b      	mov	r3, r9
 8004f18:	eb4b 0303 	adc.w	r3, fp, r3
 8004f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f34:	460b      	mov	r3, r1
 8004f36:	18db      	adds	r3, r3, r3
 8004f38:	643b      	str	r3, [r7, #64]	; 0x40
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	eb42 0303 	adc.w	r3, r2, r3
 8004f40:	647b      	str	r3, [r7, #68]	; 0x44
 8004f42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f4a:	f7fb febd 	bl	8000cc8 <__aeabi_uldivmod>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4611      	mov	r1, r2
 8004f54:	4b3b      	ldr	r3, [pc, #236]	; (8005044 <UART_SetConfig+0x2d4>)
 8004f56:	fba3 2301 	umull	r2, r3, r3, r1
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	2264      	movs	r2, #100	; 0x64
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	1acb      	subs	r3, r1, r3
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f6a:	4b36      	ldr	r3, [pc, #216]	; (8005044 <UART_SetConfig+0x2d4>)
 8004f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f78:	441c      	add	r4, r3
 8004f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	1891      	adds	r1, r2, r2
 8004f92:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f94:	415b      	adcs	r3, r3
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	1851      	adds	r1, r2, r1
 8004fa0:	6339      	str	r1, [r7, #48]	; 0x30
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	414b      	adcs	r3, r1
 8004fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	00cb      	lsls	r3, r1, #3
 8004fb8:	4651      	mov	r1, sl
 8004fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fbe:	4651      	mov	r1, sl
 8004fc0:	00ca      	lsls	r2, r1, #3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4642      	mov	r2, r8
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	460a      	mov	r2, r1
 8004fd4:	eb42 0303 	adc.w	r3, r2, r3
 8004fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fe8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	18db      	adds	r3, r3, r3
 8004ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	eb42 0303 	adc.w	r3, r2, r3
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005002:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005006:	f7fb fe5f 	bl	8000cc8 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <UART_SetConfig+0x2d4>)
 8005010:	fba3 1302 	umull	r1, r3, r3, r2
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	2164      	movs	r1, #100	; 0x64
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	3332      	adds	r3, #50	; 0x32
 8005022:	4a08      	ldr	r2, [pc, #32]	; (8005044 <UART_SetConfig+0x2d4>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	f003 0207 	and.w	r2, r3, #7
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4422      	add	r2, r4
 8005036:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005038:	e105      	b.n	8005246 <UART_SetConfig+0x4d6>
 800503a:	bf00      	nop
 800503c:	40011000 	.word	0x40011000
 8005040:	40011400 	.word	0x40011400
 8005044:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504c:	2200      	movs	r2, #0
 800504e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005052:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005056:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800505a:	4642      	mov	r2, r8
 800505c:	464b      	mov	r3, r9
 800505e:	1891      	adds	r1, r2, r2
 8005060:	6239      	str	r1, [r7, #32]
 8005062:	415b      	adcs	r3, r3
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
 8005066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800506a:	4641      	mov	r1, r8
 800506c:	1854      	adds	r4, r2, r1
 800506e:	4649      	mov	r1, r9
 8005070:	eb43 0501 	adc.w	r5, r3, r1
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	00eb      	lsls	r3, r5, #3
 800507e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005082:	00e2      	lsls	r2, r4, #3
 8005084:	4614      	mov	r4, r2
 8005086:	461d      	mov	r5, r3
 8005088:	4643      	mov	r3, r8
 800508a:	18e3      	adds	r3, r4, r3
 800508c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005090:	464b      	mov	r3, r9
 8005092:	eb45 0303 	adc.w	r3, r5, r3
 8005096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800509a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050b6:	4629      	mov	r1, r5
 80050b8:	008b      	lsls	r3, r1, #2
 80050ba:	4621      	mov	r1, r4
 80050bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050c0:	4621      	mov	r1, r4
 80050c2:	008a      	lsls	r2, r1, #2
 80050c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050c8:	f7fb fdfe 	bl	8000cc8 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4b60      	ldr	r3, [pc, #384]	; (8005254 <UART_SetConfig+0x4e4>)
 80050d2:	fba3 2302 	umull	r2, r3, r3, r2
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	011c      	lsls	r4, r3, #4
 80050da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050ec:	4642      	mov	r2, r8
 80050ee:	464b      	mov	r3, r9
 80050f0:	1891      	adds	r1, r2, r2
 80050f2:	61b9      	str	r1, [r7, #24]
 80050f4:	415b      	adcs	r3, r3
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050fc:	4641      	mov	r1, r8
 80050fe:	1851      	adds	r1, r2, r1
 8005100:	6139      	str	r1, [r7, #16]
 8005102:	4649      	mov	r1, r9
 8005104:	414b      	adcs	r3, r1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005114:	4659      	mov	r1, fp
 8005116:	00cb      	lsls	r3, r1, #3
 8005118:	4651      	mov	r1, sl
 800511a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511e:	4651      	mov	r1, sl
 8005120:	00ca      	lsls	r2, r1, #3
 8005122:	4610      	mov	r0, r2
 8005124:	4619      	mov	r1, r3
 8005126:	4603      	mov	r3, r0
 8005128:	4642      	mov	r2, r8
 800512a:	189b      	adds	r3, r3, r2
 800512c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005130:	464b      	mov	r3, r9
 8005132:	460a      	mov	r2, r1
 8005134:	eb42 0303 	adc.w	r3, r2, r3
 8005138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	67bb      	str	r3, [r7, #120]	; 0x78
 8005146:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005154:	4649      	mov	r1, r9
 8005156:	008b      	lsls	r3, r1, #2
 8005158:	4641      	mov	r1, r8
 800515a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800515e:	4641      	mov	r1, r8
 8005160:	008a      	lsls	r2, r1, #2
 8005162:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005166:	f7fb fdaf 	bl	8000cc8 <__aeabi_uldivmod>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4b39      	ldr	r3, [pc, #228]	; (8005254 <UART_SetConfig+0x4e4>)
 8005170:	fba3 1302 	umull	r1, r3, r3, r2
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	2164      	movs	r1, #100	; 0x64
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	3332      	adds	r3, #50	; 0x32
 8005182:	4a34      	ldr	r2, [pc, #208]	; (8005254 <UART_SetConfig+0x4e4>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800518e:	441c      	add	r4, r3
 8005190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005194:	2200      	movs	r2, #0
 8005196:	673b      	str	r3, [r7, #112]	; 0x70
 8005198:	677a      	str	r2, [r7, #116]	; 0x74
 800519a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800519e:	4642      	mov	r2, r8
 80051a0:	464b      	mov	r3, r9
 80051a2:	1891      	adds	r1, r2, r2
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	415b      	adcs	r3, r3
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ae:	4641      	mov	r1, r8
 80051b0:	1851      	adds	r1, r2, r1
 80051b2:	6039      	str	r1, [r7, #0]
 80051b4:	4649      	mov	r1, r9
 80051b6:	414b      	adcs	r3, r1
 80051b8:	607b      	str	r3, [r7, #4]
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051c6:	4659      	mov	r1, fp
 80051c8:	00cb      	lsls	r3, r1, #3
 80051ca:	4651      	mov	r1, sl
 80051cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051d0:	4651      	mov	r1, sl
 80051d2:	00ca      	lsls	r2, r1, #3
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	4603      	mov	r3, r0
 80051da:	4642      	mov	r2, r8
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	66bb      	str	r3, [r7, #104]	; 0x68
 80051e0:	464b      	mov	r3, r9
 80051e2:	460a      	mov	r2, r1
 80051e4:	eb42 0303 	adc.w	r3, r2, r3
 80051e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	663b      	str	r3, [r7, #96]	; 0x60
 80051f4:	667a      	str	r2, [r7, #100]	; 0x64
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005202:	4649      	mov	r1, r9
 8005204:	008b      	lsls	r3, r1, #2
 8005206:	4641      	mov	r1, r8
 8005208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800520c:	4641      	mov	r1, r8
 800520e:	008a      	lsls	r2, r1, #2
 8005210:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005214:	f7fb fd58 	bl	8000cc8 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <UART_SetConfig+0x4e4>)
 800521e:	fba3 1302 	umull	r1, r3, r3, r2
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2164      	movs	r1, #100	; 0x64
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	3332      	adds	r3, #50	; 0x32
 8005230:	4a08      	ldr	r2, [pc, #32]	; (8005254 <UART_SetConfig+0x4e4>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4422      	add	r2, r4
 8005244:	609a      	str	r2, [r3, #8]
}
 8005246:	bf00      	nop
 8005248:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800524c:	46bd      	mov	sp, r7
 800524e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005252:	bf00      	nop
 8005254:	51eb851f 	.word	0x51eb851f

08005258 <__errno>:
 8005258:	4b01      	ldr	r3, [pc, #4]	; (8005260 <__errno+0x8>)
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	2000000c 	.word	0x2000000c

08005264 <__libc_init_array>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	4d0d      	ldr	r5, [pc, #52]	; (800529c <__libc_init_array+0x38>)
 8005268:	4c0d      	ldr	r4, [pc, #52]	; (80052a0 <__libc_init_array+0x3c>)
 800526a:	1b64      	subs	r4, r4, r5
 800526c:	10a4      	asrs	r4, r4, #2
 800526e:	2600      	movs	r6, #0
 8005270:	42a6      	cmp	r6, r4
 8005272:	d109      	bne.n	8005288 <__libc_init_array+0x24>
 8005274:	4d0b      	ldr	r5, [pc, #44]	; (80052a4 <__libc_init_array+0x40>)
 8005276:	4c0c      	ldr	r4, [pc, #48]	; (80052a8 <__libc_init_array+0x44>)
 8005278:	f004 ff74 	bl	800a164 <_init>
 800527c:	1b64      	subs	r4, r4, r5
 800527e:	10a4      	asrs	r4, r4, #2
 8005280:	2600      	movs	r6, #0
 8005282:	42a6      	cmp	r6, r4
 8005284:	d105      	bne.n	8005292 <__libc_init_array+0x2e>
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	f855 3b04 	ldr.w	r3, [r5], #4
 800528c:	4798      	blx	r3
 800528e:	3601      	adds	r6, #1
 8005290:	e7ee      	b.n	8005270 <__libc_init_array+0xc>
 8005292:	f855 3b04 	ldr.w	r3, [r5], #4
 8005296:	4798      	blx	r3
 8005298:	3601      	adds	r6, #1
 800529a:	e7f2      	b.n	8005282 <__libc_init_array+0x1e>
 800529c:	0800a6a8 	.word	0x0800a6a8
 80052a0:	0800a6a8 	.word	0x0800a6a8
 80052a4:	0800a6a8 	.word	0x0800a6a8
 80052a8:	0800a6ac 	.word	0x0800a6ac

080052ac <memset>:
 80052ac:	4402      	add	r2, r0
 80052ae:	4603      	mov	r3, r0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <__cvt>:
 80052bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c0:	ec55 4b10 	vmov	r4, r5, d0
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	460e      	mov	r6, r1
 80052c8:	4619      	mov	r1, r3
 80052ca:	462b      	mov	r3, r5
 80052cc:	bfbb      	ittet	lt
 80052ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052d2:	461d      	movlt	r5, r3
 80052d4:	2300      	movge	r3, #0
 80052d6:	232d      	movlt	r3, #45	; 0x2d
 80052d8:	700b      	strb	r3, [r1, #0]
 80052da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052e0:	4691      	mov	r9, r2
 80052e2:	f023 0820 	bic.w	r8, r3, #32
 80052e6:	bfbc      	itt	lt
 80052e8:	4622      	movlt	r2, r4
 80052ea:	4614      	movlt	r4, r2
 80052ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052f0:	d005      	beq.n	80052fe <__cvt+0x42>
 80052f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052f6:	d100      	bne.n	80052fa <__cvt+0x3e>
 80052f8:	3601      	adds	r6, #1
 80052fa:	2102      	movs	r1, #2
 80052fc:	e000      	b.n	8005300 <__cvt+0x44>
 80052fe:	2103      	movs	r1, #3
 8005300:	ab03      	add	r3, sp, #12
 8005302:	9301      	str	r3, [sp, #4]
 8005304:	ab02      	add	r3, sp, #8
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	ec45 4b10 	vmov	d0, r4, r5
 800530c:	4653      	mov	r3, sl
 800530e:	4632      	mov	r2, r6
 8005310:	f001 fe8a 	bl	8007028 <_dtoa_r>
 8005314:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005318:	4607      	mov	r7, r0
 800531a:	d102      	bne.n	8005322 <__cvt+0x66>
 800531c:	f019 0f01 	tst.w	r9, #1
 8005320:	d022      	beq.n	8005368 <__cvt+0xac>
 8005322:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005326:	eb07 0906 	add.w	r9, r7, r6
 800532a:	d110      	bne.n	800534e <__cvt+0x92>
 800532c:	783b      	ldrb	r3, [r7, #0]
 800532e:	2b30      	cmp	r3, #48	; 0x30
 8005330:	d10a      	bne.n	8005348 <__cvt+0x8c>
 8005332:	2200      	movs	r2, #0
 8005334:	2300      	movs	r3, #0
 8005336:	4620      	mov	r0, r4
 8005338:	4629      	mov	r1, r5
 800533a:	f7fb fbe5 	bl	8000b08 <__aeabi_dcmpeq>
 800533e:	b918      	cbnz	r0, 8005348 <__cvt+0x8c>
 8005340:	f1c6 0601 	rsb	r6, r6, #1
 8005344:	f8ca 6000 	str.w	r6, [sl]
 8005348:	f8da 3000 	ldr.w	r3, [sl]
 800534c:	4499      	add	r9, r3
 800534e:	2200      	movs	r2, #0
 8005350:	2300      	movs	r3, #0
 8005352:	4620      	mov	r0, r4
 8005354:	4629      	mov	r1, r5
 8005356:	f7fb fbd7 	bl	8000b08 <__aeabi_dcmpeq>
 800535a:	b108      	cbz	r0, 8005360 <__cvt+0xa4>
 800535c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005360:	2230      	movs	r2, #48	; 0x30
 8005362:	9b03      	ldr	r3, [sp, #12]
 8005364:	454b      	cmp	r3, r9
 8005366:	d307      	bcc.n	8005378 <__cvt+0xbc>
 8005368:	9b03      	ldr	r3, [sp, #12]
 800536a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800536c:	1bdb      	subs	r3, r3, r7
 800536e:	4638      	mov	r0, r7
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	b004      	add	sp, #16
 8005374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005378:	1c59      	adds	r1, r3, #1
 800537a:	9103      	str	r1, [sp, #12]
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	e7f0      	b.n	8005362 <__cvt+0xa6>

08005380 <__exponent>:
 8005380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005382:	4603      	mov	r3, r0
 8005384:	2900      	cmp	r1, #0
 8005386:	bfb8      	it	lt
 8005388:	4249      	neglt	r1, r1
 800538a:	f803 2b02 	strb.w	r2, [r3], #2
 800538e:	bfb4      	ite	lt
 8005390:	222d      	movlt	r2, #45	; 0x2d
 8005392:	222b      	movge	r2, #43	; 0x2b
 8005394:	2909      	cmp	r1, #9
 8005396:	7042      	strb	r2, [r0, #1]
 8005398:	dd2a      	ble.n	80053f0 <__exponent+0x70>
 800539a:	f10d 0407 	add.w	r4, sp, #7
 800539e:	46a4      	mov	ip, r4
 80053a0:	270a      	movs	r7, #10
 80053a2:	46a6      	mov	lr, r4
 80053a4:	460a      	mov	r2, r1
 80053a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80053aa:	fb07 1516 	mls	r5, r7, r6, r1
 80053ae:	3530      	adds	r5, #48	; 0x30
 80053b0:	2a63      	cmp	r2, #99	; 0x63
 80053b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80053b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053ba:	4631      	mov	r1, r6
 80053bc:	dcf1      	bgt.n	80053a2 <__exponent+0x22>
 80053be:	3130      	adds	r1, #48	; 0x30
 80053c0:	f1ae 0502 	sub.w	r5, lr, #2
 80053c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053c8:	1c44      	adds	r4, r0, #1
 80053ca:	4629      	mov	r1, r5
 80053cc:	4561      	cmp	r1, ip
 80053ce:	d30a      	bcc.n	80053e6 <__exponent+0x66>
 80053d0:	f10d 0209 	add.w	r2, sp, #9
 80053d4:	eba2 020e 	sub.w	r2, r2, lr
 80053d8:	4565      	cmp	r5, ip
 80053da:	bf88      	it	hi
 80053dc:	2200      	movhi	r2, #0
 80053de:	4413      	add	r3, r2
 80053e0:	1a18      	subs	r0, r3, r0
 80053e2:	b003      	add	sp, #12
 80053e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053ee:	e7ed      	b.n	80053cc <__exponent+0x4c>
 80053f0:	2330      	movs	r3, #48	; 0x30
 80053f2:	3130      	adds	r1, #48	; 0x30
 80053f4:	7083      	strb	r3, [r0, #2]
 80053f6:	70c1      	strb	r1, [r0, #3]
 80053f8:	1d03      	adds	r3, r0, #4
 80053fa:	e7f1      	b.n	80053e0 <__exponent+0x60>

080053fc <_printf_float>:
 80053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	ed2d 8b02 	vpush	{d8}
 8005404:	b08d      	sub	sp, #52	; 0x34
 8005406:	460c      	mov	r4, r1
 8005408:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800540c:	4616      	mov	r6, r2
 800540e:	461f      	mov	r7, r3
 8005410:	4605      	mov	r5, r0
 8005412:	f003 f91d 	bl	8008650 <_localeconv_r>
 8005416:	f8d0 a000 	ldr.w	sl, [r0]
 800541a:	4650      	mov	r0, sl
 800541c:	f7fa fef8 	bl	8000210 <strlen>
 8005420:	2300      	movs	r3, #0
 8005422:	930a      	str	r3, [sp, #40]	; 0x28
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	9305      	str	r3, [sp, #20]
 8005428:	f8d8 3000 	ldr.w	r3, [r8]
 800542c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005430:	3307      	adds	r3, #7
 8005432:	f023 0307 	bic.w	r3, r3, #7
 8005436:	f103 0208 	add.w	r2, r3, #8
 800543a:	f8c8 2000 	str.w	r2, [r8]
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005446:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800544a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800544e:	9307      	str	r3, [sp, #28]
 8005450:	f8cd 8018 	str.w	r8, [sp, #24]
 8005454:	ee08 0a10 	vmov	s16, r0
 8005458:	4b9f      	ldr	r3, [pc, #636]	; (80056d8 <_printf_float+0x2dc>)
 800545a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800545e:	f04f 32ff 	mov.w	r2, #4294967295
 8005462:	f7fb fb83 	bl	8000b6c <__aeabi_dcmpun>
 8005466:	bb88      	cbnz	r0, 80054cc <_printf_float+0xd0>
 8005468:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800546c:	4b9a      	ldr	r3, [pc, #616]	; (80056d8 <_printf_float+0x2dc>)
 800546e:	f04f 32ff 	mov.w	r2, #4294967295
 8005472:	f7fb fb5d 	bl	8000b30 <__aeabi_dcmple>
 8005476:	bb48      	cbnz	r0, 80054cc <_printf_float+0xd0>
 8005478:	2200      	movs	r2, #0
 800547a:	2300      	movs	r3, #0
 800547c:	4640      	mov	r0, r8
 800547e:	4649      	mov	r1, r9
 8005480:	f7fb fb4c 	bl	8000b1c <__aeabi_dcmplt>
 8005484:	b110      	cbz	r0, 800548c <_printf_float+0x90>
 8005486:	232d      	movs	r3, #45	; 0x2d
 8005488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800548c:	4b93      	ldr	r3, [pc, #588]	; (80056dc <_printf_float+0x2e0>)
 800548e:	4894      	ldr	r0, [pc, #592]	; (80056e0 <_printf_float+0x2e4>)
 8005490:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005494:	bf94      	ite	ls
 8005496:	4698      	movls	r8, r3
 8005498:	4680      	movhi	r8, r0
 800549a:	2303      	movs	r3, #3
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	9b05      	ldr	r3, [sp, #20]
 80054a0:	f023 0204 	bic.w	r2, r3, #4
 80054a4:	6022      	str	r2, [r4, #0]
 80054a6:	f04f 0900 	mov.w	r9, #0
 80054aa:	9700      	str	r7, [sp, #0]
 80054ac:	4633      	mov	r3, r6
 80054ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80054b0:	4621      	mov	r1, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 f9d8 	bl	8005868 <_printf_common>
 80054b8:	3001      	adds	r0, #1
 80054ba:	f040 8090 	bne.w	80055de <_printf_float+0x1e2>
 80054be:	f04f 30ff 	mov.w	r0, #4294967295
 80054c2:	b00d      	add	sp, #52	; 0x34
 80054c4:	ecbd 8b02 	vpop	{d8}
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	4640      	mov	r0, r8
 80054d2:	4649      	mov	r1, r9
 80054d4:	f7fb fb4a 	bl	8000b6c <__aeabi_dcmpun>
 80054d8:	b140      	cbz	r0, 80054ec <_printf_float+0xf0>
 80054da:	464b      	mov	r3, r9
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bfbc      	itt	lt
 80054e0:	232d      	movlt	r3, #45	; 0x2d
 80054e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054e6:	487f      	ldr	r0, [pc, #508]	; (80056e4 <_printf_float+0x2e8>)
 80054e8:	4b7f      	ldr	r3, [pc, #508]	; (80056e8 <_printf_float+0x2ec>)
 80054ea:	e7d1      	b.n	8005490 <_printf_float+0x94>
 80054ec:	6863      	ldr	r3, [r4, #4]
 80054ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054f2:	9206      	str	r2, [sp, #24]
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	d13f      	bne.n	8005578 <_printf_float+0x17c>
 80054f8:	2306      	movs	r3, #6
 80054fa:	6063      	str	r3, [r4, #4]
 80054fc:	9b05      	ldr	r3, [sp, #20]
 80054fe:	6861      	ldr	r1, [r4, #4]
 8005500:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005504:	2300      	movs	r3, #0
 8005506:	9303      	str	r3, [sp, #12]
 8005508:	ab0a      	add	r3, sp, #40	; 0x28
 800550a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800550e:	ab09      	add	r3, sp, #36	; 0x24
 8005510:	ec49 8b10 	vmov	d0, r8, r9
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	6022      	str	r2, [r4, #0]
 8005518:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800551c:	4628      	mov	r0, r5
 800551e:	f7ff fecd 	bl	80052bc <__cvt>
 8005522:	9b06      	ldr	r3, [sp, #24]
 8005524:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005526:	2b47      	cmp	r3, #71	; 0x47
 8005528:	4680      	mov	r8, r0
 800552a:	d108      	bne.n	800553e <_printf_float+0x142>
 800552c:	1cc8      	adds	r0, r1, #3
 800552e:	db02      	blt.n	8005536 <_printf_float+0x13a>
 8005530:	6863      	ldr	r3, [r4, #4]
 8005532:	4299      	cmp	r1, r3
 8005534:	dd41      	ble.n	80055ba <_printf_float+0x1be>
 8005536:	f1ab 0b02 	sub.w	fp, fp, #2
 800553a:	fa5f fb8b 	uxtb.w	fp, fp
 800553e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005542:	d820      	bhi.n	8005586 <_printf_float+0x18a>
 8005544:	3901      	subs	r1, #1
 8005546:	465a      	mov	r2, fp
 8005548:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800554c:	9109      	str	r1, [sp, #36]	; 0x24
 800554e:	f7ff ff17 	bl	8005380 <__exponent>
 8005552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005554:	1813      	adds	r3, r2, r0
 8005556:	2a01      	cmp	r2, #1
 8005558:	4681      	mov	r9, r0
 800555a:	6123      	str	r3, [r4, #16]
 800555c:	dc02      	bgt.n	8005564 <_printf_float+0x168>
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	07d2      	lsls	r2, r2, #31
 8005562:	d501      	bpl.n	8005568 <_printf_float+0x16c>
 8005564:	3301      	adds	r3, #1
 8005566:	6123      	str	r3, [r4, #16]
 8005568:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800556c:	2b00      	cmp	r3, #0
 800556e:	d09c      	beq.n	80054aa <_printf_float+0xae>
 8005570:	232d      	movs	r3, #45	; 0x2d
 8005572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005576:	e798      	b.n	80054aa <_printf_float+0xae>
 8005578:	9a06      	ldr	r2, [sp, #24]
 800557a:	2a47      	cmp	r2, #71	; 0x47
 800557c:	d1be      	bne.n	80054fc <_printf_float+0x100>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1bc      	bne.n	80054fc <_printf_float+0x100>
 8005582:	2301      	movs	r3, #1
 8005584:	e7b9      	b.n	80054fa <_printf_float+0xfe>
 8005586:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800558a:	d118      	bne.n	80055be <_printf_float+0x1c2>
 800558c:	2900      	cmp	r1, #0
 800558e:	6863      	ldr	r3, [r4, #4]
 8005590:	dd0b      	ble.n	80055aa <_printf_float+0x1ae>
 8005592:	6121      	str	r1, [r4, #16]
 8005594:	b913      	cbnz	r3, 800559c <_printf_float+0x1a0>
 8005596:	6822      	ldr	r2, [r4, #0]
 8005598:	07d0      	lsls	r0, r2, #31
 800559a:	d502      	bpl.n	80055a2 <_printf_float+0x1a6>
 800559c:	3301      	adds	r3, #1
 800559e:	440b      	add	r3, r1
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80055a4:	f04f 0900 	mov.w	r9, #0
 80055a8:	e7de      	b.n	8005568 <_printf_float+0x16c>
 80055aa:	b913      	cbnz	r3, 80055b2 <_printf_float+0x1b6>
 80055ac:	6822      	ldr	r2, [r4, #0]
 80055ae:	07d2      	lsls	r2, r2, #31
 80055b0:	d501      	bpl.n	80055b6 <_printf_float+0x1ba>
 80055b2:	3302      	adds	r3, #2
 80055b4:	e7f4      	b.n	80055a0 <_printf_float+0x1a4>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e7f2      	b.n	80055a0 <_printf_float+0x1a4>
 80055ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c0:	4299      	cmp	r1, r3
 80055c2:	db05      	blt.n	80055d0 <_printf_float+0x1d4>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	6121      	str	r1, [r4, #16]
 80055c8:	07d8      	lsls	r0, r3, #31
 80055ca:	d5ea      	bpl.n	80055a2 <_printf_float+0x1a6>
 80055cc:	1c4b      	adds	r3, r1, #1
 80055ce:	e7e7      	b.n	80055a0 <_printf_float+0x1a4>
 80055d0:	2900      	cmp	r1, #0
 80055d2:	bfd4      	ite	le
 80055d4:	f1c1 0202 	rsble	r2, r1, #2
 80055d8:	2201      	movgt	r2, #1
 80055da:	4413      	add	r3, r2
 80055dc:	e7e0      	b.n	80055a0 <_printf_float+0x1a4>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	055a      	lsls	r2, r3, #21
 80055e2:	d407      	bmi.n	80055f4 <_printf_float+0x1f8>
 80055e4:	6923      	ldr	r3, [r4, #16]
 80055e6:	4642      	mov	r2, r8
 80055e8:	4631      	mov	r1, r6
 80055ea:	4628      	mov	r0, r5
 80055ec:	47b8      	blx	r7
 80055ee:	3001      	adds	r0, #1
 80055f0:	d12c      	bne.n	800564c <_printf_float+0x250>
 80055f2:	e764      	b.n	80054be <_printf_float+0xc2>
 80055f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055f8:	f240 80e0 	bls.w	80057bc <_printf_float+0x3c0>
 80055fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005600:	2200      	movs	r2, #0
 8005602:	2300      	movs	r3, #0
 8005604:	f7fb fa80 	bl	8000b08 <__aeabi_dcmpeq>
 8005608:	2800      	cmp	r0, #0
 800560a:	d034      	beq.n	8005676 <_printf_float+0x27a>
 800560c:	4a37      	ldr	r2, [pc, #220]	; (80056ec <_printf_float+0x2f0>)
 800560e:	2301      	movs	r3, #1
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f af51 	beq.w	80054be <_printf_float+0xc2>
 800561c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005620:	429a      	cmp	r2, r3
 8005622:	db02      	blt.n	800562a <_printf_float+0x22e>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	07d8      	lsls	r0, r3, #31
 8005628:	d510      	bpl.n	800564c <_printf_float+0x250>
 800562a:	ee18 3a10 	vmov	r3, s16
 800562e:	4652      	mov	r2, sl
 8005630:	4631      	mov	r1, r6
 8005632:	4628      	mov	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	3001      	adds	r0, #1
 8005638:	f43f af41 	beq.w	80054be <_printf_float+0xc2>
 800563c:	f04f 0800 	mov.w	r8, #0
 8005640:	f104 091a 	add.w	r9, r4, #26
 8005644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005646:	3b01      	subs	r3, #1
 8005648:	4543      	cmp	r3, r8
 800564a:	dc09      	bgt.n	8005660 <_printf_float+0x264>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	079b      	lsls	r3, r3, #30
 8005650:	f100 8105 	bmi.w	800585e <_printf_float+0x462>
 8005654:	68e0      	ldr	r0, [r4, #12]
 8005656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005658:	4298      	cmp	r0, r3
 800565a:	bfb8      	it	lt
 800565c:	4618      	movlt	r0, r3
 800565e:	e730      	b.n	80054c2 <_printf_float+0xc6>
 8005660:	2301      	movs	r3, #1
 8005662:	464a      	mov	r2, r9
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	f43f af27 	beq.w	80054be <_printf_float+0xc2>
 8005670:	f108 0801 	add.w	r8, r8, #1
 8005674:	e7e6      	b.n	8005644 <_printf_float+0x248>
 8005676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	dc39      	bgt.n	80056f0 <_printf_float+0x2f4>
 800567c:	4a1b      	ldr	r2, [pc, #108]	; (80056ec <_printf_float+0x2f0>)
 800567e:	2301      	movs	r3, #1
 8005680:	4631      	mov	r1, r6
 8005682:	4628      	mov	r0, r5
 8005684:	47b8      	blx	r7
 8005686:	3001      	adds	r0, #1
 8005688:	f43f af19 	beq.w	80054be <_printf_float+0xc2>
 800568c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005690:	4313      	orrs	r3, r2
 8005692:	d102      	bne.n	800569a <_printf_float+0x29e>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	07d9      	lsls	r1, r3, #31
 8005698:	d5d8      	bpl.n	800564c <_printf_float+0x250>
 800569a:	ee18 3a10 	vmov	r3, s16
 800569e:	4652      	mov	r2, sl
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f af09 	beq.w	80054be <_printf_float+0xc2>
 80056ac:	f04f 0900 	mov.w	r9, #0
 80056b0:	f104 0a1a 	add.w	sl, r4, #26
 80056b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b6:	425b      	negs	r3, r3
 80056b8:	454b      	cmp	r3, r9
 80056ba:	dc01      	bgt.n	80056c0 <_printf_float+0x2c4>
 80056bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056be:	e792      	b.n	80055e6 <_printf_float+0x1ea>
 80056c0:	2301      	movs	r3, #1
 80056c2:	4652      	mov	r2, sl
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	f43f aef7 	beq.w	80054be <_printf_float+0xc2>
 80056d0:	f109 0901 	add.w	r9, r9, #1
 80056d4:	e7ee      	b.n	80056b4 <_printf_float+0x2b8>
 80056d6:	bf00      	nop
 80056d8:	7fefffff 	.word	0x7fefffff
 80056dc:	0800a1c4 	.word	0x0800a1c4
 80056e0:	0800a1c8 	.word	0x0800a1c8
 80056e4:	0800a1d0 	.word	0x0800a1d0
 80056e8:	0800a1cc 	.word	0x0800a1cc
 80056ec:	0800a1d4 	.word	0x0800a1d4
 80056f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056f4:	429a      	cmp	r2, r3
 80056f6:	bfa8      	it	ge
 80056f8:	461a      	movge	r2, r3
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	4691      	mov	r9, r2
 80056fe:	dc37      	bgt.n	8005770 <_printf_float+0x374>
 8005700:	f04f 0b00 	mov.w	fp, #0
 8005704:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005708:	f104 021a 	add.w	r2, r4, #26
 800570c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800570e:	9305      	str	r3, [sp, #20]
 8005710:	eba3 0309 	sub.w	r3, r3, r9
 8005714:	455b      	cmp	r3, fp
 8005716:	dc33      	bgt.n	8005780 <_printf_float+0x384>
 8005718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800571c:	429a      	cmp	r2, r3
 800571e:	db3b      	blt.n	8005798 <_printf_float+0x39c>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	07da      	lsls	r2, r3, #31
 8005724:	d438      	bmi.n	8005798 <_printf_float+0x39c>
 8005726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005728:	9a05      	ldr	r2, [sp, #20]
 800572a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800572c:	1a9a      	subs	r2, r3, r2
 800572e:	eba3 0901 	sub.w	r9, r3, r1
 8005732:	4591      	cmp	r9, r2
 8005734:	bfa8      	it	ge
 8005736:	4691      	movge	r9, r2
 8005738:	f1b9 0f00 	cmp.w	r9, #0
 800573c:	dc35      	bgt.n	80057aa <_printf_float+0x3ae>
 800573e:	f04f 0800 	mov.w	r8, #0
 8005742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005746:	f104 0a1a 	add.w	sl, r4, #26
 800574a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	eba3 0309 	sub.w	r3, r3, r9
 8005754:	4543      	cmp	r3, r8
 8005756:	f77f af79 	ble.w	800564c <_printf_float+0x250>
 800575a:	2301      	movs	r3, #1
 800575c:	4652      	mov	r2, sl
 800575e:	4631      	mov	r1, r6
 8005760:	4628      	mov	r0, r5
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	f43f aeaa 	beq.w	80054be <_printf_float+0xc2>
 800576a:	f108 0801 	add.w	r8, r8, #1
 800576e:	e7ec      	b.n	800574a <_printf_float+0x34e>
 8005770:	4613      	mov	r3, r2
 8005772:	4631      	mov	r1, r6
 8005774:	4642      	mov	r2, r8
 8005776:	4628      	mov	r0, r5
 8005778:	47b8      	blx	r7
 800577a:	3001      	adds	r0, #1
 800577c:	d1c0      	bne.n	8005700 <_printf_float+0x304>
 800577e:	e69e      	b.n	80054be <_printf_float+0xc2>
 8005780:	2301      	movs	r3, #1
 8005782:	4631      	mov	r1, r6
 8005784:	4628      	mov	r0, r5
 8005786:	9205      	str	r2, [sp, #20]
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	f43f ae97 	beq.w	80054be <_printf_float+0xc2>
 8005790:	9a05      	ldr	r2, [sp, #20]
 8005792:	f10b 0b01 	add.w	fp, fp, #1
 8005796:	e7b9      	b.n	800570c <_printf_float+0x310>
 8005798:	ee18 3a10 	vmov	r3, s16
 800579c:	4652      	mov	r2, sl
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	d1be      	bne.n	8005726 <_printf_float+0x32a>
 80057a8:	e689      	b.n	80054be <_printf_float+0xc2>
 80057aa:	9a05      	ldr	r2, [sp, #20]
 80057ac:	464b      	mov	r3, r9
 80057ae:	4442      	add	r2, r8
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	d1c1      	bne.n	800573e <_printf_float+0x342>
 80057ba:	e680      	b.n	80054be <_printf_float+0xc2>
 80057bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057be:	2a01      	cmp	r2, #1
 80057c0:	dc01      	bgt.n	80057c6 <_printf_float+0x3ca>
 80057c2:	07db      	lsls	r3, r3, #31
 80057c4:	d538      	bpl.n	8005838 <_printf_float+0x43c>
 80057c6:	2301      	movs	r3, #1
 80057c8:	4642      	mov	r2, r8
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	f43f ae74 	beq.w	80054be <_printf_float+0xc2>
 80057d6:	ee18 3a10 	vmov	r3, s16
 80057da:	4652      	mov	r2, sl
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	47b8      	blx	r7
 80057e2:	3001      	adds	r0, #1
 80057e4:	f43f ae6b 	beq.w	80054be <_printf_float+0xc2>
 80057e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057ec:	2200      	movs	r2, #0
 80057ee:	2300      	movs	r3, #0
 80057f0:	f7fb f98a 	bl	8000b08 <__aeabi_dcmpeq>
 80057f4:	b9d8      	cbnz	r0, 800582e <_printf_float+0x432>
 80057f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f8:	f108 0201 	add.w	r2, r8, #1
 80057fc:	3b01      	subs	r3, #1
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	d10e      	bne.n	8005826 <_printf_float+0x42a>
 8005808:	e659      	b.n	80054be <_printf_float+0xc2>
 800580a:	2301      	movs	r3, #1
 800580c:	4652      	mov	r2, sl
 800580e:	4631      	mov	r1, r6
 8005810:	4628      	mov	r0, r5
 8005812:	47b8      	blx	r7
 8005814:	3001      	adds	r0, #1
 8005816:	f43f ae52 	beq.w	80054be <_printf_float+0xc2>
 800581a:	f108 0801 	add.w	r8, r8, #1
 800581e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005820:	3b01      	subs	r3, #1
 8005822:	4543      	cmp	r3, r8
 8005824:	dcf1      	bgt.n	800580a <_printf_float+0x40e>
 8005826:	464b      	mov	r3, r9
 8005828:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800582c:	e6dc      	b.n	80055e8 <_printf_float+0x1ec>
 800582e:	f04f 0800 	mov.w	r8, #0
 8005832:	f104 0a1a 	add.w	sl, r4, #26
 8005836:	e7f2      	b.n	800581e <_printf_float+0x422>
 8005838:	2301      	movs	r3, #1
 800583a:	4642      	mov	r2, r8
 800583c:	e7df      	b.n	80057fe <_printf_float+0x402>
 800583e:	2301      	movs	r3, #1
 8005840:	464a      	mov	r2, r9
 8005842:	4631      	mov	r1, r6
 8005844:	4628      	mov	r0, r5
 8005846:	47b8      	blx	r7
 8005848:	3001      	adds	r0, #1
 800584a:	f43f ae38 	beq.w	80054be <_printf_float+0xc2>
 800584e:	f108 0801 	add.w	r8, r8, #1
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005856:	1a5b      	subs	r3, r3, r1
 8005858:	4543      	cmp	r3, r8
 800585a:	dcf0      	bgt.n	800583e <_printf_float+0x442>
 800585c:	e6fa      	b.n	8005654 <_printf_float+0x258>
 800585e:	f04f 0800 	mov.w	r8, #0
 8005862:	f104 0919 	add.w	r9, r4, #25
 8005866:	e7f4      	b.n	8005852 <_printf_float+0x456>

08005868 <_printf_common>:
 8005868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	4616      	mov	r6, r2
 800586e:	4699      	mov	r9, r3
 8005870:	688a      	ldr	r2, [r1, #8]
 8005872:	690b      	ldr	r3, [r1, #16]
 8005874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005878:	4293      	cmp	r3, r2
 800587a:	bfb8      	it	lt
 800587c:	4613      	movlt	r3, r2
 800587e:	6033      	str	r3, [r6, #0]
 8005880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005884:	4607      	mov	r7, r0
 8005886:	460c      	mov	r4, r1
 8005888:	b10a      	cbz	r2, 800588e <_printf_common+0x26>
 800588a:	3301      	adds	r3, #1
 800588c:	6033      	str	r3, [r6, #0]
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	0699      	lsls	r1, r3, #26
 8005892:	bf42      	ittt	mi
 8005894:	6833      	ldrmi	r3, [r6, #0]
 8005896:	3302      	addmi	r3, #2
 8005898:	6033      	strmi	r3, [r6, #0]
 800589a:	6825      	ldr	r5, [r4, #0]
 800589c:	f015 0506 	ands.w	r5, r5, #6
 80058a0:	d106      	bne.n	80058b0 <_printf_common+0x48>
 80058a2:	f104 0a19 	add.w	sl, r4, #25
 80058a6:	68e3      	ldr	r3, [r4, #12]
 80058a8:	6832      	ldr	r2, [r6, #0]
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	42ab      	cmp	r3, r5
 80058ae:	dc26      	bgt.n	80058fe <_printf_common+0x96>
 80058b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058b4:	1e13      	subs	r3, r2, #0
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	bf18      	it	ne
 80058ba:	2301      	movne	r3, #1
 80058bc:	0692      	lsls	r2, r2, #26
 80058be:	d42b      	bmi.n	8005918 <_printf_common+0xb0>
 80058c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058c4:	4649      	mov	r1, r9
 80058c6:	4638      	mov	r0, r7
 80058c8:	47c0      	blx	r8
 80058ca:	3001      	adds	r0, #1
 80058cc:	d01e      	beq.n	800590c <_printf_common+0xa4>
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	68e5      	ldr	r5, [r4, #12]
 80058d2:	6832      	ldr	r2, [r6, #0]
 80058d4:	f003 0306 	and.w	r3, r3, #6
 80058d8:	2b04      	cmp	r3, #4
 80058da:	bf08      	it	eq
 80058dc:	1aad      	subeq	r5, r5, r2
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	6922      	ldr	r2, [r4, #16]
 80058e2:	bf0c      	ite	eq
 80058e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e8:	2500      	movne	r5, #0
 80058ea:	4293      	cmp	r3, r2
 80058ec:	bfc4      	itt	gt
 80058ee:	1a9b      	subgt	r3, r3, r2
 80058f0:	18ed      	addgt	r5, r5, r3
 80058f2:	2600      	movs	r6, #0
 80058f4:	341a      	adds	r4, #26
 80058f6:	42b5      	cmp	r5, r6
 80058f8:	d11a      	bne.n	8005930 <_printf_common+0xc8>
 80058fa:	2000      	movs	r0, #0
 80058fc:	e008      	b.n	8005910 <_printf_common+0xa8>
 80058fe:	2301      	movs	r3, #1
 8005900:	4652      	mov	r2, sl
 8005902:	4649      	mov	r1, r9
 8005904:	4638      	mov	r0, r7
 8005906:	47c0      	blx	r8
 8005908:	3001      	adds	r0, #1
 800590a:	d103      	bne.n	8005914 <_printf_common+0xac>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	3501      	adds	r5, #1
 8005916:	e7c6      	b.n	80058a6 <_printf_common+0x3e>
 8005918:	18e1      	adds	r1, r4, r3
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	2030      	movs	r0, #48	; 0x30
 800591e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005922:	4422      	add	r2, r4
 8005924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800592c:	3302      	adds	r3, #2
 800592e:	e7c7      	b.n	80058c0 <_printf_common+0x58>
 8005930:	2301      	movs	r3, #1
 8005932:	4622      	mov	r2, r4
 8005934:	4649      	mov	r1, r9
 8005936:	4638      	mov	r0, r7
 8005938:	47c0      	blx	r8
 800593a:	3001      	adds	r0, #1
 800593c:	d0e6      	beq.n	800590c <_printf_common+0xa4>
 800593e:	3601      	adds	r6, #1
 8005940:	e7d9      	b.n	80058f6 <_printf_common+0x8e>
	...

08005944 <_printf_i>:
 8005944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	7e0f      	ldrb	r7, [r1, #24]
 800594a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800594c:	2f78      	cmp	r7, #120	; 0x78
 800594e:	4691      	mov	r9, r2
 8005950:	4680      	mov	r8, r0
 8005952:	460c      	mov	r4, r1
 8005954:	469a      	mov	sl, r3
 8005956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800595a:	d807      	bhi.n	800596c <_printf_i+0x28>
 800595c:	2f62      	cmp	r7, #98	; 0x62
 800595e:	d80a      	bhi.n	8005976 <_printf_i+0x32>
 8005960:	2f00      	cmp	r7, #0
 8005962:	f000 80d8 	beq.w	8005b16 <_printf_i+0x1d2>
 8005966:	2f58      	cmp	r7, #88	; 0x58
 8005968:	f000 80a3 	beq.w	8005ab2 <_printf_i+0x16e>
 800596c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005974:	e03a      	b.n	80059ec <_printf_i+0xa8>
 8005976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800597a:	2b15      	cmp	r3, #21
 800597c:	d8f6      	bhi.n	800596c <_printf_i+0x28>
 800597e:	a101      	add	r1, pc, #4	; (adr r1, 8005984 <_printf_i+0x40>)
 8005980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005984:	080059dd 	.word	0x080059dd
 8005988:	080059f1 	.word	0x080059f1
 800598c:	0800596d 	.word	0x0800596d
 8005990:	0800596d 	.word	0x0800596d
 8005994:	0800596d 	.word	0x0800596d
 8005998:	0800596d 	.word	0x0800596d
 800599c:	080059f1 	.word	0x080059f1
 80059a0:	0800596d 	.word	0x0800596d
 80059a4:	0800596d 	.word	0x0800596d
 80059a8:	0800596d 	.word	0x0800596d
 80059ac:	0800596d 	.word	0x0800596d
 80059b0:	08005afd 	.word	0x08005afd
 80059b4:	08005a21 	.word	0x08005a21
 80059b8:	08005adf 	.word	0x08005adf
 80059bc:	0800596d 	.word	0x0800596d
 80059c0:	0800596d 	.word	0x0800596d
 80059c4:	08005b1f 	.word	0x08005b1f
 80059c8:	0800596d 	.word	0x0800596d
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	0800596d 	.word	0x0800596d
 80059d4:	0800596d 	.word	0x0800596d
 80059d8:	08005ae7 	.word	0x08005ae7
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	1d1a      	adds	r2, r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	602a      	str	r2, [r5, #0]
 80059e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0a3      	b.n	8005b38 <_printf_i+0x1f4>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	6829      	ldr	r1, [r5, #0]
 80059f4:	0606      	lsls	r6, r0, #24
 80059f6:	f101 0304 	add.w	r3, r1, #4
 80059fa:	d50a      	bpl.n	8005a12 <_printf_i+0xce>
 80059fc:	680e      	ldr	r6, [r1, #0]
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	2e00      	cmp	r6, #0
 8005a02:	da03      	bge.n	8005a0c <_printf_i+0xc8>
 8005a04:	232d      	movs	r3, #45	; 0x2d
 8005a06:	4276      	negs	r6, r6
 8005a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a0c:	485e      	ldr	r0, [pc, #376]	; (8005b88 <_printf_i+0x244>)
 8005a0e:	230a      	movs	r3, #10
 8005a10:	e019      	b.n	8005a46 <_printf_i+0x102>
 8005a12:	680e      	ldr	r6, [r1, #0]
 8005a14:	602b      	str	r3, [r5, #0]
 8005a16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a1a:	bf18      	it	ne
 8005a1c:	b236      	sxthne	r6, r6
 8005a1e:	e7ef      	b.n	8005a00 <_printf_i+0xbc>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	6820      	ldr	r0, [r4, #0]
 8005a24:	1d19      	adds	r1, r3, #4
 8005a26:	6029      	str	r1, [r5, #0]
 8005a28:	0601      	lsls	r1, r0, #24
 8005a2a:	d501      	bpl.n	8005a30 <_printf_i+0xec>
 8005a2c:	681e      	ldr	r6, [r3, #0]
 8005a2e:	e002      	b.n	8005a36 <_printf_i+0xf2>
 8005a30:	0646      	lsls	r6, r0, #25
 8005a32:	d5fb      	bpl.n	8005a2c <_printf_i+0xe8>
 8005a34:	881e      	ldrh	r6, [r3, #0]
 8005a36:	4854      	ldr	r0, [pc, #336]	; (8005b88 <_printf_i+0x244>)
 8005a38:	2f6f      	cmp	r7, #111	; 0x6f
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2308      	moveq	r3, #8
 8005a3e:	230a      	movne	r3, #10
 8005a40:	2100      	movs	r1, #0
 8005a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a46:	6865      	ldr	r5, [r4, #4]
 8005a48:	60a5      	str	r5, [r4, #8]
 8005a4a:	2d00      	cmp	r5, #0
 8005a4c:	bfa2      	ittt	ge
 8005a4e:	6821      	ldrge	r1, [r4, #0]
 8005a50:	f021 0104 	bicge.w	r1, r1, #4
 8005a54:	6021      	strge	r1, [r4, #0]
 8005a56:	b90e      	cbnz	r6, 8005a5c <_printf_i+0x118>
 8005a58:	2d00      	cmp	r5, #0
 8005a5a:	d04d      	beq.n	8005af8 <_printf_i+0x1b4>
 8005a5c:	4615      	mov	r5, r2
 8005a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a62:	fb03 6711 	mls	r7, r3, r1, r6
 8005a66:	5dc7      	ldrb	r7, [r0, r7]
 8005a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a6c:	4637      	mov	r7, r6
 8005a6e:	42bb      	cmp	r3, r7
 8005a70:	460e      	mov	r6, r1
 8005a72:	d9f4      	bls.n	8005a5e <_printf_i+0x11a>
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d10b      	bne.n	8005a90 <_printf_i+0x14c>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	07de      	lsls	r6, r3, #31
 8005a7c:	d508      	bpl.n	8005a90 <_printf_i+0x14c>
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	6861      	ldr	r1, [r4, #4]
 8005a82:	4299      	cmp	r1, r3
 8005a84:	bfde      	ittt	le
 8005a86:	2330      	movle	r3, #48	; 0x30
 8005a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a90:	1b52      	subs	r2, r2, r5
 8005a92:	6122      	str	r2, [r4, #16]
 8005a94:	f8cd a000 	str.w	sl, [sp]
 8005a98:	464b      	mov	r3, r9
 8005a9a:	aa03      	add	r2, sp, #12
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	f7ff fee2 	bl	8005868 <_printf_common>
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d14c      	bne.n	8005b42 <_printf_i+0x1fe>
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	b004      	add	sp, #16
 8005aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab2:	4835      	ldr	r0, [pc, #212]	; (8005b88 <_printf_i+0x244>)
 8005ab4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ab8:	6829      	ldr	r1, [r5, #0]
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ac0:	6029      	str	r1, [r5, #0]
 8005ac2:	061d      	lsls	r5, r3, #24
 8005ac4:	d514      	bpl.n	8005af0 <_printf_i+0x1ac>
 8005ac6:	07df      	lsls	r7, r3, #31
 8005ac8:	bf44      	itt	mi
 8005aca:	f043 0320 	orrmi.w	r3, r3, #32
 8005ace:	6023      	strmi	r3, [r4, #0]
 8005ad0:	b91e      	cbnz	r6, 8005ada <_printf_i+0x196>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	f023 0320 	bic.w	r3, r3, #32
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	2310      	movs	r3, #16
 8005adc:	e7b0      	b.n	8005a40 <_printf_i+0xfc>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	f043 0320 	orr.w	r3, r3, #32
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	2378      	movs	r3, #120	; 0x78
 8005ae8:	4828      	ldr	r0, [pc, #160]	; (8005b8c <_printf_i+0x248>)
 8005aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005aee:	e7e3      	b.n	8005ab8 <_printf_i+0x174>
 8005af0:	0659      	lsls	r1, r3, #25
 8005af2:	bf48      	it	mi
 8005af4:	b2b6      	uxthmi	r6, r6
 8005af6:	e7e6      	b.n	8005ac6 <_printf_i+0x182>
 8005af8:	4615      	mov	r5, r2
 8005afa:	e7bb      	b.n	8005a74 <_printf_i+0x130>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	6826      	ldr	r6, [r4, #0]
 8005b00:	6961      	ldr	r1, [r4, #20]
 8005b02:	1d18      	adds	r0, r3, #4
 8005b04:	6028      	str	r0, [r5, #0]
 8005b06:	0635      	lsls	r5, r6, #24
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	d501      	bpl.n	8005b10 <_printf_i+0x1cc>
 8005b0c:	6019      	str	r1, [r3, #0]
 8005b0e:	e002      	b.n	8005b16 <_printf_i+0x1d2>
 8005b10:	0670      	lsls	r0, r6, #25
 8005b12:	d5fb      	bpl.n	8005b0c <_printf_i+0x1c8>
 8005b14:	8019      	strh	r1, [r3, #0]
 8005b16:	2300      	movs	r3, #0
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	4615      	mov	r5, r2
 8005b1c:	e7ba      	b.n	8005a94 <_printf_i+0x150>
 8005b1e:	682b      	ldr	r3, [r5, #0]
 8005b20:	1d1a      	adds	r2, r3, #4
 8005b22:	602a      	str	r2, [r5, #0]
 8005b24:	681d      	ldr	r5, [r3, #0]
 8005b26:	6862      	ldr	r2, [r4, #4]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f7fa fb78 	bl	8000220 <memchr>
 8005b30:	b108      	cbz	r0, 8005b36 <_printf_i+0x1f2>
 8005b32:	1b40      	subs	r0, r0, r5
 8005b34:	6060      	str	r0, [r4, #4]
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	6123      	str	r3, [r4, #16]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b40:	e7a8      	b.n	8005a94 <_printf_i+0x150>
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	462a      	mov	r2, r5
 8005b46:	4649      	mov	r1, r9
 8005b48:	4640      	mov	r0, r8
 8005b4a:	47d0      	blx	sl
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d0ab      	beq.n	8005aa8 <_printf_i+0x164>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	079b      	lsls	r3, r3, #30
 8005b54:	d413      	bmi.n	8005b7e <_printf_i+0x23a>
 8005b56:	68e0      	ldr	r0, [r4, #12]
 8005b58:	9b03      	ldr	r3, [sp, #12]
 8005b5a:	4298      	cmp	r0, r3
 8005b5c:	bfb8      	it	lt
 8005b5e:	4618      	movlt	r0, r3
 8005b60:	e7a4      	b.n	8005aac <_printf_i+0x168>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4632      	mov	r2, r6
 8005b66:	4649      	mov	r1, r9
 8005b68:	4640      	mov	r0, r8
 8005b6a:	47d0      	blx	sl
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d09b      	beq.n	8005aa8 <_printf_i+0x164>
 8005b70:	3501      	adds	r5, #1
 8005b72:	68e3      	ldr	r3, [r4, #12]
 8005b74:	9903      	ldr	r1, [sp, #12]
 8005b76:	1a5b      	subs	r3, r3, r1
 8005b78:	42ab      	cmp	r3, r5
 8005b7a:	dcf2      	bgt.n	8005b62 <_printf_i+0x21e>
 8005b7c:	e7eb      	b.n	8005b56 <_printf_i+0x212>
 8005b7e:	2500      	movs	r5, #0
 8005b80:	f104 0619 	add.w	r6, r4, #25
 8005b84:	e7f5      	b.n	8005b72 <_printf_i+0x22e>
 8005b86:	bf00      	nop
 8005b88:	0800a1d6 	.word	0x0800a1d6
 8005b8c:	0800a1e7 	.word	0x0800a1e7

08005b90 <_scanf_float>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	b087      	sub	sp, #28
 8005b96:	4617      	mov	r7, r2
 8005b98:	9303      	str	r3, [sp, #12]
 8005b9a:	688b      	ldr	r3, [r1, #8]
 8005b9c:	1e5a      	subs	r2, r3, #1
 8005b9e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005ba2:	bf83      	ittte	hi
 8005ba4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005ba8:	195b      	addhi	r3, r3, r5
 8005baa:	9302      	strhi	r3, [sp, #8]
 8005bac:	2300      	movls	r3, #0
 8005bae:	bf86      	itte	hi
 8005bb0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005bb4:	608b      	strhi	r3, [r1, #8]
 8005bb6:	9302      	strls	r3, [sp, #8]
 8005bb8:	680b      	ldr	r3, [r1, #0]
 8005bba:	468b      	mov	fp, r1
 8005bbc:	2500      	movs	r5, #0
 8005bbe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005bc2:	f84b 3b1c 	str.w	r3, [fp], #28
 8005bc6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005bca:	4680      	mov	r8, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	465e      	mov	r6, fp
 8005bd0:	46aa      	mov	sl, r5
 8005bd2:	46a9      	mov	r9, r5
 8005bd4:	9501      	str	r5, [sp, #4]
 8005bd6:	68a2      	ldr	r2, [r4, #8]
 8005bd8:	b152      	cbz	r2, 8005bf0 <_scanf_float+0x60>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b4e      	cmp	r3, #78	; 0x4e
 8005be0:	d864      	bhi.n	8005cac <_scanf_float+0x11c>
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	d83c      	bhi.n	8005c60 <_scanf_float+0xd0>
 8005be6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005bea:	b2c8      	uxtb	r0, r1
 8005bec:	280e      	cmp	r0, #14
 8005bee:	d93a      	bls.n	8005c66 <_scanf_float+0xd6>
 8005bf0:	f1b9 0f00 	cmp.w	r9, #0
 8005bf4:	d003      	beq.n	8005bfe <_scanf_float+0x6e>
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c02:	f1ba 0f01 	cmp.w	sl, #1
 8005c06:	f200 8113 	bhi.w	8005e30 <_scanf_float+0x2a0>
 8005c0a:	455e      	cmp	r6, fp
 8005c0c:	f200 8105 	bhi.w	8005e1a <_scanf_float+0x28a>
 8005c10:	2501      	movs	r5, #1
 8005c12:	4628      	mov	r0, r5
 8005c14:	b007      	add	sp, #28
 8005c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005c1e:	2a0d      	cmp	r2, #13
 8005c20:	d8e6      	bhi.n	8005bf0 <_scanf_float+0x60>
 8005c22:	a101      	add	r1, pc, #4	; (adr r1, 8005c28 <_scanf_float+0x98>)
 8005c24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c28:	08005d67 	.word	0x08005d67
 8005c2c:	08005bf1 	.word	0x08005bf1
 8005c30:	08005bf1 	.word	0x08005bf1
 8005c34:	08005bf1 	.word	0x08005bf1
 8005c38:	08005dc7 	.word	0x08005dc7
 8005c3c:	08005d9f 	.word	0x08005d9f
 8005c40:	08005bf1 	.word	0x08005bf1
 8005c44:	08005bf1 	.word	0x08005bf1
 8005c48:	08005d75 	.word	0x08005d75
 8005c4c:	08005bf1 	.word	0x08005bf1
 8005c50:	08005bf1 	.word	0x08005bf1
 8005c54:	08005bf1 	.word	0x08005bf1
 8005c58:	08005bf1 	.word	0x08005bf1
 8005c5c:	08005d2d 	.word	0x08005d2d
 8005c60:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005c64:	e7db      	b.n	8005c1e <_scanf_float+0x8e>
 8005c66:	290e      	cmp	r1, #14
 8005c68:	d8c2      	bhi.n	8005bf0 <_scanf_float+0x60>
 8005c6a:	a001      	add	r0, pc, #4	; (adr r0, 8005c70 <_scanf_float+0xe0>)
 8005c6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c70:	08005d1f 	.word	0x08005d1f
 8005c74:	08005bf1 	.word	0x08005bf1
 8005c78:	08005d1f 	.word	0x08005d1f
 8005c7c:	08005db3 	.word	0x08005db3
 8005c80:	08005bf1 	.word	0x08005bf1
 8005c84:	08005ccd 	.word	0x08005ccd
 8005c88:	08005d09 	.word	0x08005d09
 8005c8c:	08005d09 	.word	0x08005d09
 8005c90:	08005d09 	.word	0x08005d09
 8005c94:	08005d09 	.word	0x08005d09
 8005c98:	08005d09 	.word	0x08005d09
 8005c9c:	08005d09 	.word	0x08005d09
 8005ca0:	08005d09 	.word	0x08005d09
 8005ca4:	08005d09 	.word	0x08005d09
 8005ca8:	08005d09 	.word	0x08005d09
 8005cac:	2b6e      	cmp	r3, #110	; 0x6e
 8005cae:	d809      	bhi.n	8005cc4 <_scanf_float+0x134>
 8005cb0:	2b60      	cmp	r3, #96	; 0x60
 8005cb2:	d8b2      	bhi.n	8005c1a <_scanf_float+0x8a>
 8005cb4:	2b54      	cmp	r3, #84	; 0x54
 8005cb6:	d077      	beq.n	8005da8 <_scanf_float+0x218>
 8005cb8:	2b59      	cmp	r3, #89	; 0x59
 8005cba:	d199      	bne.n	8005bf0 <_scanf_float+0x60>
 8005cbc:	2d07      	cmp	r5, #7
 8005cbe:	d197      	bne.n	8005bf0 <_scanf_float+0x60>
 8005cc0:	2508      	movs	r5, #8
 8005cc2:	e029      	b.n	8005d18 <_scanf_float+0x188>
 8005cc4:	2b74      	cmp	r3, #116	; 0x74
 8005cc6:	d06f      	beq.n	8005da8 <_scanf_float+0x218>
 8005cc8:	2b79      	cmp	r3, #121	; 0x79
 8005cca:	e7f6      	b.n	8005cba <_scanf_float+0x12a>
 8005ccc:	6821      	ldr	r1, [r4, #0]
 8005cce:	05c8      	lsls	r0, r1, #23
 8005cd0:	d51a      	bpl.n	8005d08 <_scanf_float+0x178>
 8005cd2:	9b02      	ldr	r3, [sp, #8]
 8005cd4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005cd8:	6021      	str	r1, [r4, #0]
 8005cda:	f109 0901 	add.w	r9, r9, #1
 8005cde:	b11b      	cbz	r3, 8005ce8 <_scanf_float+0x158>
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	3201      	adds	r2, #1
 8005ce4:	9302      	str	r3, [sp, #8]
 8005ce6:	60a2      	str	r2, [r4, #8]
 8005ce8:	68a3      	ldr	r3, [r4, #8]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	60a3      	str	r3, [r4, #8]
 8005cee:	6923      	ldr	r3, [r4, #16]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	6123      	str	r3, [r4, #16]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	607b      	str	r3, [r7, #4]
 8005cfc:	f340 8084 	ble.w	8005e08 <_scanf_float+0x278>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	603b      	str	r3, [r7, #0]
 8005d06:	e766      	b.n	8005bd6 <_scanf_float+0x46>
 8005d08:	eb1a 0f05 	cmn.w	sl, r5
 8005d0c:	f47f af70 	bne.w	8005bf0 <_scanf_float+0x60>
 8005d10:	6822      	ldr	r2, [r4, #0]
 8005d12:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005d16:	6022      	str	r2, [r4, #0]
 8005d18:	f806 3b01 	strb.w	r3, [r6], #1
 8005d1c:	e7e4      	b.n	8005ce8 <_scanf_float+0x158>
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	0610      	lsls	r0, r2, #24
 8005d22:	f57f af65 	bpl.w	8005bf0 <_scanf_float+0x60>
 8005d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d2a:	e7f4      	b.n	8005d16 <_scanf_float+0x186>
 8005d2c:	f1ba 0f00 	cmp.w	sl, #0
 8005d30:	d10e      	bne.n	8005d50 <_scanf_float+0x1c0>
 8005d32:	f1b9 0f00 	cmp.w	r9, #0
 8005d36:	d10e      	bne.n	8005d56 <_scanf_float+0x1c6>
 8005d38:	6822      	ldr	r2, [r4, #0]
 8005d3a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005d3e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005d42:	d108      	bne.n	8005d56 <_scanf_float+0x1c6>
 8005d44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d48:	6022      	str	r2, [r4, #0]
 8005d4a:	f04f 0a01 	mov.w	sl, #1
 8005d4e:	e7e3      	b.n	8005d18 <_scanf_float+0x188>
 8005d50:	f1ba 0f02 	cmp.w	sl, #2
 8005d54:	d055      	beq.n	8005e02 <_scanf_float+0x272>
 8005d56:	2d01      	cmp	r5, #1
 8005d58:	d002      	beq.n	8005d60 <_scanf_float+0x1d0>
 8005d5a:	2d04      	cmp	r5, #4
 8005d5c:	f47f af48 	bne.w	8005bf0 <_scanf_float+0x60>
 8005d60:	3501      	adds	r5, #1
 8005d62:	b2ed      	uxtb	r5, r5
 8005d64:	e7d8      	b.n	8005d18 <_scanf_float+0x188>
 8005d66:	f1ba 0f01 	cmp.w	sl, #1
 8005d6a:	f47f af41 	bne.w	8005bf0 <_scanf_float+0x60>
 8005d6e:	f04f 0a02 	mov.w	sl, #2
 8005d72:	e7d1      	b.n	8005d18 <_scanf_float+0x188>
 8005d74:	b97d      	cbnz	r5, 8005d96 <_scanf_float+0x206>
 8005d76:	f1b9 0f00 	cmp.w	r9, #0
 8005d7a:	f47f af3c 	bne.w	8005bf6 <_scanf_float+0x66>
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005d84:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005d88:	f47f af39 	bne.w	8005bfe <_scanf_float+0x6e>
 8005d8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d90:	6022      	str	r2, [r4, #0]
 8005d92:	2501      	movs	r5, #1
 8005d94:	e7c0      	b.n	8005d18 <_scanf_float+0x188>
 8005d96:	2d03      	cmp	r5, #3
 8005d98:	d0e2      	beq.n	8005d60 <_scanf_float+0x1d0>
 8005d9a:	2d05      	cmp	r5, #5
 8005d9c:	e7de      	b.n	8005d5c <_scanf_float+0x1cc>
 8005d9e:	2d02      	cmp	r5, #2
 8005da0:	f47f af26 	bne.w	8005bf0 <_scanf_float+0x60>
 8005da4:	2503      	movs	r5, #3
 8005da6:	e7b7      	b.n	8005d18 <_scanf_float+0x188>
 8005da8:	2d06      	cmp	r5, #6
 8005daa:	f47f af21 	bne.w	8005bf0 <_scanf_float+0x60>
 8005dae:	2507      	movs	r5, #7
 8005db0:	e7b2      	b.n	8005d18 <_scanf_float+0x188>
 8005db2:	6822      	ldr	r2, [r4, #0]
 8005db4:	0591      	lsls	r1, r2, #22
 8005db6:	f57f af1b 	bpl.w	8005bf0 <_scanf_float+0x60>
 8005dba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005dbe:	6022      	str	r2, [r4, #0]
 8005dc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8005dc4:	e7a8      	b.n	8005d18 <_scanf_float+0x188>
 8005dc6:	6822      	ldr	r2, [r4, #0]
 8005dc8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005dcc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005dd0:	d006      	beq.n	8005de0 <_scanf_float+0x250>
 8005dd2:	0550      	lsls	r0, r2, #21
 8005dd4:	f57f af0c 	bpl.w	8005bf0 <_scanf_float+0x60>
 8005dd8:	f1b9 0f00 	cmp.w	r9, #0
 8005ddc:	f43f af0f 	beq.w	8005bfe <_scanf_float+0x6e>
 8005de0:	0591      	lsls	r1, r2, #22
 8005de2:	bf58      	it	pl
 8005de4:	9901      	ldrpl	r1, [sp, #4]
 8005de6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005dea:	bf58      	it	pl
 8005dec:	eba9 0101 	subpl.w	r1, r9, r1
 8005df0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005df4:	bf58      	it	pl
 8005df6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005dfa:	6022      	str	r2, [r4, #0]
 8005dfc:	f04f 0900 	mov.w	r9, #0
 8005e00:	e78a      	b.n	8005d18 <_scanf_float+0x188>
 8005e02:	f04f 0a03 	mov.w	sl, #3
 8005e06:	e787      	b.n	8005d18 <_scanf_float+0x188>
 8005e08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	4640      	mov	r0, r8
 8005e10:	4798      	blx	r3
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f43f aedf 	beq.w	8005bd6 <_scanf_float+0x46>
 8005e18:	e6ea      	b.n	8005bf0 <_scanf_float+0x60>
 8005e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e22:	463a      	mov	r2, r7
 8005e24:	4640      	mov	r0, r8
 8005e26:	4798      	blx	r3
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	6123      	str	r3, [r4, #16]
 8005e2e:	e6ec      	b.n	8005c0a <_scanf_float+0x7a>
 8005e30:	1e6b      	subs	r3, r5, #1
 8005e32:	2b06      	cmp	r3, #6
 8005e34:	d825      	bhi.n	8005e82 <_scanf_float+0x2f2>
 8005e36:	2d02      	cmp	r5, #2
 8005e38:	d836      	bhi.n	8005ea8 <_scanf_float+0x318>
 8005e3a:	455e      	cmp	r6, fp
 8005e3c:	f67f aee8 	bls.w	8005c10 <_scanf_float+0x80>
 8005e40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e44:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e48:	463a      	mov	r2, r7
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4798      	blx	r3
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	e7f1      	b.n	8005e3a <_scanf_float+0x2aa>
 8005e56:	9802      	ldr	r0, [sp, #8]
 8005e58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e5c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005e60:	9002      	str	r0, [sp, #8]
 8005e62:	463a      	mov	r2, r7
 8005e64:	4640      	mov	r0, r8
 8005e66:	4798      	blx	r3
 8005e68:	6923      	ldr	r3, [r4, #16]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	6123      	str	r3, [r4, #16]
 8005e6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e72:	fa5f fa8a 	uxtb.w	sl, sl
 8005e76:	f1ba 0f02 	cmp.w	sl, #2
 8005e7a:	d1ec      	bne.n	8005e56 <_scanf_float+0x2c6>
 8005e7c:	3d03      	subs	r5, #3
 8005e7e:	b2ed      	uxtb	r5, r5
 8005e80:	1b76      	subs	r6, r6, r5
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	05da      	lsls	r2, r3, #23
 8005e86:	d52f      	bpl.n	8005ee8 <_scanf_float+0x358>
 8005e88:	055b      	lsls	r3, r3, #21
 8005e8a:	d510      	bpl.n	8005eae <_scanf_float+0x31e>
 8005e8c:	455e      	cmp	r6, fp
 8005e8e:	f67f aebf 	bls.w	8005c10 <_scanf_float+0x80>
 8005e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e9a:	463a      	mov	r2, r7
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4798      	blx	r3
 8005ea0:	6923      	ldr	r3, [r4, #16]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	e7f1      	b.n	8005e8c <_scanf_float+0x2fc>
 8005ea8:	46aa      	mov	sl, r5
 8005eaa:	9602      	str	r6, [sp, #8]
 8005eac:	e7df      	b.n	8005e6e <_scanf_float+0x2de>
 8005eae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005eb2:	6923      	ldr	r3, [r4, #16]
 8005eb4:	2965      	cmp	r1, #101	; 0x65
 8005eb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005eba:	f106 35ff 	add.w	r5, r6, #4294967295
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	d00c      	beq.n	8005edc <_scanf_float+0x34c>
 8005ec2:	2945      	cmp	r1, #69	; 0x45
 8005ec4:	d00a      	beq.n	8005edc <_scanf_float+0x34c>
 8005ec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005eca:	463a      	mov	r2, r7
 8005ecc:	4640      	mov	r0, r8
 8005ece:	4798      	blx	r3
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	1eb5      	subs	r5, r6, #2
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ee0:	463a      	mov	r2, r7
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	4798      	blx	r3
 8005ee6:	462e      	mov	r6, r5
 8005ee8:	6825      	ldr	r5, [r4, #0]
 8005eea:	f015 0510 	ands.w	r5, r5, #16
 8005eee:	d159      	bne.n	8005fa4 <_scanf_float+0x414>
 8005ef0:	7035      	strb	r5, [r6, #0]
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005efc:	d11b      	bne.n	8005f36 <_scanf_float+0x3a6>
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	454b      	cmp	r3, r9
 8005f02:	eba3 0209 	sub.w	r2, r3, r9
 8005f06:	d123      	bne.n	8005f50 <_scanf_float+0x3c0>
 8005f08:	2200      	movs	r2, #0
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	4640      	mov	r0, r8
 8005f0e:	f000 ff75 	bl	8006dfc <_strtod_r>
 8005f12:	6822      	ldr	r2, [r4, #0]
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	f012 0f02 	tst.w	r2, #2
 8005f1a:	ec57 6b10 	vmov	r6, r7, d0
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	d021      	beq.n	8005f66 <_scanf_float+0x3d6>
 8005f22:	9903      	ldr	r1, [sp, #12]
 8005f24:	1d1a      	adds	r2, r3, #4
 8005f26:	600a      	str	r2, [r1, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	e9c3 6700 	strd	r6, r7, [r3]
 8005f2e:	68e3      	ldr	r3, [r4, #12]
 8005f30:	3301      	adds	r3, #1
 8005f32:	60e3      	str	r3, [r4, #12]
 8005f34:	e66d      	b.n	8005c12 <_scanf_float+0x82>
 8005f36:	9b04      	ldr	r3, [sp, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0e5      	beq.n	8005f08 <_scanf_float+0x378>
 8005f3c:	9905      	ldr	r1, [sp, #20]
 8005f3e:	230a      	movs	r3, #10
 8005f40:	462a      	mov	r2, r5
 8005f42:	3101      	adds	r1, #1
 8005f44:	4640      	mov	r0, r8
 8005f46:	f000 ffe1 	bl	8006f0c <_strtol_r>
 8005f4a:	9b04      	ldr	r3, [sp, #16]
 8005f4c:	9e05      	ldr	r6, [sp, #20]
 8005f4e:	1ac2      	subs	r2, r0, r3
 8005f50:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005f54:	429e      	cmp	r6, r3
 8005f56:	bf28      	it	cs
 8005f58:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005f5c:	4912      	ldr	r1, [pc, #72]	; (8005fa8 <_scanf_float+0x418>)
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f000 f90a 	bl	8006178 <siprintf>
 8005f64:	e7d0      	b.n	8005f08 <_scanf_float+0x378>
 8005f66:	9903      	ldr	r1, [sp, #12]
 8005f68:	f012 0f04 	tst.w	r2, #4
 8005f6c:	f103 0204 	add.w	r2, r3, #4
 8005f70:	600a      	str	r2, [r1, #0]
 8005f72:	d1d9      	bne.n	8005f28 <_scanf_float+0x398>
 8005f74:	f8d3 8000 	ldr.w	r8, [r3]
 8005f78:	ee10 2a10 	vmov	r2, s0
 8005f7c:	ee10 0a10 	vmov	r0, s0
 8005f80:	463b      	mov	r3, r7
 8005f82:	4639      	mov	r1, r7
 8005f84:	f7fa fdf2 	bl	8000b6c <__aeabi_dcmpun>
 8005f88:	b128      	cbz	r0, 8005f96 <_scanf_float+0x406>
 8005f8a:	4808      	ldr	r0, [pc, #32]	; (8005fac <_scanf_float+0x41c>)
 8005f8c:	f000 f8ee 	bl	800616c <nanf>
 8005f90:	ed88 0a00 	vstr	s0, [r8]
 8005f94:	e7cb      	b.n	8005f2e <_scanf_float+0x39e>
 8005f96:	4630      	mov	r0, r6
 8005f98:	4639      	mov	r1, r7
 8005f9a:	f7fa fe45 	bl	8000c28 <__aeabi_d2f>
 8005f9e:	f8c8 0000 	str.w	r0, [r8]
 8005fa2:	e7c4      	b.n	8005f2e <_scanf_float+0x39e>
 8005fa4:	2500      	movs	r5, #0
 8005fa6:	e634      	b.n	8005c12 <_scanf_float+0x82>
 8005fa8:	0800a1f8 	.word	0x0800a1f8
 8005fac:	0800a668 	.word	0x0800a668

08005fb0 <iprintf>:
 8005fb0:	b40f      	push	{r0, r1, r2, r3}
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <iprintf+0x2c>)
 8005fb4:	b513      	push	{r0, r1, r4, lr}
 8005fb6:	681c      	ldr	r4, [r3, #0]
 8005fb8:	b124      	cbz	r4, 8005fc4 <iprintf+0x14>
 8005fba:	69a3      	ldr	r3, [r4, #24]
 8005fbc:	b913      	cbnz	r3, 8005fc4 <iprintf+0x14>
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f001 ff3a 	bl	8007e38 <__sinit>
 8005fc4:	ab05      	add	r3, sp, #20
 8005fc6:	9a04      	ldr	r2, [sp, #16]
 8005fc8:	68a1      	ldr	r1, [r4, #8]
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f003 fb11 	bl	80095f4 <_vfiprintf_r>
 8005fd2:	b002      	add	sp, #8
 8005fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd8:	b004      	add	sp, #16
 8005fda:	4770      	bx	lr
 8005fdc:	2000000c 	.word	0x2000000c

08005fe0 <setvbuf>:
 8005fe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fe4:	461d      	mov	r5, r3
 8005fe6:	4b5d      	ldr	r3, [pc, #372]	; (800615c <setvbuf+0x17c>)
 8005fe8:	681f      	ldr	r7, [r3, #0]
 8005fea:	4604      	mov	r4, r0
 8005fec:	460e      	mov	r6, r1
 8005fee:	4690      	mov	r8, r2
 8005ff0:	b127      	cbz	r7, 8005ffc <setvbuf+0x1c>
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	b913      	cbnz	r3, 8005ffc <setvbuf+0x1c>
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	f001 ff1e 	bl	8007e38 <__sinit>
 8005ffc:	4b58      	ldr	r3, [pc, #352]	; (8006160 <setvbuf+0x180>)
 8005ffe:	429c      	cmp	r4, r3
 8006000:	d167      	bne.n	80060d2 <setvbuf+0xf2>
 8006002:	687c      	ldr	r4, [r7, #4]
 8006004:	f1b8 0f02 	cmp.w	r8, #2
 8006008:	d006      	beq.n	8006018 <setvbuf+0x38>
 800600a:	f1b8 0f01 	cmp.w	r8, #1
 800600e:	f200 809f 	bhi.w	8006150 <setvbuf+0x170>
 8006012:	2d00      	cmp	r5, #0
 8006014:	f2c0 809c 	blt.w	8006150 <setvbuf+0x170>
 8006018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800601a:	07db      	lsls	r3, r3, #31
 800601c:	d405      	bmi.n	800602a <setvbuf+0x4a>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	0598      	lsls	r0, r3, #22
 8006022:	d402      	bmi.n	800602a <setvbuf+0x4a>
 8006024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006026:	f002 fb18 	bl	800865a <__retarget_lock_acquire_recursive>
 800602a:	4621      	mov	r1, r4
 800602c:	4638      	mov	r0, r7
 800602e:	f001 fe6f 	bl	8007d10 <_fflush_r>
 8006032:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006034:	b141      	cbz	r1, 8006048 <setvbuf+0x68>
 8006036:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800603a:	4299      	cmp	r1, r3
 800603c:	d002      	beq.n	8006044 <setvbuf+0x64>
 800603e:	4638      	mov	r0, r7
 8006040:	f003 f872 	bl	8009128 <_free_r>
 8006044:	2300      	movs	r3, #0
 8006046:	6363      	str	r3, [r4, #52]	; 0x34
 8006048:	2300      	movs	r3, #0
 800604a:	61a3      	str	r3, [r4, #24]
 800604c:	6063      	str	r3, [r4, #4]
 800604e:	89a3      	ldrh	r3, [r4, #12]
 8006050:	0619      	lsls	r1, r3, #24
 8006052:	d503      	bpl.n	800605c <setvbuf+0x7c>
 8006054:	6921      	ldr	r1, [r4, #16]
 8006056:	4638      	mov	r0, r7
 8006058:	f003 f866 	bl	8009128 <_free_r>
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	f1b8 0f02 	cmp.w	r8, #2
 800606a:	81a3      	strh	r3, [r4, #12]
 800606c:	d06c      	beq.n	8006148 <setvbuf+0x168>
 800606e:	ab01      	add	r3, sp, #4
 8006070:	466a      	mov	r2, sp
 8006072:	4621      	mov	r1, r4
 8006074:	4638      	mov	r0, r7
 8006076:	f002 faf2 	bl	800865e <__swhatbuf_r>
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	4318      	orrs	r0, r3
 800607e:	81a0      	strh	r0, [r4, #12]
 8006080:	2d00      	cmp	r5, #0
 8006082:	d130      	bne.n	80060e6 <setvbuf+0x106>
 8006084:	9d00      	ldr	r5, [sp, #0]
 8006086:	4628      	mov	r0, r5
 8006088:	f002 fb4e 	bl	8008728 <malloc>
 800608c:	4606      	mov	r6, r0
 800608e:	2800      	cmp	r0, #0
 8006090:	d155      	bne.n	800613e <setvbuf+0x15e>
 8006092:	f8dd 9000 	ldr.w	r9, [sp]
 8006096:	45a9      	cmp	r9, r5
 8006098:	d14a      	bne.n	8006130 <setvbuf+0x150>
 800609a:	f04f 35ff 	mov.w	r5, #4294967295
 800609e:	2200      	movs	r2, #0
 80060a0:	60a2      	str	r2, [r4, #8]
 80060a2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80060a6:	6022      	str	r2, [r4, #0]
 80060a8:	6122      	str	r2, [r4, #16]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060b0:	6162      	str	r2, [r4, #20]
 80060b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060b4:	f043 0302 	orr.w	r3, r3, #2
 80060b8:	07d2      	lsls	r2, r2, #31
 80060ba:	81a3      	strh	r3, [r4, #12]
 80060bc:	d405      	bmi.n	80060ca <setvbuf+0xea>
 80060be:	f413 7f00 	tst.w	r3, #512	; 0x200
 80060c2:	d102      	bne.n	80060ca <setvbuf+0xea>
 80060c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060c6:	f002 fac9 	bl	800865c <__retarget_lock_release_recursive>
 80060ca:	4628      	mov	r0, r5
 80060cc:	b003      	add	sp, #12
 80060ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060d2:	4b24      	ldr	r3, [pc, #144]	; (8006164 <setvbuf+0x184>)
 80060d4:	429c      	cmp	r4, r3
 80060d6:	d101      	bne.n	80060dc <setvbuf+0xfc>
 80060d8:	68bc      	ldr	r4, [r7, #8]
 80060da:	e793      	b.n	8006004 <setvbuf+0x24>
 80060dc:	4b22      	ldr	r3, [pc, #136]	; (8006168 <setvbuf+0x188>)
 80060de:	429c      	cmp	r4, r3
 80060e0:	bf08      	it	eq
 80060e2:	68fc      	ldreq	r4, [r7, #12]
 80060e4:	e78e      	b.n	8006004 <setvbuf+0x24>
 80060e6:	2e00      	cmp	r6, #0
 80060e8:	d0cd      	beq.n	8006086 <setvbuf+0xa6>
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	b913      	cbnz	r3, 80060f4 <setvbuf+0x114>
 80060ee:	4638      	mov	r0, r7
 80060f0:	f001 fea2 	bl	8007e38 <__sinit>
 80060f4:	f1b8 0f01 	cmp.w	r8, #1
 80060f8:	bf08      	it	eq
 80060fa:	89a3      	ldrheq	r3, [r4, #12]
 80060fc:	6026      	str	r6, [r4, #0]
 80060fe:	bf04      	itt	eq
 8006100:	f043 0301 	orreq.w	r3, r3, #1
 8006104:	81a3      	strheq	r3, [r4, #12]
 8006106:	89a2      	ldrh	r2, [r4, #12]
 8006108:	f012 0308 	ands.w	r3, r2, #8
 800610c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006110:	d01c      	beq.n	800614c <setvbuf+0x16c>
 8006112:	07d3      	lsls	r3, r2, #31
 8006114:	bf41      	itttt	mi
 8006116:	2300      	movmi	r3, #0
 8006118:	426d      	negmi	r5, r5
 800611a:	60a3      	strmi	r3, [r4, #8]
 800611c:	61a5      	strmi	r5, [r4, #24]
 800611e:	bf58      	it	pl
 8006120:	60a5      	strpl	r5, [r4, #8]
 8006122:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006124:	f015 0501 	ands.w	r5, r5, #1
 8006128:	d115      	bne.n	8006156 <setvbuf+0x176>
 800612a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800612e:	e7c8      	b.n	80060c2 <setvbuf+0xe2>
 8006130:	4648      	mov	r0, r9
 8006132:	f002 faf9 	bl	8008728 <malloc>
 8006136:	4606      	mov	r6, r0
 8006138:	2800      	cmp	r0, #0
 800613a:	d0ae      	beq.n	800609a <setvbuf+0xba>
 800613c:	464d      	mov	r5, r9
 800613e:	89a3      	ldrh	r3, [r4, #12]
 8006140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006144:	81a3      	strh	r3, [r4, #12]
 8006146:	e7d0      	b.n	80060ea <setvbuf+0x10a>
 8006148:	2500      	movs	r5, #0
 800614a:	e7a8      	b.n	800609e <setvbuf+0xbe>
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	e7e8      	b.n	8006122 <setvbuf+0x142>
 8006150:	f04f 35ff 	mov.w	r5, #4294967295
 8006154:	e7b9      	b.n	80060ca <setvbuf+0xea>
 8006156:	2500      	movs	r5, #0
 8006158:	e7b7      	b.n	80060ca <setvbuf+0xea>
 800615a:	bf00      	nop
 800615c:	2000000c 	.word	0x2000000c
 8006160:	0800a404 	.word	0x0800a404
 8006164:	0800a424 	.word	0x0800a424
 8006168:	0800a3e4 	.word	0x0800a3e4

0800616c <nanf>:
 800616c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006174 <nanf+0x8>
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	7fc00000 	.word	0x7fc00000

08006178 <siprintf>:
 8006178:	b40e      	push	{r1, r2, r3}
 800617a:	b500      	push	{lr}
 800617c:	b09c      	sub	sp, #112	; 0x70
 800617e:	ab1d      	add	r3, sp, #116	; 0x74
 8006180:	9002      	str	r0, [sp, #8]
 8006182:	9006      	str	r0, [sp, #24]
 8006184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006188:	4809      	ldr	r0, [pc, #36]	; (80061b0 <siprintf+0x38>)
 800618a:	9107      	str	r1, [sp, #28]
 800618c:	9104      	str	r1, [sp, #16]
 800618e:	4909      	ldr	r1, [pc, #36]	; (80061b4 <siprintf+0x3c>)
 8006190:	f853 2b04 	ldr.w	r2, [r3], #4
 8006194:	9105      	str	r1, [sp, #20]
 8006196:	6800      	ldr	r0, [r0, #0]
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	a902      	add	r1, sp, #8
 800619c:	f003 f900 	bl	80093a0 <_svfiprintf_r>
 80061a0:	9b02      	ldr	r3, [sp, #8]
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	b01c      	add	sp, #112	; 0x70
 80061a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061ac:	b003      	add	sp, #12
 80061ae:	4770      	bx	lr
 80061b0:	2000000c 	.word	0x2000000c
 80061b4:	ffff0208 	.word	0xffff0208

080061b8 <sulp>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4604      	mov	r4, r0
 80061bc:	460d      	mov	r5, r1
 80061be:	ec45 4b10 	vmov	d0, r4, r5
 80061c2:	4616      	mov	r6, r2
 80061c4:	f002 fe4a 	bl	8008e5c <__ulp>
 80061c8:	ec51 0b10 	vmov	r0, r1, d0
 80061cc:	b17e      	cbz	r6, 80061ee <sulp+0x36>
 80061ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80061d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dd09      	ble.n	80061ee <sulp+0x36>
 80061da:	051b      	lsls	r3, r3, #20
 80061dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80061e0:	2400      	movs	r4, #0
 80061e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80061e6:	4622      	mov	r2, r4
 80061e8:	462b      	mov	r3, r5
 80061ea:	f7fa fa25 	bl	8000638 <__aeabi_dmul>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}

080061f0 <_strtod_l>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	ed2d 8b02 	vpush	{d8}
 80061f8:	b09d      	sub	sp, #116	; 0x74
 80061fa:	461f      	mov	r7, r3
 80061fc:	2300      	movs	r3, #0
 80061fe:	9318      	str	r3, [sp, #96]	; 0x60
 8006200:	4ba2      	ldr	r3, [pc, #648]	; (800648c <_strtod_l+0x29c>)
 8006202:	9213      	str	r2, [sp, #76]	; 0x4c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	9305      	str	r3, [sp, #20]
 8006208:	4604      	mov	r4, r0
 800620a:	4618      	mov	r0, r3
 800620c:	4688      	mov	r8, r1
 800620e:	f7f9 ffff 	bl	8000210 <strlen>
 8006212:	f04f 0a00 	mov.w	sl, #0
 8006216:	4605      	mov	r5, r0
 8006218:	f04f 0b00 	mov.w	fp, #0
 800621c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	2a2b      	cmp	r2, #43	; 0x2b
 8006226:	d04e      	beq.n	80062c6 <_strtod_l+0xd6>
 8006228:	d83b      	bhi.n	80062a2 <_strtod_l+0xb2>
 800622a:	2a0d      	cmp	r2, #13
 800622c:	d834      	bhi.n	8006298 <_strtod_l+0xa8>
 800622e:	2a08      	cmp	r2, #8
 8006230:	d834      	bhi.n	800629c <_strtod_l+0xac>
 8006232:	2a00      	cmp	r2, #0
 8006234:	d03e      	beq.n	80062b4 <_strtod_l+0xc4>
 8006236:	2300      	movs	r3, #0
 8006238:	930a      	str	r3, [sp, #40]	; 0x28
 800623a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800623c:	7833      	ldrb	r3, [r6, #0]
 800623e:	2b30      	cmp	r3, #48	; 0x30
 8006240:	f040 80b0 	bne.w	80063a4 <_strtod_l+0x1b4>
 8006244:	7873      	ldrb	r3, [r6, #1]
 8006246:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800624a:	2b58      	cmp	r3, #88	; 0x58
 800624c:	d168      	bne.n	8006320 <_strtod_l+0x130>
 800624e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	ab18      	add	r3, sp, #96	; 0x60
 8006254:	9702      	str	r7, [sp, #8]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	4a8d      	ldr	r2, [pc, #564]	; (8006490 <_strtod_l+0x2a0>)
 800625a:	ab19      	add	r3, sp, #100	; 0x64
 800625c:	a917      	add	r1, sp, #92	; 0x5c
 800625e:	4620      	mov	r0, r4
 8006260:	f001 feee 	bl	8008040 <__gethex>
 8006264:	f010 0707 	ands.w	r7, r0, #7
 8006268:	4605      	mov	r5, r0
 800626a:	d005      	beq.n	8006278 <_strtod_l+0x88>
 800626c:	2f06      	cmp	r7, #6
 800626e:	d12c      	bne.n	80062ca <_strtod_l+0xda>
 8006270:	3601      	adds	r6, #1
 8006272:	2300      	movs	r3, #0
 8006274:	9617      	str	r6, [sp, #92]	; 0x5c
 8006276:	930a      	str	r3, [sp, #40]	; 0x28
 8006278:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 8590 	bne.w	8006da0 <_strtod_l+0xbb0>
 8006280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006282:	b1eb      	cbz	r3, 80062c0 <_strtod_l+0xd0>
 8006284:	4652      	mov	r2, sl
 8006286:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800628a:	ec43 2b10 	vmov	d0, r2, r3
 800628e:	b01d      	add	sp, #116	; 0x74
 8006290:	ecbd 8b02 	vpop	{d8}
 8006294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006298:	2a20      	cmp	r2, #32
 800629a:	d1cc      	bne.n	8006236 <_strtod_l+0x46>
 800629c:	3301      	adds	r3, #1
 800629e:	9317      	str	r3, [sp, #92]	; 0x5c
 80062a0:	e7be      	b.n	8006220 <_strtod_l+0x30>
 80062a2:	2a2d      	cmp	r2, #45	; 0x2d
 80062a4:	d1c7      	bne.n	8006236 <_strtod_l+0x46>
 80062a6:	2201      	movs	r2, #1
 80062a8:	920a      	str	r2, [sp, #40]	; 0x28
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80062ae:	785b      	ldrb	r3, [r3, #1]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1c2      	bne.n	800623a <_strtod_l+0x4a>
 80062b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 856e 	bne.w	8006d9c <_strtod_l+0xbac>
 80062c0:	4652      	mov	r2, sl
 80062c2:	465b      	mov	r3, fp
 80062c4:	e7e1      	b.n	800628a <_strtod_l+0x9a>
 80062c6:	2200      	movs	r2, #0
 80062c8:	e7ee      	b.n	80062a8 <_strtod_l+0xb8>
 80062ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80062cc:	b13a      	cbz	r2, 80062de <_strtod_l+0xee>
 80062ce:	2135      	movs	r1, #53	; 0x35
 80062d0:	a81a      	add	r0, sp, #104	; 0x68
 80062d2:	f002 fece 	bl	8009072 <__copybits>
 80062d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062d8:	4620      	mov	r0, r4
 80062da:	f002 fa8d 	bl	80087f8 <_Bfree>
 80062de:	3f01      	subs	r7, #1
 80062e0:	2f04      	cmp	r7, #4
 80062e2:	d806      	bhi.n	80062f2 <_strtod_l+0x102>
 80062e4:	e8df f007 	tbb	[pc, r7]
 80062e8:	1714030a 	.word	0x1714030a
 80062ec:	0a          	.byte	0x0a
 80062ed:	00          	.byte	0x00
 80062ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80062f2:	0728      	lsls	r0, r5, #28
 80062f4:	d5c0      	bpl.n	8006278 <_strtod_l+0x88>
 80062f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80062fa:	e7bd      	b.n	8006278 <_strtod_l+0x88>
 80062fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006300:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006302:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006306:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800630a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800630e:	e7f0      	b.n	80062f2 <_strtod_l+0x102>
 8006310:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006494 <_strtod_l+0x2a4>
 8006314:	e7ed      	b.n	80062f2 <_strtod_l+0x102>
 8006316:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800631a:	f04f 3aff 	mov.w	sl, #4294967295
 800631e:	e7e8      	b.n	80062f2 <_strtod_l+0x102>
 8006320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	9217      	str	r2, [sp, #92]	; 0x5c
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b30      	cmp	r3, #48	; 0x30
 800632a:	d0f9      	beq.n	8006320 <_strtod_l+0x130>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0a3      	beq.n	8006278 <_strtod_l+0x88>
 8006330:	2301      	movs	r3, #1
 8006332:	f04f 0900 	mov.w	r9, #0
 8006336:	9304      	str	r3, [sp, #16]
 8006338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800633a:	9308      	str	r3, [sp, #32]
 800633c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006340:	464f      	mov	r7, r9
 8006342:	220a      	movs	r2, #10
 8006344:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006346:	7806      	ldrb	r6, [r0, #0]
 8006348:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800634c:	b2d9      	uxtb	r1, r3
 800634e:	2909      	cmp	r1, #9
 8006350:	d92a      	bls.n	80063a8 <_strtod_l+0x1b8>
 8006352:	9905      	ldr	r1, [sp, #20]
 8006354:	462a      	mov	r2, r5
 8006356:	f003 fada 	bl	800990e <strncmp>
 800635a:	b398      	cbz	r0, 80063c4 <_strtod_l+0x1d4>
 800635c:	2000      	movs	r0, #0
 800635e:	4632      	mov	r2, r6
 8006360:	463d      	mov	r5, r7
 8006362:	9005      	str	r0, [sp, #20]
 8006364:	4603      	mov	r3, r0
 8006366:	2a65      	cmp	r2, #101	; 0x65
 8006368:	d001      	beq.n	800636e <_strtod_l+0x17e>
 800636a:	2a45      	cmp	r2, #69	; 0x45
 800636c:	d118      	bne.n	80063a0 <_strtod_l+0x1b0>
 800636e:	b91d      	cbnz	r5, 8006378 <_strtod_l+0x188>
 8006370:	9a04      	ldr	r2, [sp, #16]
 8006372:	4302      	orrs	r2, r0
 8006374:	d09e      	beq.n	80062b4 <_strtod_l+0xc4>
 8006376:	2500      	movs	r5, #0
 8006378:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800637c:	f108 0201 	add.w	r2, r8, #1
 8006380:	9217      	str	r2, [sp, #92]	; 0x5c
 8006382:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006386:	2a2b      	cmp	r2, #43	; 0x2b
 8006388:	d075      	beq.n	8006476 <_strtod_l+0x286>
 800638a:	2a2d      	cmp	r2, #45	; 0x2d
 800638c:	d07b      	beq.n	8006486 <_strtod_l+0x296>
 800638e:	f04f 0c00 	mov.w	ip, #0
 8006392:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006396:	2909      	cmp	r1, #9
 8006398:	f240 8082 	bls.w	80064a0 <_strtod_l+0x2b0>
 800639c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80063a0:	2600      	movs	r6, #0
 80063a2:	e09d      	b.n	80064e0 <_strtod_l+0x2f0>
 80063a4:	2300      	movs	r3, #0
 80063a6:	e7c4      	b.n	8006332 <_strtod_l+0x142>
 80063a8:	2f08      	cmp	r7, #8
 80063aa:	bfd8      	it	le
 80063ac:	9907      	ldrle	r1, [sp, #28]
 80063ae:	f100 0001 	add.w	r0, r0, #1
 80063b2:	bfda      	itte	le
 80063b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80063b8:	9307      	strle	r3, [sp, #28]
 80063ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 80063be:	3701      	adds	r7, #1
 80063c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80063c2:	e7bf      	b.n	8006344 <_strtod_l+0x154>
 80063c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063c6:	195a      	adds	r2, r3, r5
 80063c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80063ca:	5d5a      	ldrb	r2, [r3, r5]
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	d037      	beq.n	8006440 <_strtod_l+0x250>
 80063d0:	9005      	str	r0, [sp, #20]
 80063d2:	463d      	mov	r5, r7
 80063d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80063d8:	2b09      	cmp	r3, #9
 80063da:	d912      	bls.n	8006402 <_strtod_l+0x212>
 80063dc:	2301      	movs	r3, #1
 80063de:	e7c2      	b.n	8006366 <_strtod_l+0x176>
 80063e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80063e6:	785a      	ldrb	r2, [r3, #1]
 80063e8:	3001      	adds	r0, #1
 80063ea:	2a30      	cmp	r2, #48	; 0x30
 80063ec:	d0f8      	beq.n	80063e0 <_strtod_l+0x1f0>
 80063ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	f200 84d9 	bhi.w	8006daa <_strtod_l+0xbba>
 80063f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063fa:	9005      	str	r0, [sp, #20]
 80063fc:	2000      	movs	r0, #0
 80063fe:	9308      	str	r3, [sp, #32]
 8006400:	4605      	mov	r5, r0
 8006402:	3a30      	subs	r2, #48	; 0x30
 8006404:	f100 0301 	add.w	r3, r0, #1
 8006408:	d014      	beq.n	8006434 <_strtod_l+0x244>
 800640a:	9905      	ldr	r1, [sp, #20]
 800640c:	4419      	add	r1, r3
 800640e:	9105      	str	r1, [sp, #20]
 8006410:	462b      	mov	r3, r5
 8006412:	eb00 0e05 	add.w	lr, r0, r5
 8006416:	210a      	movs	r1, #10
 8006418:	4573      	cmp	r3, lr
 800641a:	d113      	bne.n	8006444 <_strtod_l+0x254>
 800641c:	182b      	adds	r3, r5, r0
 800641e:	2b08      	cmp	r3, #8
 8006420:	f105 0501 	add.w	r5, r5, #1
 8006424:	4405      	add	r5, r0
 8006426:	dc1c      	bgt.n	8006462 <_strtod_l+0x272>
 8006428:	9907      	ldr	r1, [sp, #28]
 800642a:	230a      	movs	r3, #10
 800642c:	fb03 2301 	mla	r3, r3, r1, r2
 8006430:	9307      	str	r3, [sp, #28]
 8006432:	2300      	movs	r3, #0
 8006434:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006436:	1c51      	adds	r1, r2, #1
 8006438:	9117      	str	r1, [sp, #92]	; 0x5c
 800643a:	7852      	ldrb	r2, [r2, #1]
 800643c:	4618      	mov	r0, r3
 800643e:	e7c9      	b.n	80063d4 <_strtod_l+0x1e4>
 8006440:	4638      	mov	r0, r7
 8006442:	e7d2      	b.n	80063ea <_strtod_l+0x1fa>
 8006444:	2b08      	cmp	r3, #8
 8006446:	dc04      	bgt.n	8006452 <_strtod_l+0x262>
 8006448:	9e07      	ldr	r6, [sp, #28]
 800644a:	434e      	muls	r6, r1
 800644c:	9607      	str	r6, [sp, #28]
 800644e:	3301      	adds	r3, #1
 8006450:	e7e2      	b.n	8006418 <_strtod_l+0x228>
 8006452:	f103 0c01 	add.w	ip, r3, #1
 8006456:	f1bc 0f10 	cmp.w	ip, #16
 800645a:	bfd8      	it	le
 800645c:	fb01 f909 	mulle.w	r9, r1, r9
 8006460:	e7f5      	b.n	800644e <_strtod_l+0x25e>
 8006462:	2d10      	cmp	r5, #16
 8006464:	bfdc      	itt	le
 8006466:	230a      	movle	r3, #10
 8006468:	fb03 2909 	mlale	r9, r3, r9, r2
 800646c:	e7e1      	b.n	8006432 <_strtod_l+0x242>
 800646e:	2300      	movs	r3, #0
 8006470:	9305      	str	r3, [sp, #20]
 8006472:	2301      	movs	r3, #1
 8006474:	e77c      	b.n	8006370 <_strtod_l+0x180>
 8006476:	f04f 0c00 	mov.w	ip, #0
 800647a:	f108 0202 	add.w	r2, r8, #2
 800647e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006480:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006484:	e785      	b.n	8006392 <_strtod_l+0x1a2>
 8006486:	f04f 0c01 	mov.w	ip, #1
 800648a:	e7f6      	b.n	800647a <_strtod_l+0x28a>
 800648c:	0800a4ac 	.word	0x0800a4ac
 8006490:	0800a200 	.word	0x0800a200
 8006494:	7ff00000 	.word	0x7ff00000
 8006498:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800649a:	1c51      	adds	r1, r2, #1
 800649c:	9117      	str	r1, [sp, #92]	; 0x5c
 800649e:	7852      	ldrb	r2, [r2, #1]
 80064a0:	2a30      	cmp	r2, #48	; 0x30
 80064a2:	d0f9      	beq.n	8006498 <_strtod_l+0x2a8>
 80064a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80064a8:	2908      	cmp	r1, #8
 80064aa:	f63f af79 	bhi.w	80063a0 <_strtod_l+0x1b0>
 80064ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80064b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064b4:	9206      	str	r2, [sp, #24]
 80064b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064b8:	1c51      	adds	r1, r2, #1
 80064ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80064bc:	7852      	ldrb	r2, [r2, #1]
 80064be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80064c2:	2e09      	cmp	r6, #9
 80064c4:	d937      	bls.n	8006536 <_strtod_l+0x346>
 80064c6:	9e06      	ldr	r6, [sp, #24]
 80064c8:	1b89      	subs	r1, r1, r6
 80064ca:	2908      	cmp	r1, #8
 80064cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80064d0:	dc02      	bgt.n	80064d8 <_strtod_l+0x2e8>
 80064d2:	4576      	cmp	r6, lr
 80064d4:	bfa8      	it	ge
 80064d6:	4676      	movge	r6, lr
 80064d8:	f1bc 0f00 	cmp.w	ip, #0
 80064dc:	d000      	beq.n	80064e0 <_strtod_l+0x2f0>
 80064de:	4276      	negs	r6, r6
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	d14d      	bne.n	8006580 <_strtod_l+0x390>
 80064e4:	9904      	ldr	r1, [sp, #16]
 80064e6:	4301      	orrs	r1, r0
 80064e8:	f47f aec6 	bne.w	8006278 <_strtod_l+0x88>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f47f aee1 	bne.w	80062b4 <_strtod_l+0xc4>
 80064f2:	2a69      	cmp	r2, #105	; 0x69
 80064f4:	d027      	beq.n	8006546 <_strtod_l+0x356>
 80064f6:	dc24      	bgt.n	8006542 <_strtod_l+0x352>
 80064f8:	2a49      	cmp	r2, #73	; 0x49
 80064fa:	d024      	beq.n	8006546 <_strtod_l+0x356>
 80064fc:	2a4e      	cmp	r2, #78	; 0x4e
 80064fe:	f47f aed9 	bne.w	80062b4 <_strtod_l+0xc4>
 8006502:	499f      	ldr	r1, [pc, #636]	; (8006780 <_strtod_l+0x590>)
 8006504:	a817      	add	r0, sp, #92	; 0x5c
 8006506:	f001 fff3 	bl	80084f0 <__match>
 800650a:	2800      	cmp	r0, #0
 800650c:	f43f aed2 	beq.w	80062b4 <_strtod_l+0xc4>
 8006510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b28      	cmp	r3, #40	; 0x28
 8006516:	d12d      	bne.n	8006574 <_strtod_l+0x384>
 8006518:	499a      	ldr	r1, [pc, #616]	; (8006784 <_strtod_l+0x594>)
 800651a:	aa1a      	add	r2, sp, #104	; 0x68
 800651c:	a817      	add	r0, sp, #92	; 0x5c
 800651e:	f001 fffb 	bl	8008518 <__hexnan>
 8006522:	2805      	cmp	r0, #5
 8006524:	d126      	bne.n	8006574 <_strtod_l+0x384>
 8006526:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006528:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800652c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006530:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006534:	e6a0      	b.n	8006278 <_strtod_l+0x88>
 8006536:	210a      	movs	r1, #10
 8006538:	fb01 2e0e 	mla	lr, r1, lr, r2
 800653c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006540:	e7b9      	b.n	80064b6 <_strtod_l+0x2c6>
 8006542:	2a6e      	cmp	r2, #110	; 0x6e
 8006544:	e7db      	b.n	80064fe <_strtod_l+0x30e>
 8006546:	4990      	ldr	r1, [pc, #576]	; (8006788 <_strtod_l+0x598>)
 8006548:	a817      	add	r0, sp, #92	; 0x5c
 800654a:	f001 ffd1 	bl	80084f0 <__match>
 800654e:	2800      	cmp	r0, #0
 8006550:	f43f aeb0 	beq.w	80062b4 <_strtod_l+0xc4>
 8006554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006556:	498d      	ldr	r1, [pc, #564]	; (800678c <_strtod_l+0x59c>)
 8006558:	3b01      	subs	r3, #1
 800655a:	a817      	add	r0, sp, #92	; 0x5c
 800655c:	9317      	str	r3, [sp, #92]	; 0x5c
 800655e:	f001 ffc7 	bl	80084f0 <__match>
 8006562:	b910      	cbnz	r0, 800656a <_strtod_l+0x37a>
 8006564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006566:	3301      	adds	r3, #1
 8006568:	9317      	str	r3, [sp, #92]	; 0x5c
 800656a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800679c <_strtod_l+0x5ac>
 800656e:	f04f 0a00 	mov.w	sl, #0
 8006572:	e681      	b.n	8006278 <_strtod_l+0x88>
 8006574:	4886      	ldr	r0, [pc, #536]	; (8006790 <_strtod_l+0x5a0>)
 8006576:	f003 f96f 	bl	8009858 <nan>
 800657a:	ec5b ab10 	vmov	sl, fp, d0
 800657e:	e67b      	b.n	8006278 <_strtod_l+0x88>
 8006580:	9b05      	ldr	r3, [sp, #20]
 8006582:	9807      	ldr	r0, [sp, #28]
 8006584:	1af3      	subs	r3, r6, r3
 8006586:	2f00      	cmp	r7, #0
 8006588:	bf08      	it	eq
 800658a:	462f      	moveq	r7, r5
 800658c:	2d10      	cmp	r5, #16
 800658e:	9306      	str	r3, [sp, #24]
 8006590:	46a8      	mov	r8, r5
 8006592:	bfa8      	it	ge
 8006594:	f04f 0810 	movge.w	r8, #16
 8006598:	f7f9 ffd4 	bl	8000544 <__aeabi_ui2d>
 800659c:	2d09      	cmp	r5, #9
 800659e:	4682      	mov	sl, r0
 80065a0:	468b      	mov	fp, r1
 80065a2:	dd13      	ble.n	80065cc <_strtod_l+0x3dc>
 80065a4:	4b7b      	ldr	r3, [pc, #492]	; (8006794 <_strtod_l+0x5a4>)
 80065a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80065aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80065ae:	f7fa f843 	bl	8000638 <__aeabi_dmul>
 80065b2:	4682      	mov	sl, r0
 80065b4:	4648      	mov	r0, r9
 80065b6:	468b      	mov	fp, r1
 80065b8:	f7f9 ffc4 	bl	8000544 <__aeabi_ui2d>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4650      	mov	r0, sl
 80065c2:	4659      	mov	r1, fp
 80065c4:	f7f9 fe82 	bl	80002cc <__adddf3>
 80065c8:	4682      	mov	sl, r0
 80065ca:	468b      	mov	fp, r1
 80065cc:	2d0f      	cmp	r5, #15
 80065ce:	dc38      	bgt.n	8006642 <_strtod_l+0x452>
 80065d0:	9b06      	ldr	r3, [sp, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f43f ae50 	beq.w	8006278 <_strtod_l+0x88>
 80065d8:	dd24      	ble.n	8006624 <_strtod_l+0x434>
 80065da:	2b16      	cmp	r3, #22
 80065dc:	dc0b      	bgt.n	80065f6 <_strtod_l+0x406>
 80065de:	496d      	ldr	r1, [pc, #436]	; (8006794 <_strtod_l+0x5a4>)
 80065e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065e8:	4652      	mov	r2, sl
 80065ea:	465b      	mov	r3, fp
 80065ec:	f7fa f824 	bl	8000638 <__aeabi_dmul>
 80065f0:	4682      	mov	sl, r0
 80065f2:	468b      	mov	fp, r1
 80065f4:	e640      	b.n	8006278 <_strtod_l+0x88>
 80065f6:	9a06      	ldr	r2, [sp, #24]
 80065f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80065fc:	4293      	cmp	r3, r2
 80065fe:	db20      	blt.n	8006642 <_strtod_l+0x452>
 8006600:	4c64      	ldr	r4, [pc, #400]	; (8006794 <_strtod_l+0x5a4>)
 8006602:	f1c5 050f 	rsb	r5, r5, #15
 8006606:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800660a:	4652      	mov	r2, sl
 800660c:	465b      	mov	r3, fp
 800660e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006612:	f7fa f811 	bl	8000638 <__aeabi_dmul>
 8006616:	9b06      	ldr	r3, [sp, #24]
 8006618:	1b5d      	subs	r5, r3, r5
 800661a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800661e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006622:	e7e3      	b.n	80065ec <_strtod_l+0x3fc>
 8006624:	9b06      	ldr	r3, [sp, #24]
 8006626:	3316      	adds	r3, #22
 8006628:	db0b      	blt.n	8006642 <_strtod_l+0x452>
 800662a:	9b05      	ldr	r3, [sp, #20]
 800662c:	1b9e      	subs	r6, r3, r6
 800662e:	4b59      	ldr	r3, [pc, #356]	; (8006794 <_strtod_l+0x5a4>)
 8006630:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006634:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006638:	4650      	mov	r0, sl
 800663a:	4659      	mov	r1, fp
 800663c:	f7fa f926 	bl	800088c <__aeabi_ddiv>
 8006640:	e7d6      	b.n	80065f0 <_strtod_l+0x400>
 8006642:	9b06      	ldr	r3, [sp, #24]
 8006644:	eba5 0808 	sub.w	r8, r5, r8
 8006648:	4498      	add	r8, r3
 800664a:	f1b8 0f00 	cmp.w	r8, #0
 800664e:	dd74      	ble.n	800673a <_strtod_l+0x54a>
 8006650:	f018 030f 	ands.w	r3, r8, #15
 8006654:	d00a      	beq.n	800666c <_strtod_l+0x47c>
 8006656:	494f      	ldr	r1, [pc, #316]	; (8006794 <_strtod_l+0x5a4>)
 8006658:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800665c:	4652      	mov	r2, sl
 800665e:	465b      	mov	r3, fp
 8006660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006664:	f7f9 ffe8 	bl	8000638 <__aeabi_dmul>
 8006668:	4682      	mov	sl, r0
 800666a:	468b      	mov	fp, r1
 800666c:	f038 080f 	bics.w	r8, r8, #15
 8006670:	d04f      	beq.n	8006712 <_strtod_l+0x522>
 8006672:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006676:	dd22      	ble.n	80066be <_strtod_l+0x4ce>
 8006678:	2500      	movs	r5, #0
 800667a:	462e      	mov	r6, r5
 800667c:	9507      	str	r5, [sp, #28]
 800667e:	9505      	str	r5, [sp, #20]
 8006680:	2322      	movs	r3, #34	; 0x22
 8006682:	f8df b118 	ldr.w	fp, [pc, #280]	; 800679c <_strtod_l+0x5ac>
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	f04f 0a00 	mov.w	sl, #0
 800668c:	9b07      	ldr	r3, [sp, #28]
 800668e:	2b00      	cmp	r3, #0
 8006690:	f43f adf2 	beq.w	8006278 <_strtod_l+0x88>
 8006694:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006696:	4620      	mov	r0, r4
 8006698:	f002 f8ae 	bl	80087f8 <_Bfree>
 800669c:	9905      	ldr	r1, [sp, #20]
 800669e:	4620      	mov	r0, r4
 80066a0:	f002 f8aa 	bl	80087f8 <_Bfree>
 80066a4:	4631      	mov	r1, r6
 80066a6:	4620      	mov	r0, r4
 80066a8:	f002 f8a6 	bl	80087f8 <_Bfree>
 80066ac:	9907      	ldr	r1, [sp, #28]
 80066ae:	4620      	mov	r0, r4
 80066b0:	f002 f8a2 	bl	80087f8 <_Bfree>
 80066b4:	4629      	mov	r1, r5
 80066b6:	4620      	mov	r0, r4
 80066b8:	f002 f89e 	bl	80087f8 <_Bfree>
 80066bc:	e5dc      	b.n	8006278 <_strtod_l+0x88>
 80066be:	4b36      	ldr	r3, [pc, #216]	; (8006798 <_strtod_l+0x5a8>)
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	2300      	movs	r3, #0
 80066c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80066c8:	4650      	mov	r0, sl
 80066ca:	4659      	mov	r1, fp
 80066cc:	4699      	mov	r9, r3
 80066ce:	f1b8 0f01 	cmp.w	r8, #1
 80066d2:	dc21      	bgt.n	8006718 <_strtod_l+0x528>
 80066d4:	b10b      	cbz	r3, 80066da <_strtod_l+0x4ea>
 80066d6:	4682      	mov	sl, r0
 80066d8:	468b      	mov	fp, r1
 80066da:	4b2f      	ldr	r3, [pc, #188]	; (8006798 <_strtod_l+0x5a8>)
 80066dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80066e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80066e4:	4652      	mov	r2, sl
 80066e6:	465b      	mov	r3, fp
 80066e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80066ec:	f7f9 ffa4 	bl	8000638 <__aeabi_dmul>
 80066f0:	4b2a      	ldr	r3, [pc, #168]	; (800679c <_strtod_l+0x5ac>)
 80066f2:	460a      	mov	r2, r1
 80066f4:	400b      	ands	r3, r1
 80066f6:	492a      	ldr	r1, [pc, #168]	; (80067a0 <_strtod_l+0x5b0>)
 80066f8:	428b      	cmp	r3, r1
 80066fa:	4682      	mov	sl, r0
 80066fc:	d8bc      	bhi.n	8006678 <_strtod_l+0x488>
 80066fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006702:	428b      	cmp	r3, r1
 8006704:	bf86      	itte	hi
 8006706:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80067a4 <_strtod_l+0x5b4>
 800670a:	f04f 3aff 	movhi.w	sl, #4294967295
 800670e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006712:	2300      	movs	r3, #0
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	e084      	b.n	8006822 <_strtod_l+0x632>
 8006718:	f018 0f01 	tst.w	r8, #1
 800671c:	d005      	beq.n	800672a <_strtod_l+0x53a>
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f7f9 ff88 	bl	8000638 <__aeabi_dmul>
 8006728:	2301      	movs	r3, #1
 800672a:	9a04      	ldr	r2, [sp, #16]
 800672c:	3208      	adds	r2, #8
 800672e:	f109 0901 	add.w	r9, r9, #1
 8006732:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006736:	9204      	str	r2, [sp, #16]
 8006738:	e7c9      	b.n	80066ce <_strtod_l+0x4de>
 800673a:	d0ea      	beq.n	8006712 <_strtod_l+0x522>
 800673c:	f1c8 0800 	rsb	r8, r8, #0
 8006740:	f018 020f 	ands.w	r2, r8, #15
 8006744:	d00a      	beq.n	800675c <_strtod_l+0x56c>
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <_strtod_l+0x5a4>)
 8006748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800674c:	4650      	mov	r0, sl
 800674e:	4659      	mov	r1, fp
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7fa f89a 	bl	800088c <__aeabi_ddiv>
 8006758:	4682      	mov	sl, r0
 800675a:	468b      	mov	fp, r1
 800675c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006760:	d0d7      	beq.n	8006712 <_strtod_l+0x522>
 8006762:	f1b8 0f1f 	cmp.w	r8, #31
 8006766:	dd1f      	ble.n	80067a8 <_strtod_l+0x5b8>
 8006768:	2500      	movs	r5, #0
 800676a:	462e      	mov	r6, r5
 800676c:	9507      	str	r5, [sp, #28]
 800676e:	9505      	str	r5, [sp, #20]
 8006770:	2322      	movs	r3, #34	; 0x22
 8006772:	f04f 0a00 	mov.w	sl, #0
 8006776:	f04f 0b00 	mov.w	fp, #0
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	e786      	b.n	800668c <_strtod_l+0x49c>
 800677e:	bf00      	nop
 8006780:	0800a1d1 	.word	0x0800a1d1
 8006784:	0800a214 	.word	0x0800a214
 8006788:	0800a1c9 	.word	0x0800a1c9
 800678c:	0800a354 	.word	0x0800a354
 8006790:	0800a668 	.word	0x0800a668
 8006794:	0800a548 	.word	0x0800a548
 8006798:	0800a520 	.word	0x0800a520
 800679c:	7ff00000 	.word	0x7ff00000
 80067a0:	7ca00000 	.word	0x7ca00000
 80067a4:	7fefffff 	.word	0x7fefffff
 80067a8:	f018 0310 	ands.w	r3, r8, #16
 80067ac:	bf18      	it	ne
 80067ae:	236a      	movne	r3, #106	; 0x6a
 80067b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006b60 <_strtod_l+0x970>
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	4650      	mov	r0, sl
 80067b8:	4659      	mov	r1, fp
 80067ba:	2300      	movs	r3, #0
 80067bc:	f018 0f01 	tst.w	r8, #1
 80067c0:	d004      	beq.n	80067cc <_strtod_l+0x5dc>
 80067c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80067c6:	f7f9 ff37 	bl	8000638 <__aeabi_dmul>
 80067ca:	2301      	movs	r3, #1
 80067cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80067d0:	f109 0908 	add.w	r9, r9, #8
 80067d4:	d1f2      	bne.n	80067bc <_strtod_l+0x5cc>
 80067d6:	b10b      	cbz	r3, 80067dc <_strtod_l+0x5ec>
 80067d8:	4682      	mov	sl, r0
 80067da:	468b      	mov	fp, r1
 80067dc:	9b04      	ldr	r3, [sp, #16]
 80067de:	b1c3      	cbz	r3, 8006812 <_strtod_l+0x622>
 80067e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80067e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	4659      	mov	r1, fp
 80067ec:	dd11      	ble.n	8006812 <_strtod_l+0x622>
 80067ee:	2b1f      	cmp	r3, #31
 80067f0:	f340 8124 	ble.w	8006a3c <_strtod_l+0x84c>
 80067f4:	2b34      	cmp	r3, #52	; 0x34
 80067f6:	bfde      	ittt	le
 80067f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80067fc:	f04f 33ff 	movle.w	r3, #4294967295
 8006800:	fa03 f202 	lslle.w	r2, r3, r2
 8006804:	f04f 0a00 	mov.w	sl, #0
 8006808:	bfcc      	ite	gt
 800680a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800680e:	ea02 0b01 	andle.w	fp, r2, r1
 8006812:	2200      	movs	r2, #0
 8006814:	2300      	movs	r3, #0
 8006816:	4650      	mov	r0, sl
 8006818:	4659      	mov	r1, fp
 800681a:	f7fa f975 	bl	8000b08 <__aeabi_dcmpeq>
 800681e:	2800      	cmp	r0, #0
 8006820:	d1a2      	bne.n	8006768 <_strtod_l+0x578>
 8006822:	9b07      	ldr	r3, [sp, #28]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	9908      	ldr	r1, [sp, #32]
 8006828:	462b      	mov	r3, r5
 800682a:	463a      	mov	r2, r7
 800682c:	4620      	mov	r0, r4
 800682e:	f002 f84b 	bl	80088c8 <__s2b>
 8006832:	9007      	str	r0, [sp, #28]
 8006834:	2800      	cmp	r0, #0
 8006836:	f43f af1f 	beq.w	8006678 <_strtod_l+0x488>
 800683a:	9b05      	ldr	r3, [sp, #20]
 800683c:	1b9e      	subs	r6, r3, r6
 800683e:	9b06      	ldr	r3, [sp, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	bfb4      	ite	lt
 8006844:	4633      	movlt	r3, r6
 8006846:	2300      	movge	r3, #0
 8006848:	930c      	str	r3, [sp, #48]	; 0x30
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	2500      	movs	r5, #0
 800684e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006852:	9312      	str	r3, [sp, #72]	; 0x48
 8006854:	462e      	mov	r6, r5
 8006856:	9b07      	ldr	r3, [sp, #28]
 8006858:	4620      	mov	r0, r4
 800685a:	6859      	ldr	r1, [r3, #4]
 800685c:	f001 ff8c 	bl	8008778 <_Balloc>
 8006860:	9005      	str	r0, [sp, #20]
 8006862:	2800      	cmp	r0, #0
 8006864:	f43f af0c 	beq.w	8006680 <_strtod_l+0x490>
 8006868:	9b07      	ldr	r3, [sp, #28]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	3202      	adds	r2, #2
 800686e:	f103 010c 	add.w	r1, r3, #12
 8006872:	0092      	lsls	r2, r2, #2
 8006874:	300c      	adds	r0, #12
 8006876:	f001 ff71 	bl	800875c <memcpy>
 800687a:	ec4b ab10 	vmov	d0, sl, fp
 800687e:	aa1a      	add	r2, sp, #104	; 0x68
 8006880:	a919      	add	r1, sp, #100	; 0x64
 8006882:	4620      	mov	r0, r4
 8006884:	f002 fb66 	bl	8008f54 <__d2b>
 8006888:	ec4b ab18 	vmov	d8, sl, fp
 800688c:	9018      	str	r0, [sp, #96]	; 0x60
 800688e:	2800      	cmp	r0, #0
 8006890:	f43f aef6 	beq.w	8006680 <_strtod_l+0x490>
 8006894:	2101      	movs	r1, #1
 8006896:	4620      	mov	r0, r4
 8006898:	f002 f8b0 	bl	80089fc <__i2b>
 800689c:	4606      	mov	r6, r0
 800689e:	2800      	cmp	r0, #0
 80068a0:	f43f aeee 	beq.w	8006680 <_strtod_l+0x490>
 80068a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068a6:	9904      	ldr	r1, [sp, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	bfab      	itete	ge
 80068ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80068ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80068b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80068b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80068b6:	bfac      	ite	ge
 80068b8:	eb03 0902 	addge.w	r9, r3, r2
 80068bc:	1ad7      	sublt	r7, r2, r3
 80068be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80068c0:	eba3 0801 	sub.w	r8, r3, r1
 80068c4:	4490      	add	r8, r2
 80068c6:	4ba1      	ldr	r3, [pc, #644]	; (8006b4c <_strtod_l+0x95c>)
 80068c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80068cc:	4598      	cmp	r8, r3
 80068ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80068d2:	f280 80c7 	bge.w	8006a64 <_strtod_l+0x874>
 80068d6:	eba3 0308 	sub.w	r3, r3, r8
 80068da:	2b1f      	cmp	r3, #31
 80068dc:	eba2 0203 	sub.w	r2, r2, r3
 80068e0:	f04f 0101 	mov.w	r1, #1
 80068e4:	f300 80b1 	bgt.w	8006a4a <_strtod_l+0x85a>
 80068e8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ec:	930d      	str	r3, [sp, #52]	; 0x34
 80068ee:	2300      	movs	r3, #0
 80068f0:	9308      	str	r3, [sp, #32]
 80068f2:	eb09 0802 	add.w	r8, r9, r2
 80068f6:	9b04      	ldr	r3, [sp, #16]
 80068f8:	45c1      	cmp	r9, r8
 80068fa:	4417      	add	r7, r2
 80068fc:	441f      	add	r7, r3
 80068fe:	464b      	mov	r3, r9
 8006900:	bfa8      	it	ge
 8006902:	4643      	movge	r3, r8
 8006904:	42bb      	cmp	r3, r7
 8006906:	bfa8      	it	ge
 8006908:	463b      	movge	r3, r7
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfc2      	ittt	gt
 800690e:	eba8 0803 	subgt.w	r8, r8, r3
 8006912:	1aff      	subgt	r7, r7, r3
 8006914:	eba9 0903 	subgt.w	r9, r9, r3
 8006918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800691a:	2b00      	cmp	r3, #0
 800691c:	dd17      	ble.n	800694e <_strtod_l+0x75e>
 800691e:	4631      	mov	r1, r6
 8006920:	461a      	mov	r2, r3
 8006922:	4620      	mov	r0, r4
 8006924:	f002 f92a 	bl	8008b7c <__pow5mult>
 8006928:	4606      	mov	r6, r0
 800692a:	2800      	cmp	r0, #0
 800692c:	f43f aea8 	beq.w	8006680 <_strtod_l+0x490>
 8006930:	4601      	mov	r1, r0
 8006932:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006934:	4620      	mov	r0, r4
 8006936:	f002 f877 	bl	8008a28 <__multiply>
 800693a:	900b      	str	r0, [sp, #44]	; 0x2c
 800693c:	2800      	cmp	r0, #0
 800693e:	f43f ae9f 	beq.w	8006680 <_strtod_l+0x490>
 8006942:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006944:	4620      	mov	r0, r4
 8006946:	f001 ff57 	bl	80087f8 <_Bfree>
 800694a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800694c:	9318      	str	r3, [sp, #96]	; 0x60
 800694e:	f1b8 0f00 	cmp.w	r8, #0
 8006952:	f300 808c 	bgt.w	8006a6e <_strtod_l+0x87e>
 8006956:	9b06      	ldr	r3, [sp, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dd08      	ble.n	800696e <_strtod_l+0x77e>
 800695c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800695e:	9905      	ldr	r1, [sp, #20]
 8006960:	4620      	mov	r0, r4
 8006962:	f002 f90b 	bl	8008b7c <__pow5mult>
 8006966:	9005      	str	r0, [sp, #20]
 8006968:	2800      	cmp	r0, #0
 800696a:	f43f ae89 	beq.w	8006680 <_strtod_l+0x490>
 800696e:	2f00      	cmp	r7, #0
 8006970:	dd08      	ble.n	8006984 <_strtod_l+0x794>
 8006972:	9905      	ldr	r1, [sp, #20]
 8006974:	463a      	mov	r2, r7
 8006976:	4620      	mov	r0, r4
 8006978:	f002 f95a 	bl	8008c30 <__lshift>
 800697c:	9005      	str	r0, [sp, #20]
 800697e:	2800      	cmp	r0, #0
 8006980:	f43f ae7e 	beq.w	8006680 <_strtod_l+0x490>
 8006984:	f1b9 0f00 	cmp.w	r9, #0
 8006988:	dd08      	ble.n	800699c <_strtod_l+0x7ac>
 800698a:	4631      	mov	r1, r6
 800698c:	464a      	mov	r2, r9
 800698e:	4620      	mov	r0, r4
 8006990:	f002 f94e 	bl	8008c30 <__lshift>
 8006994:	4606      	mov	r6, r0
 8006996:	2800      	cmp	r0, #0
 8006998:	f43f ae72 	beq.w	8006680 <_strtod_l+0x490>
 800699c:	9a05      	ldr	r2, [sp, #20]
 800699e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069a0:	4620      	mov	r0, r4
 80069a2:	f002 f9d1 	bl	8008d48 <__mdiff>
 80069a6:	4605      	mov	r5, r0
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f43f ae69 	beq.w	8006680 <_strtod_l+0x490>
 80069ae:	68c3      	ldr	r3, [r0, #12]
 80069b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80069b2:	2300      	movs	r3, #0
 80069b4:	60c3      	str	r3, [r0, #12]
 80069b6:	4631      	mov	r1, r6
 80069b8:	f002 f9aa 	bl	8008d10 <__mcmp>
 80069bc:	2800      	cmp	r0, #0
 80069be:	da60      	bge.n	8006a82 <_strtod_l+0x892>
 80069c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c2:	ea53 030a 	orrs.w	r3, r3, sl
 80069c6:	f040 8082 	bne.w	8006ace <_strtod_l+0x8de>
 80069ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d17d      	bne.n	8006ace <_strtod_l+0x8de>
 80069d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069d6:	0d1b      	lsrs	r3, r3, #20
 80069d8:	051b      	lsls	r3, r3, #20
 80069da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80069de:	d976      	bls.n	8006ace <_strtod_l+0x8de>
 80069e0:	696b      	ldr	r3, [r5, #20]
 80069e2:	b913      	cbnz	r3, 80069ea <_strtod_l+0x7fa>
 80069e4:	692b      	ldr	r3, [r5, #16]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	dd71      	ble.n	8006ace <_strtod_l+0x8de>
 80069ea:	4629      	mov	r1, r5
 80069ec:	2201      	movs	r2, #1
 80069ee:	4620      	mov	r0, r4
 80069f0:	f002 f91e 	bl	8008c30 <__lshift>
 80069f4:	4631      	mov	r1, r6
 80069f6:	4605      	mov	r5, r0
 80069f8:	f002 f98a 	bl	8008d10 <__mcmp>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	dd66      	ble.n	8006ace <_strtod_l+0x8de>
 8006a00:	9904      	ldr	r1, [sp, #16]
 8006a02:	4a53      	ldr	r2, [pc, #332]	; (8006b50 <_strtod_l+0x960>)
 8006a04:	465b      	mov	r3, fp
 8006a06:	2900      	cmp	r1, #0
 8006a08:	f000 8081 	beq.w	8006b0e <_strtod_l+0x91e>
 8006a0c:	ea02 010b 	and.w	r1, r2, fp
 8006a10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a14:	dc7b      	bgt.n	8006b0e <_strtod_l+0x91e>
 8006a16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a1a:	f77f aea9 	ble.w	8006770 <_strtod_l+0x580>
 8006a1e:	4b4d      	ldr	r3, [pc, #308]	; (8006b54 <_strtod_l+0x964>)
 8006a20:	4650      	mov	r0, sl
 8006a22:	4659      	mov	r1, fp
 8006a24:	2200      	movs	r2, #0
 8006a26:	f7f9 fe07 	bl	8000638 <__aeabi_dmul>
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4303      	orrs	r3, r0
 8006a2e:	bf08      	it	eq
 8006a30:	2322      	moveq	r3, #34	; 0x22
 8006a32:	4682      	mov	sl, r0
 8006a34:	468b      	mov	fp, r1
 8006a36:	bf08      	it	eq
 8006a38:	6023      	streq	r3, [r4, #0]
 8006a3a:	e62b      	b.n	8006694 <_strtod_l+0x4a4>
 8006a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	ea03 0a0a 	and.w	sl, r3, sl
 8006a48:	e6e3      	b.n	8006812 <_strtod_l+0x622>
 8006a4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006a4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006a52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006a56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006a5a:	fa01 f308 	lsl.w	r3, r1, r8
 8006a5e:	9308      	str	r3, [sp, #32]
 8006a60:	910d      	str	r1, [sp, #52]	; 0x34
 8006a62:	e746      	b.n	80068f2 <_strtod_l+0x702>
 8006a64:	2300      	movs	r3, #0
 8006a66:	9308      	str	r3, [sp, #32]
 8006a68:	2301      	movs	r3, #1
 8006a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8006a6c:	e741      	b.n	80068f2 <_strtod_l+0x702>
 8006a6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a70:	4642      	mov	r2, r8
 8006a72:	4620      	mov	r0, r4
 8006a74:	f002 f8dc 	bl	8008c30 <__lshift>
 8006a78:	9018      	str	r0, [sp, #96]	; 0x60
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f47f af6b 	bne.w	8006956 <_strtod_l+0x766>
 8006a80:	e5fe      	b.n	8006680 <_strtod_l+0x490>
 8006a82:	465f      	mov	r7, fp
 8006a84:	d16e      	bne.n	8006b64 <_strtod_l+0x974>
 8006a86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a8c:	b342      	cbz	r2, 8006ae0 <_strtod_l+0x8f0>
 8006a8e:	4a32      	ldr	r2, [pc, #200]	; (8006b58 <_strtod_l+0x968>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d128      	bne.n	8006ae6 <_strtod_l+0x8f6>
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	4651      	mov	r1, sl
 8006a98:	b1eb      	cbz	r3, 8006ad6 <_strtod_l+0x8e6>
 8006a9a:	4b2d      	ldr	r3, [pc, #180]	; (8006b50 <_strtod_l+0x960>)
 8006a9c:	403b      	ands	r3, r7
 8006a9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa6:	d819      	bhi.n	8006adc <_strtod_l+0x8ec>
 8006aa8:	0d1b      	lsrs	r3, r3, #20
 8006aaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	4299      	cmp	r1, r3
 8006ab4:	d117      	bne.n	8006ae6 <_strtod_l+0x8f6>
 8006ab6:	4b29      	ldr	r3, [pc, #164]	; (8006b5c <_strtod_l+0x96c>)
 8006ab8:	429f      	cmp	r7, r3
 8006aba:	d102      	bne.n	8006ac2 <_strtod_l+0x8d2>
 8006abc:	3101      	adds	r1, #1
 8006abe:	f43f addf 	beq.w	8006680 <_strtod_l+0x490>
 8006ac2:	4b23      	ldr	r3, [pc, #140]	; (8006b50 <_strtod_l+0x960>)
 8006ac4:	403b      	ands	r3, r7
 8006ac6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006aca:	f04f 0a00 	mov.w	sl, #0
 8006ace:	9b04      	ldr	r3, [sp, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1a4      	bne.n	8006a1e <_strtod_l+0x82e>
 8006ad4:	e5de      	b.n	8006694 <_strtod_l+0x4a4>
 8006ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8006ada:	e7ea      	b.n	8006ab2 <_strtod_l+0x8c2>
 8006adc:	4613      	mov	r3, r2
 8006ade:	e7e8      	b.n	8006ab2 <_strtod_l+0x8c2>
 8006ae0:	ea53 030a 	orrs.w	r3, r3, sl
 8006ae4:	d08c      	beq.n	8006a00 <_strtod_l+0x810>
 8006ae6:	9b08      	ldr	r3, [sp, #32]
 8006ae8:	b1db      	cbz	r3, 8006b22 <_strtod_l+0x932>
 8006aea:	423b      	tst	r3, r7
 8006aec:	d0ef      	beq.n	8006ace <_strtod_l+0x8de>
 8006aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af0:	9a04      	ldr	r2, [sp, #16]
 8006af2:	4650      	mov	r0, sl
 8006af4:	4659      	mov	r1, fp
 8006af6:	b1c3      	cbz	r3, 8006b2a <_strtod_l+0x93a>
 8006af8:	f7ff fb5e 	bl	80061b8 <sulp>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	ec51 0b18 	vmov	r0, r1, d8
 8006b04:	f7f9 fbe2 	bl	80002cc <__adddf3>
 8006b08:	4682      	mov	sl, r0
 8006b0a:	468b      	mov	fp, r1
 8006b0c:	e7df      	b.n	8006ace <_strtod_l+0x8de>
 8006b0e:	4013      	ands	r3, r2
 8006b10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006b18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006b1c:	f04f 3aff 	mov.w	sl, #4294967295
 8006b20:	e7d5      	b.n	8006ace <_strtod_l+0x8de>
 8006b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b24:	ea13 0f0a 	tst.w	r3, sl
 8006b28:	e7e0      	b.n	8006aec <_strtod_l+0x8fc>
 8006b2a:	f7ff fb45 	bl	80061b8 <sulp>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	ec51 0b18 	vmov	r0, r1, d8
 8006b36:	f7f9 fbc7 	bl	80002c8 <__aeabi_dsub>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4682      	mov	sl, r0
 8006b40:	468b      	mov	fp, r1
 8006b42:	f7f9 ffe1 	bl	8000b08 <__aeabi_dcmpeq>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d0c1      	beq.n	8006ace <_strtod_l+0x8de>
 8006b4a:	e611      	b.n	8006770 <_strtod_l+0x580>
 8006b4c:	fffffc02 	.word	0xfffffc02
 8006b50:	7ff00000 	.word	0x7ff00000
 8006b54:	39500000 	.word	0x39500000
 8006b58:	000fffff 	.word	0x000fffff
 8006b5c:	7fefffff 	.word	0x7fefffff
 8006b60:	0800a228 	.word	0x0800a228
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	f002 fa50 	bl	800900c <__ratio>
 8006b6c:	ec59 8b10 	vmov	r8, r9, d0
 8006b70:	ee10 0a10 	vmov	r0, s0
 8006b74:	2200      	movs	r2, #0
 8006b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	f7f9 ffd8 	bl	8000b30 <__aeabi_dcmple>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d07a      	beq.n	8006c7a <_strtod_l+0xa8a>
 8006b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d04a      	beq.n	8006c20 <_strtod_l+0xa30>
 8006b8a:	4b95      	ldr	r3, [pc, #596]	; (8006de0 <_strtod_l+0xbf0>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006de0 <_strtod_l+0xbf0>
 8006b96:	f04f 0800 	mov.w	r8, #0
 8006b9a:	4b92      	ldr	r3, [pc, #584]	; (8006de4 <_strtod_l+0xbf4>)
 8006b9c:	403b      	ands	r3, r7
 8006b9e:	930d      	str	r3, [sp, #52]	; 0x34
 8006ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ba2:	4b91      	ldr	r3, [pc, #580]	; (8006de8 <_strtod_l+0xbf8>)
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	f040 80b0 	bne.w	8006d0a <_strtod_l+0xb1a>
 8006baa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006bae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006bb2:	ec4b ab10 	vmov	d0, sl, fp
 8006bb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006bba:	f002 f94f 	bl	8008e5c <__ulp>
 8006bbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006bc2:	ec53 2b10 	vmov	r2, r3, d0
 8006bc6:	f7f9 fd37 	bl	8000638 <__aeabi_dmul>
 8006bca:	4652      	mov	r2, sl
 8006bcc:	465b      	mov	r3, fp
 8006bce:	f7f9 fb7d 	bl	80002cc <__adddf3>
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4983      	ldr	r1, [pc, #524]	; (8006de4 <_strtod_l+0xbf4>)
 8006bd6:	4a85      	ldr	r2, [pc, #532]	; (8006dec <_strtod_l+0xbfc>)
 8006bd8:	4019      	ands	r1, r3
 8006bda:	4291      	cmp	r1, r2
 8006bdc:	4682      	mov	sl, r0
 8006bde:	d960      	bls.n	8006ca2 <_strtod_l+0xab2>
 8006be0:	ee18 3a90 	vmov	r3, s17
 8006be4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d104      	bne.n	8006bf6 <_strtod_l+0xa06>
 8006bec:	ee18 3a10 	vmov	r3, s16
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	f43f ad45 	beq.w	8006680 <_strtod_l+0x490>
 8006bf6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006df8 <_strtod_l+0xc08>
 8006bfa:	f04f 3aff 	mov.w	sl, #4294967295
 8006bfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c00:	4620      	mov	r0, r4
 8006c02:	f001 fdf9 	bl	80087f8 <_Bfree>
 8006c06:	9905      	ldr	r1, [sp, #20]
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f001 fdf5 	bl	80087f8 <_Bfree>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4620      	mov	r0, r4
 8006c12:	f001 fdf1 	bl	80087f8 <_Bfree>
 8006c16:	4629      	mov	r1, r5
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f001 fded 	bl	80087f8 <_Bfree>
 8006c1e:	e61a      	b.n	8006856 <_strtod_l+0x666>
 8006c20:	f1ba 0f00 	cmp.w	sl, #0
 8006c24:	d11b      	bne.n	8006c5e <_strtod_l+0xa6e>
 8006c26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c2a:	b9f3      	cbnz	r3, 8006c6a <_strtod_l+0xa7a>
 8006c2c:	4b6c      	ldr	r3, [pc, #432]	; (8006de0 <_strtod_l+0xbf0>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	4640      	mov	r0, r8
 8006c32:	4649      	mov	r1, r9
 8006c34:	f7f9 ff72 	bl	8000b1c <__aeabi_dcmplt>
 8006c38:	b9d0      	cbnz	r0, 8006c70 <_strtod_l+0xa80>
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	4b6c      	ldr	r3, [pc, #432]	; (8006df0 <_strtod_l+0xc00>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	f7f9 fcf9 	bl	8000638 <__aeabi_dmul>
 8006c46:	4680      	mov	r8, r0
 8006c48:	4689      	mov	r9, r1
 8006c4a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006c52:	9315      	str	r3, [sp, #84]	; 0x54
 8006c54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006c58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c5c:	e79d      	b.n	8006b9a <_strtod_l+0x9aa>
 8006c5e:	f1ba 0f01 	cmp.w	sl, #1
 8006c62:	d102      	bne.n	8006c6a <_strtod_l+0xa7a>
 8006c64:	2f00      	cmp	r7, #0
 8006c66:	f43f ad83 	beq.w	8006770 <_strtod_l+0x580>
 8006c6a:	4b62      	ldr	r3, [pc, #392]	; (8006df4 <_strtod_l+0xc04>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	e78e      	b.n	8006b8e <_strtod_l+0x99e>
 8006c70:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006df0 <_strtod_l+0xc00>
 8006c74:	f04f 0800 	mov.w	r8, #0
 8006c78:	e7e7      	b.n	8006c4a <_strtod_l+0xa5a>
 8006c7a:	4b5d      	ldr	r3, [pc, #372]	; (8006df0 <_strtod_l+0xc00>)
 8006c7c:	4640      	mov	r0, r8
 8006c7e:	4649      	mov	r1, r9
 8006c80:	2200      	movs	r2, #0
 8006c82:	f7f9 fcd9 	bl	8000638 <__aeabi_dmul>
 8006c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c88:	4680      	mov	r8, r0
 8006c8a:	4689      	mov	r9, r1
 8006c8c:	b933      	cbnz	r3, 8006c9c <_strtod_l+0xaac>
 8006c8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c92:	900e      	str	r0, [sp, #56]	; 0x38
 8006c94:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006c9a:	e7dd      	b.n	8006c58 <_strtod_l+0xa68>
 8006c9c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006ca0:	e7f9      	b.n	8006c96 <_strtod_l+0xaa6>
 8006ca2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006ca6:	9b04      	ldr	r3, [sp, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1a8      	bne.n	8006bfe <_strtod_l+0xa0e>
 8006cac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cb2:	0d1b      	lsrs	r3, r3, #20
 8006cb4:	051b      	lsls	r3, r3, #20
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d1a1      	bne.n	8006bfe <_strtod_l+0xa0e>
 8006cba:	4640      	mov	r0, r8
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	f7fa f81b 	bl	8000cf8 <__aeabi_d2lz>
 8006cc2:	f7f9 fc8b 	bl	80005dc <__aeabi_l2d>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4640      	mov	r0, r8
 8006ccc:	4649      	mov	r1, r9
 8006cce:	f7f9 fafb 	bl	80002c8 <__aeabi_dsub>
 8006cd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cd8:	ea43 030a 	orr.w	r3, r3, sl
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	4680      	mov	r8, r0
 8006ce0:	4689      	mov	r9, r1
 8006ce2:	d055      	beq.n	8006d90 <_strtod_l+0xba0>
 8006ce4:	a336      	add	r3, pc, #216	; (adr r3, 8006dc0 <_strtod_l+0xbd0>)
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f7f9 ff17 	bl	8000b1c <__aeabi_dcmplt>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	f47f acd0 	bne.w	8006694 <_strtod_l+0x4a4>
 8006cf4:	a334      	add	r3, pc, #208	; (adr r3, 8006dc8 <_strtod_l+0xbd8>)
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	f7f9 ff2b 	bl	8000b58 <__aeabi_dcmpgt>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f43f af7b 	beq.w	8006bfe <_strtod_l+0xa0e>
 8006d08:	e4c4      	b.n	8006694 <_strtod_l+0x4a4>
 8006d0a:	9b04      	ldr	r3, [sp, #16]
 8006d0c:	b333      	cbz	r3, 8006d5c <_strtod_l+0xb6c>
 8006d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d14:	d822      	bhi.n	8006d5c <_strtod_l+0xb6c>
 8006d16:	a32e      	add	r3, pc, #184	; (adr r3, 8006dd0 <_strtod_l+0xbe0>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	4649      	mov	r1, r9
 8006d20:	f7f9 ff06 	bl	8000b30 <__aeabi_dcmple>
 8006d24:	b1a0      	cbz	r0, 8006d50 <_strtod_l+0xb60>
 8006d26:	4649      	mov	r1, r9
 8006d28:	4640      	mov	r0, r8
 8006d2a:	f7f9 ff5d 	bl	8000be8 <__aeabi_d2uiz>
 8006d2e:	2801      	cmp	r0, #1
 8006d30:	bf38      	it	cc
 8006d32:	2001      	movcc	r0, #1
 8006d34:	f7f9 fc06 	bl	8000544 <__aeabi_ui2d>
 8006d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d3a:	4680      	mov	r8, r0
 8006d3c:	4689      	mov	r9, r1
 8006d3e:	bb23      	cbnz	r3, 8006d8a <_strtod_l+0xb9a>
 8006d40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d44:	9010      	str	r0, [sp, #64]	; 0x40
 8006d46:	9311      	str	r3, [sp, #68]	; 0x44
 8006d48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006d58:	1a9b      	subs	r3, r3, r2
 8006d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d60:	eeb0 0a48 	vmov.f32	s0, s16
 8006d64:	eef0 0a68 	vmov.f32	s1, s17
 8006d68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d6c:	f002 f876 	bl	8008e5c <__ulp>
 8006d70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d74:	ec53 2b10 	vmov	r2, r3, d0
 8006d78:	f7f9 fc5e 	bl	8000638 <__aeabi_dmul>
 8006d7c:	ec53 2b18 	vmov	r2, r3, d8
 8006d80:	f7f9 faa4 	bl	80002cc <__adddf3>
 8006d84:	4682      	mov	sl, r0
 8006d86:	468b      	mov	fp, r1
 8006d88:	e78d      	b.n	8006ca6 <_strtod_l+0xab6>
 8006d8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006d8e:	e7db      	b.n	8006d48 <_strtod_l+0xb58>
 8006d90:	a311      	add	r3, pc, #68	; (adr r3, 8006dd8 <_strtod_l+0xbe8>)
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f7f9 fec1 	bl	8000b1c <__aeabi_dcmplt>
 8006d9a:	e7b2      	b.n	8006d02 <_strtod_l+0xb12>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006da0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006da2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	f7ff ba6b 	b.w	8006280 <_strtod_l+0x90>
 8006daa:	2a65      	cmp	r2, #101	; 0x65
 8006dac:	f43f ab5f 	beq.w	800646e <_strtod_l+0x27e>
 8006db0:	2a45      	cmp	r2, #69	; 0x45
 8006db2:	f43f ab5c 	beq.w	800646e <_strtod_l+0x27e>
 8006db6:	2301      	movs	r3, #1
 8006db8:	f7ff bb94 	b.w	80064e4 <_strtod_l+0x2f4>
 8006dbc:	f3af 8000 	nop.w
 8006dc0:	94a03595 	.word	0x94a03595
 8006dc4:	3fdfffff 	.word	0x3fdfffff
 8006dc8:	35afe535 	.word	0x35afe535
 8006dcc:	3fe00000 	.word	0x3fe00000
 8006dd0:	ffc00000 	.word	0xffc00000
 8006dd4:	41dfffff 	.word	0x41dfffff
 8006dd8:	94a03595 	.word	0x94a03595
 8006ddc:	3fcfffff 	.word	0x3fcfffff
 8006de0:	3ff00000 	.word	0x3ff00000
 8006de4:	7ff00000 	.word	0x7ff00000
 8006de8:	7fe00000 	.word	0x7fe00000
 8006dec:	7c9fffff 	.word	0x7c9fffff
 8006df0:	3fe00000 	.word	0x3fe00000
 8006df4:	bff00000 	.word	0xbff00000
 8006df8:	7fefffff 	.word	0x7fefffff

08006dfc <_strtod_r>:
 8006dfc:	4b01      	ldr	r3, [pc, #4]	; (8006e04 <_strtod_r+0x8>)
 8006dfe:	f7ff b9f7 	b.w	80061f0 <_strtod_l>
 8006e02:	bf00      	nop
 8006e04:	20000074 	.word	0x20000074

08006e08 <_strtol_l.constprop.0>:
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0e:	d001      	beq.n	8006e14 <_strtol_l.constprop.0+0xc>
 8006e10:	2b24      	cmp	r3, #36	; 0x24
 8006e12:	d906      	bls.n	8006e22 <_strtol_l.constprop.0+0x1a>
 8006e14:	f7fe fa20 	bl	8005258 <__errno>
 8006e18:	2316      	movs	r3, #22
 8006e1a:	6003      	str	r3, [r0, #0]
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f08 <_strtol_l.constprop.0+0x100>
 8006e26:	460d      	mov	r5, r1
 8006e28:	462e      	mov	r6, r5
 8006e2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006e32:	f017 0708 	ands.w	r7, r7, #8
 8006e36:	d1f7      	bne.n	8006e28 <_strtol_l.constprop.0+0x20>
 8006e38:	2c2d      	cmp	r4, #45	; 0x2d
 8006e3a:	d132      	bne.n	8006ea2 <_strtol_l.constprop.0+0x9a>
 8006e3c:	782c      	ldrb	r4, [r5, #0]
 8006e3e:	2701      	movs	r7, #1
 8006e40:	1cb5      	adds	r5, r6, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d05b      	beq.n	8006efe <_strtol_l.constprop.0+0xf6>
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	d109      	bne.n	8006e5e <_strtol_l.constprop.0+0x56>
 8006e4a:	2c30      	cmp	r4, #48	; 0x30
 8006e4c:	d107      	bne.n	8006e5e <_strtol_l.constprop.0+0x56>
 8006e4e:	782c      	ldrb	r4, [r5, #0]
 8006e50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006e54:	2c58      	cmp	r4, #88	; 0x58
 8006e56:	d14d      	bne.n	8006ef4 <_strtol_l.constprop.0+0xec>
 8006e58:	786c      	ldrb	r4, [r5, #1]
 8006e5a:	2310      	movs	r3, #16
 8006e5c:	3502      	adds	r5, #2
 8006e5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e62:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e66:	f04f 0c00 	mov.w	ip, #0
 8006e6a:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e6e:	4666      	mov	r6, ip
 8006e70:	fb03 8a19 	mls	sl, r3, r9, r8
 8006e74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006e78:	f1be 0f09 	cmp.w	lr, #9
 8006e7c:	d816      	bhi.n	8006eac <_strtol_l.constprop.0+0xa4>
 8006e7e:	4674      	mov	r4, lr
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	dd24      	ble.n	8006ece <_strtol_l.constprop.0+0xc6>
 8006e84:	f1bc 0f00 	cmp.w	ip, #0
 8006e88:	db1e      	blt.n	8006ec8 <_strtol_l.constprop.0+0xc0>
 8006e8a:	45b1      	cmp	r9, r6
 8006e8c:	d31c      	bcc.n	8006ec8 <_strtol_l.constprop.0+0xc0>
 8006e8e:	d101      	bne.n	8006e94 <_strtol_l.constprop.0+0x8c>
 8006e90:	45a2      	cmp	sl, r4
 8006e92:	db19      	blt.n	8006ec8 <_strtol_l.constprop.0+0xc0>
 8006e94:	fb06 4603 	mla	r6, r6, r3, r4
 8006e98:	f04f 0c01 	mov.w	ip, #1
 8006e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ea0:	e7e8      	b.n	8006e74 <_strtol_l.constprop.0+0x6c>
 8006ea2:	2c2b      	cmp	r4, #43	; 0x2b
 8006ea4:	bf04      	itt	eq
 8006ea6:	782c      	ldrbeq	r4, [r5, #0]
 8006ea8:	1cb5      	addeq	r5, r6, #2
 8006eaa:	e7ca      	b.n	8006e42 <_strtol_l.constprop.0+0x3a>
 8006eac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006eb0:	f1be 0f19 	cmp.w	lr, #25
 8006eb4:	d801      	bhi.n	8006eba <_strtol_l.constprop.0+0xb2>
 8006eb6:	3c37      	subs	r4, #55	; 0x37
 8006eb8:	e7e2      	b.n	8006e80 <_strtol_l.constprop.0+0x78>
 8006eba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006ebe:	f1be 0f19 	cmp.w	lr, #25
 8006ec2:	d804      	bhi.n	8006ece <_strtol_l.constprop.0+0xc6>
 8006ec4:	3c57      	subs	r4, #87	; 0x57
 8006ec6:	e7db      	b.n	8006e80 <_strtol_l.constprop.0+0x78>
 8006ec8:	f04f 3cff 	mov.w	ip, #4294967295
 8006ecc:	e7e6      	b.n	8006e9c <_strtol_l.constprop.0+0x94>
 8006ece:	f1bc 0f00 	cmp.w	ip, #0
 8006ed2:	da05      	bge.n	8006ee0 <_strtol_l.constprop.0+0xd8>
 8006ed4:	2322      	movs	r3, #34	; 0x22
 8006ed6:	6003      	str	r3, [r0, #0]
 8006ed8:	4646      	mov	r6, r8
 8006eda:	b942      	cbnz	r2, 8006eee <_strtol_l.constprop.0+0xe6>
 8006edc:	4630      	mov	r0, r6
 8006ede:	e79e      	b.n	8006e1e <_strtol_l.constprop.0+0x16>
 8006ee0:	b107      	cbz	r7, 8006ee4 <_strtol_l.constprop.0+0xdc>
 8006ee2:	4276      	negs	r6, r6
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	d0f9      	beq.n	8006edc <_strtol_l.constprop.0+0xd4>
 8006ee8:	f1bc 0f00 	cmp.w	ip, #0
 8006eec:	d000      	beq.n	8006ef0 <_strtol_l.constprop.0+0xe8>
 8006eee:	1e69      	subs	r1, r5, #1
 8006ef0:	6011      	str	r1, [r2, #0]
 8006ef2:	e7f3      	b.n	8006edc <_strtol_l.constprop.0+0xd4>
 8006ef4:	2430      	movs	r4, #48	; 0x30
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1b1      	bne.n	8006e5e <_strtol_l.constprop.0+0x56>
 8006efa:	2308      	movs	r3, #8
 8006efc:	e7af      	b.n	8006e5e <_strtol_l.constprop.0+0x56>
 8006efe:	2c30      	cmp	r4, #48	; 0x30
 8006f00:	d0a5      	beq.n	8006e4e <_strtol_l.constprop.0+0x46>
 8006f02:	230a      	movs	r3, #10
 8006f04:	e7ab      	b.n	8006e5e <_strtol_l.constprop.0+0x56>
 8006f06:	bf00      	nop
 8006f08:	0800a251 	.word	0x0800a251

08006f0c <_strtol_r>:
 8006f0c:	f7ff bf7c 	b.w	8006e08 <_strtol_l.constprop.0>

08006f10 <quorem>:
 8006f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	6903      	ldr	r3, [r0, #16]
 8006f16:	690c      	ldr	r4, [r1, #16]
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	f2c0 8081 	blt.w	8007022 <quorem+0x112>
 8006f20:	3c01      	subs	r4, #1
 8006f22:	f101 0814 	add.w	r8, r1, #20
 8006f26:	f100 0514 	add.w	r5, r0, #20
 8006f2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f44:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f48:	d331      	bcc.n	8006fae <quorem+0x9e>
 8006f4a:	f04f 0e00 	mov.w	lr, #0
 8006f4e:	4640      	mov	r0, r8
 8006f50:	46ac      	mov	ip, r5
 8006f52:	46f2      	mov	sl, lr
 8006f54:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f58:	b293      	uxth	r3, r2
 8006f5a:	fb06 e303 	mla	r3, r6, r3, lr
 8006f5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	ebaa 0303 	sub.w	r3, sl, r3
 8006f68:	f8dc a000 	ldr.w	sl, [ip]
 8006f6c:	0c12      	lsrs	r2, r2, #16
 8006f6e:	fa13 f38a 	uxtah	r3, r3, sl
 8006f72:	fb06 e202 	mla	r2, r6, r2, lr
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	9b00      	ldr	r3, [sp, #0]
 8006f7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f7e:	b292      	uxth	r2, r2
 8006f80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f88:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f8c:	4581      	cmp	r9, r0
 8006f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f92:	f84c 3b04 	str.w	r3, [ip], #4
 8006f96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f9a:	d2db      	bcs.n	8006f54 <quorem+0x44>
 8006f9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fa0:	b92b      	cbnz	r3, 8006fae <quorem+0x9e>
 8006fa2:	9b01      	ldr	r3, [sp, #4]
 8006fa4:	3b04      	subs	r3, #4
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	d32e      	bcc.n	800700a <quorem+0xfa>
 8006fac:	613c      	str	r4, [r7, #16]
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f001 feae 	bl	8008d10 <__mcmp>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	db24      	blt.n	8007002 <quorem+0xf2>
 8006fb8:	3601      	adds	r6, #1
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f04f 0c00 	mov.w	ip, #0
 8006fc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fc4:	f8d0 e000 	ldr.w	lr, [r0]
 8006fc8:	b293      	uxth	r3, r2
 8006fca:	ebac 0303 	sub.w	r3, ip, r3
 8006fce:	0c12      	lsrs	r2, r2, #16
 8006fd0:	fa13 f38e 	uxtah	r3, r3, lr
 8006fd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fe2:	45c1      	cmp	r9, r8
 8006fe4:	f840 3b04 	str.w	r3, [r0], #4
 8006fe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fec:	d2e8      	bcs.n	8006fc0 <quorem+0xb0>
 8006fee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ff6:	b922      	cbnz	r2, 8007002 <quorem+0xf2>
 8006ff8:	3b04      	subs	r3, #4
 8006ffa:	429d      	cmp	r5, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	d30a      	bcc.n	8007016 <quorem+0x106>
 8007000:	613c      	str	r4, [r7, #16]
 8007002:	4630      	mov	r0, r6
 8007004:	b003      	add	sp, #12
 8007006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	3b04      	subs	r3, #4
 800700e:	2a00      	cmp	r2, #0
 8007010:	d1cc      	bne.n	8006fac <quorem+0x9c>
 8007012:	3c01      	subs	r4, #1
 8007014:	e7c7      	b.n	8006fa6 <quorem+0x96>
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	3b04      	subs	r3, #4
 800701a:	2a00      	cmp	r2, #0
 800701c:	d1f0      	bne.n	8007000 <quorem+0xf0>
 800701e:	3c01      	subs	r4, #1
 8007020:	e7eb      	b.n	8006ffa <quorem+0xea>
 8007022:	2000      	movs	r0, #0
 8007024:	e7ee      	b.n	8007004 <quorem+0xf4>
	...

08007028 <_dtoa_r>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	ed2d 8b04 	vpush	{d8-d9}
 8007030:	ec57 6b10 	vmov	r6, r7, d0
 8007034:	b093      	sub	sp, #76	; 0x4c
 8007036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800703c:	9106      	str	r1, [sp, #24]
 800703e:	ee10 aa10 	vmov	sl, s0
 8007042:	4604      	mov	r4, r0
 8007044:	9209      	str	r2, [sp, #36]	; 0x24
 8007046:	930c      	str	r3, [sp, #48]	; 0x30
 8007048:	46bb      	mov	fp, r7
 800704a:	b975      	cbnz	r5, 800706a <_dtoa_r+0x42>
 800704c:	2010      	movs	r0, #16
 800704e:	f001 fb6b 	bl	8008728 <malloc>
 8007052:	4602      	mov	r2, r0
 8007054:	6260      	str	r0, [r4, #36]	; 0x24
 8007056:	b920      	cbnz	r0, 8007062 <_dtoa_r+0x3a>
 8007058:	4ba7      	ldr	r3, [pc, #668]	; (80072f8 <_dtoa_r+0x2d0>)
 800705a:	21ea      	movs	r1, #234	; 0xea
 800705c:	48a7      	ldr	r0, [pc, #668]	; (80072fc <_dtoa_r+0x2d4>)
 800705e:	f002 fd4b 	bl	8009af8 <__assert_func>
 8007062:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007066:	6005      	str	r5, [r0, #0]
 8007068:	60c5      	str	r5, [r0, #12]
 800706a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800706c:	6819      	ldr	r1, [r3, #0]
 800706e:	b151      	cbz	r1, 8007086 <_dtoa_r+0x5e>
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	604a      	str	r2, [r1, #4]
 8007074:	2301      	movs	r3, #1
 8007076:	4093      	lsls	r3, r2
 8007078:	608b      	str	r3, [r1, #8]
 800707a:	4620      	mov	r0, r4
 800707c:	f001 fbbc 	bl	80087f8 <_Bfree>
 8007080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	1e3b      	subs	r3, r7, #0
 8007088:	bfaa      	itet	ge
 800708a:	2300      	movge	r3, #0
 800708c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007090:	f8c8 3000 	strge.w	r3, [r8]
 8007094:	4b9a      	ldr	r3, [pc, #616]	; (8007300 <_dtoa_r+0x2d8>)
 8007096:	bfbc      	itt	lt
 8007098:	2201      	movlt	r2, #1
 800709a:	f8c8 2000 	strlt.w	r2, [r8]
 800709e:	ea33 030b 	bics.w	r3, r3, fp
 80070a2:	d11b      	bne.n	80070dc <_dtoa_r+0xb4>
 80070a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070b0:	4333      	orrs	r3, r6
 80070b2:	f000 8592 	beq.w	8007bda <_dtoa_r+0xbb2>
 80070b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070b8:	b963      	cbnz	r3, 80070d4 <_dtoa_r+0xac>
 80070ba:	4b92      	ldr	r3, [pc, #584]	; (8007304 <_dtoa_r+0x2dc>)
 80070bc:	e022      	b.n	8007104 <_dtoa_r+0xdc>
 80070be:	4b92      	ldr	r3, [pc, #584]	; (8007308 <_dtoa_r+0x2e0>)
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	3308      	adds	r3, #8
 80070c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	9801      	ldr	r0, [sp, #4]
 80070ca:	b013      	add	sp, #76	; 0x4c
 80070cc:	ecbd 8b04 	vpop	{d8-d9}
 80070d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d4:	4b8b      	ldr	r3, [pc, #556]	; (8007304 <_dtoa_r+0x2dc>)
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	3303      	adds	r3, #3
 80070da:	e7f3      	b.n	80070c4 <_dtoa_r+0x9c>
 80070dc:	2200      	movs	r2, #0
 80070de:	2300      	movs	r3, #0
 80070e0:	4650      	mov	r0, sl
 80070e2:	4659      	mov	r1, fp
 80070e4:	f7f9 fd10 	bl	8000b08 <__aeabi_dcmpeq>
 80070e8:	ec4b ab19 	vmov	d9, sl, fp
 80070ec:	4680      	mov	r8, r0
 80070ee:	b158      	cbz	r0, 8007108 <_dtoa_r+0xe0>
 80070f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070f2:	2301      	movs	r3, #1
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 856b 	beq.w	8007bd4 <_dtoa_r+0xbac>
 80070fe:	4883      	ldr	r0, [pc, #524]	; (800730c <_dtoa_r+0x2e4>)
 8007100:	6018      	str	r0, [r3, #0]
 8007102:	1e43      	subs	r3, r0, #1
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	e7df      	b.n	80070c8 <_dtoa_r+0xa0>
 8007108:	ec4b ab10 	vmov	d0, sl, fp
 800710c:	aa10      	add	r2, sp, #64	; 0x40
 800710e:	a911      	add	r1, sp, #68	; 0x44
 8007110:	4620      	mov	r0, r4
 8007112:	f001 ff1f 	bl	8008f54 <__d2b>
 8007116:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800711a:	ee08 0a10 	vmov	s16, r0
 800711e:	2d00      	cmp	r5, #0
 8007120:	f000 8084 	beq.w	800722c <_dtoa_r+0x204>
 8007124:	ee19 3a90 	vmov	r3, s19
 8007128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800712c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007130:	4656      	mov	r6, sl
 8007132:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800713a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800713e:	4b74      	ldr	r3, [pc, #464]	; (8007310 <_dtoa_r+0x2e8>)
 8007140:	2200      	movs	r2, #0
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	f7f9 f8bf 	bl	80002c8 <__aeabi_dsub>
 800714a:	a365      	add	r3, pc, #404	; (adr r3, 80072e0 <_dtoa_r+0x2b8>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f7f9 fa72 	bl	8000638 <__aeabi_dmul>
 8007154:	a364      	add	r3, pc, #400	; (adr r3, 80072e8 <_dtoa_r+0x2c0>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	f7f9 f8b7 	bl	80002cc <__adddf3>
 800715e:	4606      	mov	r6, r0
 8007160:	4628      	mov	r0, r5
 8007162:	460f      	mov	r7, r1
 8007164:	f7f9 f9fe 	bl	8000564 <__aeabi_i2d>
 8007168:	a361      	add	r3, pc, #388	; (adr r3, 80072f0 <_dtoa_r+0x2c8>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f7f9 fa63 	bl	8000638 <__aeabi_dmul>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4630      	mov	r0, r6
 8007178:	4639      	mov	r1, r7
 800717a:	f7f9 f8a7 	bl	80002cc <__adddf3>
 800717e:	4606      	mov	r6, r0
 8007180:	460f      	mov	r7, r1
 8007182:	f7f9 fd09 	bl	8000b98 <__aeabi_d2iz>
 8007186:	2200      	movs	r2, #0
 8007188:	9000      	str	r0, [sp, #0]
 800718a:	2300      	movs	r3, #0
 800718c:	4630      	mov	r0, r6
 800718e:	4639      	mov	r1, r7
 8007190:	f7f9 fcc4 	bl	8000b1c <__aeabi_dcmplt>
 8007194:	b150      	cbz	r0, 80071ac <_dtoa_r+0x184>
 8007196:	9800      	ldr	r0, [sp, #0]
 8007198:	f7f9 f9e4 	bl	8000564 <__aeabi_i2d>
 800719c:	4632      	mov	r2, r6
 800719e:	463b      	mov	r3, r7
 80071a0:	f7f9 fcb2 	bl	8000b08 <__aeabi_dcmpeq>
 80071a4:	b910      	cbnz	r0, 80071ac <_dtoa_r+0x184>
 80071a6:	9b00      	ldr	r3, [sp, #0]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	9b00      	ldr	r3, [sp, #0]
 80071ae:	2b16      	cmp	r3, #22
 80071b0:	d85a      	bhi.n	8007268 <_dtoa_r+0x240>
 80071b2:	9a00      	ldr	r2, [sp, #0]
 80071b4:	4b57      	ldr	r3, [pc, #348]	; (8007314 <_dtoa_r+0x2ec>)
 80071b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	ec51 0b19 	vmov	r0, r1, d9
 80071c2:	f7f9 fcab 	bl	8000b1c <__aeabi_dcmplt>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d050      	beq.n	800726c <_dtoa_r+0x244>
 80071ca:	9b00      	ldr	r3, [sp, #0]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071d6:	1b5d      	subs	r5, r3, r5
 80071d8:	1e6b      	subs	r3, r5, #1
 80071da:	9305      	str	r3, [sp, #20]
 80071dc:	bf45      	ittet	mi
 80071de:	f1c5 0301 	rsbmi	r3, r5, #1
 80071e2:	9304      	strmi	r3, [sp, #16]
 80071e4:	2300      	movpl	r3, #0
 80071e6:	2300      	movmi	r3, #0
 80071e8:	bf4c      	ite	mi
 80071ea:	9305      	strmi	r3, [sp, #20]
 80071ec:	9304      	strpl	r3, [sp, #16]
 80071ee:	9b00      	ldr	r3, [sp, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	db3d      	blt.n	8007270 <_dtoa_r+0x248>
 80071f4:	9b05      	ldr	r3, [sp, #20]
 80071f6:	9a00      	ldr	r2, [sp, #0]
 80071f8:	920a      	str	r2, [sp, #40]	; 0x28
 80071fa:	4413      	add	r3, r2
 80071fc:	9305      	str	r3, [sp, #20]
 80071fe:	2300      	movs	r3, #0
 8007200:	9307      	str	r3, [sp, #28]
 8007202:	9b06      	ldr	r3, [sp, #24]
 8007204:	2b09      	cmp	r3, #9
 8007206:	f200 8089 	bhi.w	800731c <_dtoa_r+0x2f4>
 800720a:	2b05      	cmp	r3, #5
 800720c:	bfc4      	itt	gt
 800720e:	3b04      	subgt	r3, #4
 8007210:	9306      	strgt	r3, [sp, #24]
 8007212:	9b06      	ldr	r3, [sp, #24]
 8007214:	f1a3 0302 	sub.w	r3, r3, #2
 8007218:	bfcc      	ite	gt
 800721a:	2500      	movgt	r5, #0
 800721c:	2501      	movle	r5, #1
 800721e:	2b03      	cmp	r3, #3
 8007220:	f200 8087 	bhi.w	8007332 <_dtoa_r+0x30a>
 8007224:	e8df f003 	tbb	[pc, r3]
 8007228:	59383a2d 	.word	0x59383a2d
 800722c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007230:	441d      	add	r5, r3
 8007232:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007236:	2b20      	cmp	r3, #32
 8007238:	bfc1      	itttt	gt
 800723a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800723e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007242:	fa0b f303 	lslgt.w	r3, fp, r3
 8007246:	fa26 f000 	lsrgt.w	r0, r6, r0
 800724a:	bfda      	itte	le
 800724c:	f1c3 0320 	rsble	r3, r3, #32
 8007250:	fa06 f003 	lslle.w	r0, r6, r3
 8007254:	4318      	orrgt	r0, r3
 8007256:	f7f9 f975 	bl	8000544 <__aeabi_ui2d>
 800725a:	2301      	movs	r3, #1
 800725c:	4606      	mov	r6, r0
 800725e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007262:	3d01      	subs	r5, #1
 8007264:	930e      	str	r3, [sp, #56]	; 0x38
 8007266:	e76a      	b.n	800713e <_dtoa_r+0x116>
 8007268:	2301      	movs	r3, #1
 800726a:	e7b2      	b.n	80071d2 <_dtoa_r+0x1aa>
 800726c:	900b      	str	r0, [sp, #44]	; 0x2c
 800726e:	e7b1      	b.n	80071d4 <_dtoa_r+0x1ac>
 8007270:	9b04      	ldr	r3, [sp, #16]
 8007272:	9a00      	ldr	r2, [sp, #0]
 8007274:	1a9b      	subs	r3, r3, r2
 8007276:	9304      	str	r3, [sp, #16]
 8007278:	4253      	negs	r3, r2
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	2300      	movs	r3, #0
 800727e:	930a      	str	r3, [sp, #40]	; 0x28
 8007280:	e7bf      	b.n	8007202 <_dtoa_r+0x1da>
 8007282:	2300      	movs	r3, #0
 8007284:	9308      	str	r3, [sp, #32]
 8007286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	dc55      	bgt.n	8007338 <_dtoa_r+0x310>
 800728c:	2301      	movs	r3, #1
 800728e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007292:	461a      	mov	r2, r3
 8007294:	9209      	str	r2, [sp, #36]	; 0x24
 8007296:	e00c      	b.n	80072b2 <_dtoa_r+0x28a>
 8007298:	2301      	movs	r3, #1
 800729a:	e7f3      	b.n	8007284 <_dtoa_r+0x25c>
 800729c:	2300      	movs	r3, #0
 800729e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a0:	9308      	str	r3, [sp, #32]
 80072a2:	9b00      	ldr	r3, [sp, #0]
 80072a4:	4413      	add	r3, r2
 80072a6:	9302      	str	r3, [sp, #8]
 80072a8:	3301      	adds	r3, #1
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	9303      	str	r3, [sp, #12]
 80072ae:	bfb8      	it	lt
 80072b0:	2301      	movlt	r3, #1
 80072b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80072b4:	2200      	movs	r2, #0
 80072b6:	6042      	str	r2, [r0, #4]
 80072b8:	2204      	movs	r2, #4
 80072ba:	f102 0614 	add.w	r6, r2, #20
 80072be:	429e      	cmp	r6, r3
 80072c0:	6841      	ldr	r1, [r0, #4]
 80072c2:	d93d      	bls.n	8007340 <_dtoa_r+0x318>
 80072c4:	4620      	mov	r0, r4
 80072c6:	f001 fa57 	bl	8008778 <_Balloc>
 80072ca:	9001      	str	r0, [sp, #4]
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d13b      	bne.n	8007348 <_dtoa_r+0x320>
 80072d0:	4b11      	ldr	r3, [pc, #68]	; (8007318 <_dtoa_r+0x2f0>)
 80072d2:	4602      	mov	r2, r0
 80072d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072d8:	e6c0      	b.n	800705c <_dtoa_r+0x34>
 80072da:	2301      	movs	r3, #1
 80072dc:	e7df      	b.n	800729e <_dtoa_r+0x276>
 80072de:	bf00      	nop
 80072e0:	636f4361 	.word	0x636f4361
 80072e4:	3fd287a7 	.word	0x3fd287a7
 80072e8:	8b60c8b3 	.word	0x8b60c8b3
 80072ec:	3fc68a28 	.word	0x3fc68a28
 80072f0:	509f79fb 	.word	0x509f79fb
 80072f4:	3fd34413 	.word	0x3fd34413
 80072f8:	0800a35e 	.word	0x0800a35e
 80072fc:	0800a375 	.word	0x0800a375
 8007300:	7ff00000 	.word	0x7ff00000
 8007304:	0800a35a 	.word	0x0800a35a
 8007308:	0800a351 	.word	0x0800a351
 800730c:	0800a1d5 	.word	0x0800a1d5
 8007310:	3ff80000 	.word	0x3ff80000
 8007314:	0800a548 	.word	0x0800a548
 8007318:	0800a3d0 	.word	0x0800a3d0
 800731c:	2501      	movs	r5, #1
 800731e:	2300      	movs	r3, #0
 8007320:	9306      	str	r3, [sp, #24]
 8007322:	9508      	str	r5, [sp, #32]
 8007324:	f04f 33ff 	mov.w	r3, #4294967295
 8007328:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	2312      	movs	r3, #18
 8007330:	e7b0      	b.n	8007294 <_dtoa_r+0x26c>
 8007332:	2301      	movs	r3, #1
 8007334:	9308      	str	r3, [sp, #32]
 8007336:	e7f5      	b.n	8007324 <_dtoa_r+0x2fc>
 8007338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800733e:	e7b8      	b.n	80072b2 <_dtoa_r+0x28a>
 8007340:	3101      	adds	r1, #1
 8007342:	6041      	str	r1, [r0, #4]
 8007344:	0052      	lsls	r2, r2, #1
 8007346:	e7b8      	b.n	80072ba <_dtoa_r+0x292>
 8007348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800734a:	9a01      	ldr	r2, [sp, #4]
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	2b0e      	cmp	r3, #14
 8007352:	f200 809d 	bhi.w	8007490 <_dtoa_r+0x468>
 8007356:	2d00      	cmp	r5, #0
 8007358:	f000 809a 	beq.w	8007490 <_dtoa_r+0x468>
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	dd32      	ble.n	80073c8 <_dtoa_r+0x3a0>
 8007362:	4ab7      	ldr	r2, [pc, #732]	; (8007640 <_dtoa_r+0x618>)
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800736c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007370:	9b00      	ldr	r3, [sp, #0]
 8007372:	05d8      	lsls	r0, r3, #23
 8007374:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007378:	d516      	bpl.n	80073a8 <_dtoa_r+0x380>
 800737a:	4bb2      	ldr	r3, [pc, #712]	; (8007644 <_dtoa_r+0x61c>)
 800737c:	ec51 0b19 	vmov	r0, r1, d9
 8007380:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007384:	f7f9 fa82 	bl	800088c <__aeabi_ddiv>
 8007388:	f007 070f 	and.w	r7, r7, #15
 800738c:	4682      	mov	sl, r0
 800738e:	468b      	mov	fp, r1
 8007390:	2503      	movs	r5, #3
 8007392:	4eac      	ldr	r6, [pc, #688]	; (8007644 <_dtoa_r+0x61c>)
 8007394:	b957      	cbnz	r7, 80073ac <_dtoa_r+0x384>
 8007396:	4642      	mov	r2, r8
 8007398:	464b      	mov	r3, r9
 800739a:	4650      	mov	r0, sl
 800739c:	4659      	mov	r1, fp
 800739e:	f7f9 fa75 	bl	800088c <__aeabi_ddiv>
 80073a2:	4682      	mov	sl, r0
 80073a4:	468b      	mov	fp, r1
 80073a6:	e028      	b.n	80073fa <_dtoa_r+0x3d2>
 80073a8:	2502      	movs	r5, #2
 80073aa:	e7f2      	b.n	8007392 <_dtoa_r+0x36a>
 80073ac:	07f9      	lsls	r1, r7, #31
 80073ae:	d508      	bpl.n	80073c2 <_dtoa_r+0x39a>
 80073b0:	4640      	mov	r0, r8
 80073b2:	4649      	mov	r1, r9
 80073b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073b8:	f7f9 f93e 	bl	8000638 <__aeabi_dmul>
 80073bc:	3501      	adds	r5, #1
 80073be:	4680      	mov	r8, r0
 80073c0:	4689      	mov	r9, r1
 80073c2:	107f      	asrs	r7, r7, #1
 80073c4:	3608      	adds	r6, #8
 80073c6:	e7e5      	b.n	8007394 <_dtoa_r+0x36c>
 80073c8:	f000 809b 	beq.w	8007502 <_dtoa_r+0x4da>
 80073cc:	9b00      	ldr	r3, [sp, #0]
 80073ce:	4f9d      	ldr	r7, [pc, #628]	; (8007644 <_dtoa_r+0x61c>)
 80073d0:	425e      	negs	r6, r3
 80073d2:	4b9b      	ldr	r3, [pc, #620]	; (8007640 <_dtoa_r+0x618>)
 80073d4:	f006 020f 	and.w	r2, r6, #15
 80073d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	ec51 0b19 	vmov	r0, r1, d9
 80073e4:	f7f9 f928 	bl	8000638 <__aeabi_dmul>
 80073e8:	1136      	asrs	r6, r6, #4
 80073ea:	4682      	mov	sl, r0
 80073ec:	468b      	mov	fp, r1
 80073ee:	2300      	movs	r3, #0
 80073f0:	2502      	movs	r5, #2
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d17a      	bne.n	80074ec <_dtoa_r+0x4c4>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1d3      	bne.n	80073a2 <_dtoa_r+0x37a>
 80073fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8082 	beq.w	8007506 <_dtoa_r+0x4de>
 8007402:	4b91      	ldr	r3, [pc, #580]	; (8007648 <_dtoa_r+0x620>)
 8007404:	2200      	movs	r2, #0
 8007406:	4650      	mov	r0, sl
 8007408:	4659      	mov	r1, fp
 800740a:	f7f9 fb87 	bl	8000b1c <__aeabi_dcmplt>
 800740e:	2800      	cmp	r0, #0
 8007410:	d079      	beq.n	8007506 <_dtoa_r+0x4de>
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d076      	beq.n	8007506 <_dtoa_r+0x4de>
 8007418:	9b02      	ldr	r3, [sp, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	dd36      	ble.n	800748c <_dtoa_r+0x464>
 800741e:	9b00      	ldr	r3, [sp, #0]
 8007420:	4650      	mov	r0, sl
 8007422:	4659      	mov	r1, fp
 8007424:	1e5f      	subs	r7, r3, #1
 8007426:	2200      	movs	r2, #0
 8007428:	4b88      	ldr	r3, [pc, #544]	; (800764c <_dtoa_r+0x624>)
 800742a:	f7f9 f905 	bl	8000638 <__aeabi_dmul>
 800742e:	9e02      	ldr	r6, [sp, #8]
 8007430:	4682      	mov	sl, r0
 8007432:	468b      	mov	fp, r1
 8007434:	3501      	adds	r5, #1
 8007436:	4628      	mov	r0, r5
 8007438:	f7f9 f894 	bl	8000564 <__aeabi_i2d>
 800743c:	4652      	mov	r2, sl
 800743e:	465b      	mov	r3, fp
 8007440:	f7f9 f8fa 	bl	8000638 <__aeabi_dmul>
 8007444:	4b82      	ldr	r3, [pc, #520]	; (8007650 <_dtoa_r+0x628>)
 8007446:	2200      	movs	r2, #0
 8007448:	f7f8 ff40 	bl	80002cc <__adddf3>
 800744c:	46d0      	mov	r8, sl
 800744e:	46d9      	mov	r9, fp
 8007450:	4682      	mov	sl, r0
 8007452:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007456:	2e00      	cmp	r6, #0
 8007458:	d158      	bne.n	800750c <_dtoa_r+0x4e4>
 800745a:	4b7e      	ldr	r3, [pc, #504]	; (8007654 <_dtoa_r+0x62c>)
 800745c:	2200      	movs	r2, #0
 800745e:	4640      	mov	r0, r8
 8007460:	4649      	mov	r1, r9
 8007462:	f7f8 ff31 	bl	80002c8 <__aeabi_dsub>
 8007466:	4652      	mov	r2, sl
 8007468:	465b      	mov	r3, fp
 800746a:	4680      	mov	r8, r0
 800746c:	4689      	mov	r9, r1
 800746e:	f7f9 fb73 	bl	8000b58 <__aeabi_dcmpgt>
 8007472:	2800      	cmp	r0, #0
 8007474:	f040 8295 	bne.w	80079a2 <_dtoa_r+0x97a>
 8007478:	4652      	mov	r2, sl
 800747a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800747e:	4640      	mov	r0, r8
 8007480:	4649      	mov	r1, r9
 8007482:	f7f9 fb4b 	bl	8000b1c <__aeabi_dcmplt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f040 8289 	bne.w	800799e <_dtoa_r+0x976>
 800748c:	ec5b ab19 	vmov	sl, fp, d9
 8007490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007492:	2b00      	cmp	r3, #0
 8007494:	f2c0 8148 	blt.w	8007728 <_dtoa_r+0x700>
 8007498:	9a00      	ldr	r2, [sp, #0]
 800749a:	2a0e      	cmp	r2, #14
 800749c:	f300 8144 	bgt.w	8007728 <_dtoa_r+0x700>
 80074a0:	4b67      	ldr	r3, [pc, #412]	; (8007640 <_dtoa_r+0x618>)
 80074a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f280 80d5 	bge.w	800765c <_dtoa_r+0x634>
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f300 80d1 	bgt.w	800765c <_dtoa_r+0x634>
 80074ba:	f040 826f 	bne.w	800799c <_dtoa_r+0x974>
 80074be:	4b65      	ldr	r3, [pc, #404]	; (8007654 <_dtoa_r+0x62c>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f9 f8b7 	bl	8000638 <__aeabi_dmul>
 80074ca:	4652      	mov	r2, sl
 80074cc:	465b      	mov	r3, fp
 80074ce:	f7f9 fb39 	bl	8000b44 <__aeabi_dcmpge>
 80074d2:	9e03      	ldr	r6, [sp, #12]
 80074d4:	4637      	mov	r7, r6
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f040 8245 	bne.w	8007966 <_dtoa_r+0x93e>
 80074dc:	9d01      	ldr	r5, [sp, #4]
 80074de:	2331      	movs	r3, #49	; 0x31
 80074e0:	f805 3b01 	strb.w	r3, [r5], #1
 80074e4:	9b00      	ldr	r3, [sp, #0]
 80074e6:	3301      	adds	r3, #1
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	e240      	b.n	800796e <_dtoa_r+0x946>
 80074ec:	07f2      	lsls	r2, r6, #31
 80074ee:	d505      	bpl.n	80074fc <_dtoa_r+0x4d4>
 80074f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f4:	f7f9 f8a0 	bl	8000638 <__aeabi_dmul>
 80074f8:	3501      	adds	r5, #1
 80074fa:	2301      	movs	r3, #1
 80074fc:	1076      	asrs	r6, r6, #1
 80074fe:	3708      	adds	r7, #8
 8007500:	e777      	b.n	80073f2 <_dtoa_r+0x3ca>
 8007502:	2502      	movs	r5, #2
 8007504:	e779      	b.n	80073fa <_dtoa_r+0x3d2>
 8007506:	9f00      	ldr	r7, [sp, #0]
 8007508:	9e03      	ldr	r6, [sp, #12]
 800750a:	e794      	b.n	8007436 <_dtoa_r+0x40e>
 800750c:	9901      	ldr	r1, [sp, #4]
 800750e:	4b4c      	ldr	r3, [pc, #304]	; (8007640 <_dtoa_r+0x618>)
 8007510:	4431      	add	r1, r6
 8007512:	910d      	str	r1, [sp, #52]	; 0x34
 8007514:	9908      	ldr	r1, [sp, #32]
 8007516:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800751a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800751e:	2900      	cmp	r1, #0
 8007520:	d043      	beq.n	80075aa <_dtoa_r+0x582>
 8007522:	494d      	ldr	r1, [pc, #308]	; (8007658 <_dtoa_r+0x630>)
 8007524:	2000      	movs	r0, #0
 8007526:	f7f9 f9b1 	bl	800088c <__aeabi_ddiv>
 800752a:	4652      	mov	r2, sl
 800752c:	465b      	mov	r3, fp
 800752e:	f7f8 fecb 	bl	80002c8 <__aeabi_dsub>
 8007532:	9d01      	ldr	r5, [sp, #4]
 8007534:	4682      	mov	sl, r0
 8007536:	468b      	mov	fp, r1
 8007538:	4649      	mov	r1, r9
 800753a:	4640      	mov	r0, r8
 800753c:	f7f9 fb2c 	bl	8000b98 <__aeabi_d2iz>
 8007540:	4606      	mov	r6, r0
 8007542:	f7f9 f80f 	bl	8000564 <__aeabi_i2d>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4640      	mov	r0, r8
 800754c:	4649      	mov	r1, r9
 800754e:	f7f8 febb 	bl	80002c8 <__aeabi_dsub>
 8007552:	3630      	adds	r6, #48	; 0x30
 8007554:	f805 6b01 	strb.w	r6, [r5], #1
 8007558:	4652      	mov	r2, sl
 800755a:	465b      	mov	r3, fp
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	f7f9 fadc 	bl	8000b1c <__aeabi_dcmplt>
 8007564:	2800      	cmp	r0, #0
 8007566:	d163      	bne.n	8007630 <_dtoa_r+0x608>
 8007568:	4642      	mov	r2, r8
 800756a:	464b      	mov	r3, r9
 800756c:	4936      	ldr	r1, [pc, #216]	; (8007648 <_dtoa_r+0x620>)
 800756e:	2000      	movs	r0, #0
 8007570:	f7f8 feaa 	bl	80002c8 <__aeabi_dsub>
 8007574:	4652      	mov	r2, sl
 8007576:	465b      	mov	r3, fp
 8007578:	f7f9 fad0 	bl	8000b1c <__aeabi_dcmplt>
 800757c:	2800      	cmp	r0, #0
 800757e:	f040 80b5 	bne.w	80076ec <_dtoa_r+0x6c4>
 8007582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007584:	429d      	cmp	r5, r3
 8007586:	d081      	beq.n	800748c <_dtoa_r+0x464>
 8007588:	4b30      	ldr	r3, [pc, #192]	; (800764c <_dtoa_r+0x624>)
 800758a:	2200      	movs	r2, #0
 800758c:	4650      	mov	r0, sl
 800758e:	4659      	mov	r1, fp
 8007590:	f7f9 f852 	bl	8000638 <__aeabi_dmul>
 8007594:	4b2d      	ldr	r3, [pc, #180]	; (800764c <_dtoa_r+0x624>)
 8007596:	4682      	mov	sl, r0
 8007598:	468b      	mov	fp, r1
 800759a:	4640      	mov	r0, r8
 800759c:	4649      	mov	r1, r9
 800759e:	2200      	movs	r2, #0
 80075a0:	f7f9 f84a 	bl	8000638 <__aeabi_dmul>
 80075a4:	4680      	mov	r8, r0
 80075a6:	4689      	mov	r9, r1
 80075a8:	e7c6      	b.n	8007538 <_dtoa_r+0x510>
 80075aa:	4650      	mov	r0, sl
 80075ac:	4659      	mov	r1, fp
 80075ae:	f7f9 f843 	bl	8000638 <__aeabi_dmul>
 80075b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b4:	9d01      	ldr	r5, [sp, #4]
 80075b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80075b8:	4682      	mov	sl, r0
 80075ba:	468b      	mov	fp, r1
 80075bc:	4649      	mov	r1, r9
 80075be:	4640      	mov	r0, r8
 80075c0:	f7f9 faea 	bl	8000b98 <__aeabi_d2iz>
 80075c4:	4606      	mov	r6, r0
 80075c6:	f7f8 ffcd 	bl	8000564 <__aeabi_i2d>
 80075ca:	3630      	adds	r6, #48	; 0x30
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4640      	mov	r0, r8
 80075d2:	4649      	mov	r1, r9
 80075d4:	f7f8 fe78 	bl	80002c8 <__aeabi_dsub>
 80075d8:	f805 6b01 	strb.w	r6, [r5], #1
 80075dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075de:	429d      	cmp	r5, r3
 80075e0:	4680      	mov	r8, r0
 80075e2:	4689      	mov	r9, r1
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	d124      	bne.n	8007634 <_dtoa_r+0x60c>
 80075ea:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <_dtoa_r+0x630>)
 80075ec:	4650      	mov	r0, sl
 80075ee:	4659      	mov	r1, fp
 80075f0:	f7f8 fe6c 	bl	80002cc <__adddf3>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4640      	mov	r0, r8
 80075fa:	4649      	mov	r1, r9
 80075fc:	f7f9 faac 	bl	8000b58 <__aeabi_dcmpgt>
 8007600:	2800      	cmp	r0, #0
 8007602:	d173      	bne.n	80076ec <_dtoa_r+0x6c4>
 8007604:	4652      	mov	r2, sl
 8007606:	465b      	mov	r3, fp
 8007608:	4913      	ldr	r1, [pc, #76]	; (8007658 <_dtoa_r+0x630>)
 800760a:	2000      	movs	r0, #0
 800760c:	f7f8 fe5c 	bl	80002c8 <__aeabi_dsub>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7f9 fa80 	bl	8000b1c <__aeabi_dcmplt>
 800761c:	2800      	cmp	r0, #0
 800761e:	f43f af35 	beq.w	800748c <_dtoa_r+0x464>
 8007622:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007624:	1e6b      	subs	r3, r5, #1
 8007626:	930f      	str	r3, [sp, #60]	; 0x3c
 8007628:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800762c:	2b30      	cmp	r3, #48	; 0x30
 800762e:	d0f8      	beq.n	8007622 <_dtoa_r+0x5fa>
 8007630:	9700      	str	r7, [sp, #0]
 8007632:	e049      	b.n	80076c8 <_dtoa_r+0x6a0>
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <_dtoa_r+0x624>)
 8007636:	f7f8 ffff 	bl	8000638 <__aeabi_dmul>
 800763a:	4680      	mov	r8, r0
 800763c:	4689      	mov	r9, r1
 800763e:	e7bd      	b.n	80075bc <_dtoa_r+0x594>
 8007640:	0800a548 	.word	0x0800a548
 8007644:	0800a520 	.word	0x0800a520
 8007648:	3ff00000 	.word	0x3ff00000
 800764c:	40240000 	.word	0x40240000
 8007650:	401c0000 	.word	0x401c0000
 8007654:	40140000 	.word	0x40140000
 8007658:	3fe00000 	.word	0x3fe00000
 800765c:	9d01      	ldr	r5, [sp, #4]
 800765e:	4656      	mov	r6, sl
 8007660:	465f      	mov	r7, fp
 8007662:	4642      	mov	r2, r8
 8007664:	464b      	mov	r3, r9
 8007666:	4630      	mov	r0, r6
 8007668:	4639      	mov	r1, r7
 800766a:	f7f9 f90f 	bl	800088c <__aeabi_ddiv>
 800766e:	f7f9 fa93 	bl	8000b98 <__aeabi_d2iz>
 8007672:	4682      	mov	sl, r0
 8007674:	f7f8 ff76 	bl	8000564 <__aeabi_i2d>
 8007678:	4642      	mov	r2, r8
 800767a:	464b      	mov	r3, r9
 800767c:	f7f8 ffdc 	bl	8000638 <__aeabi_dmul>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4630      	mov	r0, r6
 8007686:	4639      	mov	r1, r7
 8007688:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800768c:	f7f8 fe1c 	bl	80002c8 <__aeabi_dsub>
 8007690:	f805 6b01 	strb.w	r6, [r5], #1
 8007694:	9e01      	ldr	r6, [sp, #4]
 8007696:	9f03      	ldr	r7, [sp, #12]
 8007698:	1bae      	subs	r6, r5, r6
 800769a:	42b7      	cmp	r7, r6
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	d135      	bne.n	800770e <_dtoa_r+0x6e6>
 80076a2:	f7f8 fe13 	bl	80002cc <__adddf3>
 80076a6:	4642      	mov	r2, r8
 80076a8:	464b      	mov	r3, r9
 80076aa:	4606      	mov	r6, r0
 80076ac:	460f      	mov	r7, r1
 80076ae:	f7f9 fa53 	bl	8000b58 <__aeabi_dcmpgt>
 80076b2:	b9d0      	cbnz	r0, 80076ea <_dtoa_r+0x6c2>
 80076b4:	4642      	mov	r2, r8
 80076b6:	464b      	mov	r3, r9
 80076b8:	4630      	mov	r0, r6
 80076ba:	4639      	mov	r1, r7
 80076bc:	f7f9 fa24 	bl	8000b08 <__aeabi_dcmpeq>
 80076c0:	b110      	cbz	r0, 80076c8 <_dtoa_r+0x6a0>
 80076c2:	f01a 0f01 	tst.w	sl, #1
 80076c6:	d110      	bne.n	80076ea <_dtoa_r+0x6c2>
 80076c8:	4620      	mov	r0, r4
 80076ca:	ee18 1a10 	vmov	r1, s16
 80076ce:	f001 f893 	bl	80087f8 <_Bfree>
 80076d2:	2300      	movs	r3, #0
 80076d4:	9800      	ldr	r0, [sp, #0]
 80076d6:	702b      	strb	r3, [r5, #0]
 80076d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076da:	3001      	adds	r0, #1
 80076dc:	6018      	str	r0, [r3, #0]
 80076de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f43f acf1 	beq.w	80070c8 <_dtoa_r+0xa0>
 80076e6:	601d      	str	r5, [r3, #0]
 80076e8:	e4ee      	b.n	80070c8 <_dtoa_r+0xa0>
 80076ea:	9f00      	ldr	r7, [sp, #0]
 80076ec:	462b      	mov	r3, r5
 80076ee:	461d      	mov	r5, r3
 80076f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076f4:	2a39      	cmp	r2, #57	; 0x39
 80076f6:	d106      	bne.n	8007706 <_dtoa_r+0x6de>
 80076f8:	9a01      	ldr	r2, [sp, #4]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d1f7      	bne.n	80076ee <_dtoa_r+0x6c6>
 80076fe:	9901      	ldr	r1, [sp, #4]
 8007700:	2230      	movs	r2, #48	; 0x30
 8007702:	3701      	adds	r7, #1
 8007704:	700a      	strb	r2, [r1, #0]
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	3201      	adds	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e790      	b.n	8007630 <_dtoa_r+0x608>
 800770e:	4ba6      	ldr	r3, [pc, #664]	; (80079a8 <_dtoa_r+0x980>)
 8007710:	2200      	movs	r2, #0
 8007712:	f7f8 ff91 	bl	8000638 <__aeabi_dmul>
 8007716:	2200      	movs	r2, #0
 8007718:	2300      	movs	r3, #0
 800771a:	4606      	mov	r6, r0
 800771c:	460f      	mov	r7, r1
 800771e:	f7f9 f9f3 	bl	8000b08 <__aeabi_dcmpeq>
 8007722:	2800      	cmp	r0, #0
 8007724:	d09d      	beq.n	8007662 <_dtoa_r+0x63a>
 8007726:	e7cf      	b.n	80076c8 <_dtoa_r+0x6a0>
 8007728:	9a08      	ldr	r2, [sp, #32]
 800772a:	2a00      	cmp	r2, #0
 800772c:	f000 80d7 	beq.w	80078de <_dtoa_r+0x8b6>
 8007730:	9a06      	ldr	r2, [sp, #24]
 8007732:	2a01      	cmp	r2, #1
 8007734:	f300 80ba 	bgt.w	80078ac <_dtoa_r+0x884>
 8007738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800773a:	2a00      	cmp	r2, #0
 800773c:	f000 80b2 	beq.w	80078a4 <_dtoa_r+0x87c>
 8007740:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007744:	9e07      	ldr	r6, [sp, #28]
 8007746:	9d04      	ldr	r5, [sp, #16]
 8007748:	9a04      	ldr	r2, [sp, #16]
 800774a:	441a      	add	r2, r3
 800774c:	9204      	str	r2, [sp, #16]
 800774e:	9a05      	ldr	r2, [sp, #20]
 8007750:	2101      	movs	r1, #1
 8007752:	441a      	add	r2, r3
 8007754:	4620      	mov	r0, r4
 8007756:	9205      	str	r2, [sp, #20]
 8007758:	f001 f950 	bl	80089fc <__i2b>
 800775c:	4607      	mov	r7, r0
 800775e:	2d00      	cmp	r5, #0
 8007760:	dd0c      	ble.n	800777c <_dtoa_r+0x754>
 8007762:	9b05      	ldr	r3, [sp, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	dd09      	ble.n	800777c <_dtoa_r+0x754>
 8007768:	42ab      	cmp	r3, r5
 800776a:	9a04      	ldr	r2, [sp, #16]
 800776c:	bfa8      	it	ge
 800776e:	462b      	movge	r3, r5
 8007770:	1ad2      	subs	r2, r2, r3
 8007772:	9204      	str	r2, [sp, #16]
 8007774:	9a05      	ldr	r2, [sp, #20]
 8007776:	1aed      	subs	r5, r5, r3
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	9305      	str	r3, [sp, #20]
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	b31b      	cbz	r3, 80077c8 <_dtoa_r+0x7a0>
 8007780:	9b08      	ldr	r3, [sp, #32]
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 80af 	beq.w	80078e6 <_dtoa_r+0x8be>
 8007788:	2e00      	cmp	r6, #0
 800778a:	dd13      	ble.n	80077b4 <_dtoa_r+0x78c>
 800778c:	4639      	mov	r1, r7
 800778e:	4632      	mov	r2, r6
 8007790:	4620      	mov	r0, r4
 8007792:	f001 f9f3 	bl	8008b7c <__pow5mult>
 8007796:	ee18 2a10 	vmov	r2, s16
 800779a:	4601      	mov	r1, r0
 800779c:	4607      	mov	r7, r0
 800779e:	4620      	mov	r0, r4
 80077a0:	f001 f942 	bl	8008a28 <__multiply>
 80077a4:	ee18 1a10 	vmov	r1, s16
 80077a8:	4680      	mov	r8, r0
 80077aa:	4620      	mov	r0, r4
 80077ac:	f001 f824 	bl	80087f8 <_Bfree>
 80077b0:	ee08 8a10 	vmov	s16, r8
 80077b4:	9b07      	ldr	r3, [sp, #28]
 80077b6:	1b9a      	subs	r2, r3, r6
 80077b8:	d006      	beq.n	80077c8 <_dtoa_r+0x7a0>
 80077ba:	ee18 1a10 	vmov	r1, s16
 80077be:	4620      	mov	r0, r4
 80077c0:	f001 f9dc 	bl	8008b7c <__pow5mult>
 80077c4:	ee08 0a10 	vmov	s16, r0
 80077c8:	2101      	movs	r1, #1
 80077ca:	4620      	mov	r0, r4
 80077cc:	f001 f916 	bl	80089fc <__i2b>
 80077d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	4606      	mov	r6, r0
 80077d6:	f340 8088 	ble.w	80078ea <_dtoa_r+0x8c2>
 80077da:	461a      	mov	r2, r3
 80077dc:	4601      	mov	r1, r0
 80077de:	4620      	mov	r0, r4
 80077e0:	f001 f9cc 	bl	8008b7c <__pow5mult>
 80077e4:	9b06      	ldr	r3, [sp, #24]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	4606      	mov	r6, r0
 80077ea:	f340 8081 	ble.w	80078f0 <_dtoa_r+0x8c8>
 80077ee:	f04f 0800 	mov.w	r8, #0
 80077f2:	6933      	ldr	r3, [r6, #16]
 80077f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077f8:	6918      	ldr	r0, [r3, #16]
 80077fa:	f001 f8af 	bl	800895c <__hi0bits>
 80077fe:	f1c0 0020 	rsb	r0, r0, #32
 8007802:	9b05      	ldr	r3, [sp, #20]
 8007804:	4418      	add	r0, r3
 8007806:	f010 001f 	ands.w	r0, r0, #31
 800780a:	f000 8092 	beq.w	8007932 <_dtoa_r+0x90a>
 800780e:	f1c0 0320 	rsb	r3, r0, #32
 8007812:	2b04      	cmp	r3, #4
 8007814:	f340 808a 	ble.w	800792c <_dtoa_r+0x904>
 8007818:	f1c0 001c 	rsb	r0, r0, #28
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	4403      	add	r3, r0
 8007820:	9304      	str	r3, [sp, #16]
 8007822:	9b05      	ldr	r3, [sp, #20]
 8007824:	4403      	add	r3, r0
 8007826:	4405      	add	r5, r0
 8007828:	9305      	str	r3, [sp, #20]
 800782a:	9b04      	ldr	r3, [sp, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	dd07      	ble.n	8007840 <_dtoa_r+0x818>
 8007830:	ee18 1a10 	vmov	r1, s16
 8007834:	461a      	mov	r2, r3
 8007836:	4620      	mov	r0, r4
 8007838:	f001 f9fa 	bl	8008c30 <__lshift>
 800783c:	ee08 0a10 	vmov	s16, r0
 8007840:	9b05      	ldr	r3, [sp, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	dd05      	ble.n	8007852 <_dtoa_r+0x82a>
 8007846:	4631      	mov	r1, r6
 8007848:	461a      	mov	r2, r3
 800784a:	4620      	mov	r0, r4
 800784c:	f001 f9f0 	bl	8008c30 <__lshift>
 8007850:	4606      	mov	r6, r0
 8007852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d06e      	beq.n	8007936 <_dtoa_r+0x90e>
 8007858:	ee18 0a10 	vmov	r0, s16
 800785c:	4631      	mov	r1, r6
 800785e:	f001 fa57 	bl	8008d10 <__mcmp>
 8007862:	2800      	cmp	r0, #0
 8007864:	da67      	bge.n	8007936 <_dtoa_r+0x90e>
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	3b01      	subs	r3, #1
 800786a:	ee18 1a10 	vmov	r1, s16
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	220a      	movs	r2, #10
 8007872:	2300      	movs	r3, #0
 8007874:	4620      	mov	r0, r4
 8007876:	f000 ffe1 	bl	800883c <__multadd>
 800787a:	9b08      	ldr	r3, [sp, #32]
 800787c:	ee08 0a10 	vmov	s16, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 81b1 	beq.w	8007be8 <_dtoa_r+0xbc0>
 8007886:	2300      	movs	r3, #0
 8007888:	4639      	mov	r1, r7
 800788a:	220a      	movs	r2, #10
 800788c:	4620      	mov	r0, r4
 800788e:	f000 ffd5 	bl	800883c <__multadd>
 8007892:	9b02      	ldr	r3, [sp, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	4607      	mov	r7, r0
 8007898:	f300 808e 	bgt.w	80079b8 <_dtoa_r+0x990>
 800789c:	9b06      	ldr	r3, [sp, #24]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	dc51      	bgt.n	8007946 <_dtoa_r+0x91e>
 80078a2:	e089      	b.n	80079b8 <_dtoa_r+0x990>
 80078a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078aa:	e74b      	b.n	8007744 <_dtoa_r+0x71c>
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	1e5e      	subs	r6, r3, #1
 80078b0:	9b07      	ldr	r3, [sp, #28]
 80078b2:	42b3      	cmp	r3, r6
 80078b4:	bfbf      	itttt	lt
 80078b6:	9b07      	ldrlt	r3, [sp, #28]
 80078b8:	9607      	strlt	r6, [sp, #28]
 80078ba:	1af2      	sublt	r2, r6, r3
 80078bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078be:	bfb6      	itet	lt
 80078c0:	189b      	addlt	r3, r3, r2
 80078c2:	1b9e      	subge	r6, r3, r6
 80078c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	bfb8      	it	lt
 80078ca:	2600      	movlt	r6, #0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bfb7      	itett	lt
 80078d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80078d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078d8:	1a9d      	sublt	r5, r3, r2
 80078da:	2300      	movlt	r3, #0
 80078dc:	e734      	b.n	8007748 <_dtoa_r+0x720>
 80078de:	9e07      	ldr	r6, [sp, #28]
 80078e0:	9d04      	ldr	r5, [sp, #16]
 80078e2:	9f08      	ldr	r7, [sp, #32]
 80078e4:	e73b      	b.n	800775e <_dtoa_r+0x736>
 80078e6:	9a07      	ldr	r2, [sp, #28]
 80078e8:	e767      	b.n	80077ba <_dtoa_r+0x792>
 80078ea:	9b06      	ldr	r3, [sp, #24]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	dc18      	bgt.n	8007922 <_dtoa_r+0x8fa>
 80078f0:	f1ba 0f00 	cmp.w	sl, #0
 80078f4:	d115      	bne.n	8007922 <_dtoa_r+0x8fa>
 80078f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078fa:	b993      	cbnz	r3, 8007922 <_dtoa_r+0x8fa>
 80078fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007900:	0d1b      	lsrs	r3, r3, #20
 8007902:	051b      	lsls	r3, r3, #20
 8007904:	b183      	cbz	r3, 8007928 <_dtoa_r+0x900>
 8007906:	9b04      	ldr	r3, [sp, #16]
 8007908:	3301      	adds	r3, #1
 800790a:	9304      	str	r3, [sp, #16]
 800790c:	9b05      	ldr	r3, [sp, #20]
 800790e:	3301      	adds	r3, #1
 8007910:	9305      	str	r3, [sp, #20]
 8007912:	f04f 0801 	mov.w	r8, #1
 8007916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007918:	2b00      	cmp	r3, #0
 800791a:	f47f af6a 	bne.w	80077f2 <_dtoa_r+0x7ca>
 800791e:	2001      	movs	r0, #1
 8007920:	e76f      	b.n	8007802 <_dtoa_r+0x7da>
 8007922:	f04f 0800 	mov.w	r8, #0
 8007926:	e7f6      	b.n	8007916 <_dtoa_r+0x8ee>
 8007928:	4698      	mov	r8, r3
 800792a:	e7f4      	b.n	8007916 <_dtoa_r+0x8ee>
 800792c:	f43f af7d 	beq.w	800782a <_dtoa_r+0x802>
 8007930:	4618      	mov	r0, r3
 8007932:	301c      	adds	r0, #28
 8007934:	e772      	b.n	800781c <_dtoa_r+0x7f4>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	dc37      	bgt.n	80079ac <_dtoa_r+0x984>
 800793c:	9b06      	ldr	r3, [sp, #24]
 800793e:	2b02      	cmp	r3, #2
 8007940:	dd34      	ble.n	80079ac <_dtoa_r+0x984>
 8007942:	9b03      	ldr	r3, [sp, #12]
 8007944:	9302      	str	r3, [sp, #8]
 8007946:	9b02      	ldr	r3, [sp, #8]
 8007948:	b96b      	cbnz	r3, 8007966 <_dtoa_r+0x93e>
 800794a:	4631      	mov	r1, r6
 800794c:	2205      	movs	r2, #5
 800794e:	4620      	mov	r0, r4
 8007950:	f000 ff74 	bl	800883c <__multadd>
 8007954:	4601      	mov	r1, r0
 8007956:	4606      	mov	r6, r0
 8007958:	ee18 0a10 	vmov	r0, s16
 800795c:	f001 f9d8 	bl	8008d10 <__mcmp>
 8007960:	2800      	cmp	r0, #0
 8007962:	f73f adbb 	bgt.w	80074dc <_dtoa_r+0x4b4>
 8007966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007968:	9d01      	ldr	r5, [sp, #4]
 800796a:	43db      	mvns	r3, r3
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	f04f 0800 	mov.w	r8, #0
 8007972:	4631      	mov	r1, r6
 8007974:	4620      	mov	r0, r4
 8007976:	f000 ff3f 	bl	80087f8 <_Bfree>
 800797a:	2f00      	cmp	r7, #0
 800797c:	f43f aea4 	beq.w	80076c8 <_dtoa_r+0x6a0>
 8007980:	f1b8 0f00 	cmp.w	r8, #0
 8007984:	d005      	beq.n	8007992 <_dtoa_r+0x96a>
 8007986:	45b8      	cmp	r8, r7
 8007988:	d003      	beq.n	8007992 <_dtoa_r+0x96a>
 800798a:	4641      	mov	r1, r8
 800798c:	4620      	mov	r0, r4
 800798e:	f000 ff33 	bl	80087f8 <_Bfree>
 8007992:	4639      	mov	r1, r7
 8007994:	4620      	mov	r0, r4
 8007996:	f000 ff2f 	bl	80087f8 <_Bfree>
 800799a:	e695      	b.n	80076c8 <_dtoa_r+0x6a0>
 800799c:	2600      	movs	r6, #0
 800799e:	4637      	mov	r7, r6
 80079a0:	e7e1      	b.n	8007966 <_dtoa_r+0x93e>
 80079a2:	9700      	str	r7, [sp, #0]
 80079a4:	4637      	mov	r7, r6
 80079a6:	e599      	b.n	80074dc <_dtoa_r+0x4b4>
 80079a8:	40240000 	.word	0x40240000
 80079ac:	9b08      	ldr	r3, [sp, #32]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 80ca 	beq.w	8007b48 <_dtoa_r+0xb20>
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	9302      	str	r3, [sp, #8]
 80079b8:	2d00      	cmp	r5, #0
 80079ba:	dd05      	ble.n	80079c8 <_dtoa_r+0x9a0>
 80079bc:	4639      	mov	r1, r7
 80079be:	462a      	mov	r2, r5
 80079c0:	4620      	mov	r0, r4
 80079c2:	f001 f935 	bl	8008c30 <__lshift>
 80079c6:	4607      	mov	r7, r0
 80079c8:	f1b8 0f00 	cmp.w	r8, #0
 80079cc:	d05b      	beq.n	8007a86 <_dtoa_r+0xa5e>
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 fed1 	bl	8008778 <_Balloc>
 80079d6:	4605      	mov	r5, r0
 80079d8:	b928      	cbnz	r0, 80079e6 <_dtoa_r+0x9be>
 80079da:	4b87      	ldr	r3, [pc, #540]	; (8007bf8 <_dtoa_r+0xbd0>)
 80079dc:	4602      	mov	r2, r0
 80079de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079e2:	f7ff bb3b 	b.w	800705c <_dtoa_r+0x34>
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	3202      	adds	r2, #2
 80079ea:	0092      	lsls	r2, r2, #2
 80079ec:	f107 010c 	add.w	r1, r7, #12
 80079f0:	300c      	adds	r0, #12
 80079f2:	f000 feb3 	bl	800875c <memcpy>
 80079f6:	2201      	movs	r2, #1
 80079f8:	4629      	mov	r1, r5
 80079fa:	4620      	mov	r0, r4
 80079fc:	f001 f918 	bl	8008c30 <__lshift>
 8007a00:	9b01      	ldr	r3, [sp, #4]
 8007a02:	f103 0901 	add.w	r9, r3, #1
 8007a06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	9305      	str	r3, [sp, #20]
 8007a0e:	f00a 0301 	and.w	r3, sl, #1
 8007a12:	46b8      	mov	r8, r7
 8007a14:	9304      	str	r3, [sp, #16]
 8007a16:	4607      	mov	r7, r0
 8007a18:	4631      	mov	r1, r6
 8007a1a:	ee18 0a10 	vmov	r0, s16
 8007a1e:	f7ff fa77 	bl	8006f10 <quorem>
 8007a22:	4641      	mov	r1, r8
 8007a24:	9002      	str	r0, [sp, #8]
 8007a26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a2a:	ee18 0a10 	vmov	r0, s16
 8007a2e:	f001 f96f 	bl	8008d10 <__mcmp>
 8007a32:	463a      	mov	r2, r7
 8007a34:	9003      	str	r0, [sp, #12]
 8007a36:	4631      	mov	r1, r6
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f001 f985 	bl	8008d48 <__mdiff>
 8007a3e:	68c2      	ldr	r2, [r0, #12]
 8007a40:	f109 3bff 	add.w	fp, r9, #4294967295
 8007a44:	4605      	mov	r5, r0
 8007a46:	bb02      	cbnz	r2, 8007a8a <_dtoa_r+0xa62>
 8007a48:	4601      	mov	r1, r0
 8007a4a:	ee18 0a10 	vmov	r0, s16
 8007a4e:	f001 f95f 	bl	8008d10 <__mcmp>
 8007a52:	4602      	mov	r2, r0
 8007a54:	4629      	mov	r1, r5
 8007a56:	4620      	mov	r0, r4
 8007a58:	9207      	str	r2, [sp, #28]
 8007a5a:	f000 fecd 	bl	80087f8 <_Bfree>
 8007a5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a62:	ea43 0102 	orr.w	r1, r3, r2
 8007a66:	9b04      	ldr	r3, [sp, #16]
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	464d      	mov	r5, r9
 8007a6c:	d10f      	bne.n	8007a8e <_dtoa_r+0xa66>
 8007a6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a72:	d02a      	beq.n	8007aca <_dtoa_r+0xaa2>
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd02      	ble.n	8007a80 <_dtoa_r+0xa58>
 8007a7a:	9b02      	ldr	r3, [sp, #8]
 8007a7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a80:	f88b a000 	strb.w	sl, [fp]
 8007a84:	e775      	b.n	8007972 <_dtoa_r+0x94a>
 8007a86:	4638      	mov	r0, r7
 8007a88:	e7ba      	b.n	8007a00 <_dtoa_r+0x9d8>
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	e7e2      	b.n	8007a54 <_dtoa_r+0xa2c>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	db04      	blt.n	8007a9e <_dtoa_r+0xa76>
 8007a94:	9906      	ldr	r1, [sp, #24]
 8007a96:	430b      	orrs	r3, r1
 8007a98:	9904      	ldr	r1, [sp, #16]
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	d122      	bne.n	8007ae4 <_dtoa_r+0xabc>
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	ddee      	ble.n	8007a80 <_dtoa_r+0xa58>
 8007aa2:	ee18 1a10 	vmov	r1, s16
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f001 f8c1 	bl	8008c30 <__lshift>
 8007aae:	4631      	mov	r1, r6
 8007ab0:	ee08 0a10 	vmov	s16, r0
 8007ab4:	f001 f92c 	bl	8008d10 <__mcmp>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	dc03      	bgt.n	8007ac4 <_dtoa_r+0xa9c>
 8007abc:	d1e0      	bne.n	8007a80 <_dtoa_r+0xa58>
 8007abe:	f01a 0f01 	tst.w	sl, #1
 8007ac2:	d0dd      	beq.n	8007a80 <_dtoa_r+0xa58>
 8007ac4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ac8:	d1d7      	bne.n	8007a7a <_dtoa_r+0xa52>
 8007aca:	2339      	movs	r3, #57	; 0x39
 8007acc:	f88b 3000 	strb.w	r3, [fp]
 8007ad0:	462b      	mov	r3, r5
 8007ad2:	461d      	mov	r5, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ada:	2a39      	cmp	r2, #57	; 0x39
 8007adc:	d071      	beq.n	8007bc2 <_dtoa_r+0xb9a>
 8007ade:	3201      	adds	r2, #1
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	e746      	b.n	8007972 <_dtoa_r+0x94a>
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	dd07      	ble.n	8007af8 <_dtoa_r+0xad0>
 8007ae8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007aec:	d0ed      	beq.n	8007aca <_dtoa_r+0xaa2>
 8007aee:	f10a 0301 	add.w	r3, sl, #1
 8007af2:	f88b 3000 	strb.w	r3, [fp]
 8007af6:	e73c      	b.n	8007972 <_dtoa_r+0x94a>
 8007af8:	9b05      	ldr	r3, [sp, #20]
 8007afa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007afe:	4599      	cmp	r9, r3
 8007b00:	d047      	beq.n	8007b92 <_dtoa_r+0xb6a>
 8007b02:	ee18 1a10 	vmov	r1, s16
 8007b06:	2300      	movs	r3, #0
 8007b08:	220a      	movs	r2, #10
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fe96 	bl	800883c <__multadd>
 8007b10:	45b8      	cmp	r8, r7
 8007b12:	ee08 0a10 	vmov	s16, r0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	f04f 020a 	mov.w	r2, #10
 8007b1e:	4641      	mov	r1, r8
 8007b20:	4620      	mov	r0, r4
 8007b22:	d106      	bne.n	8007b32 <_dtoa_r+0xb0a>
 8007b24:	f000 fe8a 	bl	800883c <__multadd>
 8007b28:	4680      	mov	r8, r0
 8007b2a:	4607      	mov	r7, r0
 8007b2c:	f109 0901 	add.w	r9, r9, #1
 8007b30:	e772      	b.n	8007a18 <_dtoa_r+0x9f0>
 8007b32:	f000 fe83 	bl	800883c <__multadd>
 8007b36:	4639      	mov	r1, r7
 8007b38:	4680      	mov	r8, r0
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	220a      	movs	r2, #10
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fe7c 	bl	800883c <__multadd>
 8007b44:	4607      	mov	r7, r0
 8007b46:	e7f1      	b.n	8007b2c <_dtoa_r+0xb04>
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	9302      	str	r3, [sp, #8]
 8007b4c:	9d01      	ldr	r5, [sp, #4]
 8007b4e:	ee18 0a10 	vmov	r0, s16
 8007b52:	4631      	mov	r1, r6
 8007b54:	f7ff f9dc 	bl	8006f10 <quorem>
 8007b58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b5c:	9b01      	ldr	r3, [sp, #4]
 8007b5e:	f805 ab01 	strb.w	sl, [r5], #1
 8007b62:	1aea      	subs	r2, r5, r3
 8007b64:	9b02      	ldr	r3, [sp, #8]
 8007b66:	4293      	cmp	r3, r2
 8007b68:	dd09      	ble.n	8007b7e <_dtoa_r+0xb56>
 8007b6a:	ee18 1a10 	vmov	r1, s16
 8007b6e:	2300      	movs	r3, #0
 8007b70:	220a      	movs	r2, #10
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fe62 	bl	800883c <__multadd>
 8007b78:	ee08 0a10 	vmov	s16, r0
 8007b7c:	e7e7      	b.n	8007b4e <_dtoa_r+0xb26>
 8007b7e:	9b02      	ldr	r3, [sp, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bfc8      	it	gt
 8007b84:	461d      	movgt	r5, r3
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	bfd8      	it	le
 8007b8a:	2501      	movle	r5, #1
 8007b8c:	441d      	add	r5, r3
 8007b8e:	f04f 0800 	mov.w	r8, #0
 8007b92:	ee18 1a10 	vmov	r1, s16
 8007b96:	2201      	movs	r2, #1
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f001 f849 	bl	8008c30 <__lshift>
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	ee08 0a10 	vmov	s16, r0
 8007ba4:	f001 f8b4 	bl	8008d10 <__mcmp>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	dc91      	bgt.n	8007ad0 <_dtoa_r+0xaa8>
 8007bac:	d102      	bne.n	8007bb4 <_dtoa_r+0xb8c>
 8007bae:	f01a 0f01 	tst.w	sl, #1
 8007bb2:	d18d      	bne.n	8007ad0 <_dtoa_r+0xaa8>
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	461d      	mov	r5, r3
 8007bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bbc:	2a30      	cmp	r2, #48	; 0x30
 8007bbe:	d0fa      	beq.n	8007bb6 <_dtoa_r+0xb8e>
 8007bc0:	e6d7      	b.n	8007972 <_dtoa_r+0x94a>
 8007bc2:	9a01      	ldr	r2, [sp, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d184      	bne.n	8007ad2 <_dtoa_r+0xaaa>
 8007bc8:	9b00      	ldr	r3, [sp, #0]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	2331      	movs	r3, #49	; 0x31
 8007bd0:	7013      	strb	r3, [r2, #0]
 8007bd2:	e6ce      	b.n	8007972 <_dtoa_r+0x94a>
 8007bd4:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <_dtoa_r+0xbd4>)
 8007bd6:	f7ff ba95 	b.w	8007104 <_dtoa_r+0xdc>
 8007bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f47f aa6e 	bne.w	80070be <_dtoa_r+0x96>
 8007be2:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <_dtoa_r+0xbd8>)
 8007be4:	f7ff ba8e 	b.w	8007104 <_dtoa_r+0xdc>
 8007be8:	9b02      	ldr	r3, [sp, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dcae      	bgt.n	8007b4c <_dtoa_r+0xb24>
 8007bee:	9b06      	ldr	r3, [sp, #24]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	f73f aea8 	bgt.w	8007946 <_dtoa_r+0x91e>
 8007bf6:	e7a9      	b.n	8007b4c <_dtoa_r+0xb24>
 8007bf8:	0800a3d0 	.word	0x0800a3d0
 8007bfc:	0800a1d4 	.word	0x0800a1d4
 8007c00:	0800a351 	.word	0x0800a351

08007c04 <__sflush_r>:
 8007c04:	898a      	ldrh	r2, [r1, #12]
 8007c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	0710      	lsls	r0, r2, #28
 8007c0e:	460c      	mov	r4, r1
 8007c10:	d458      	bmi.n	8007cc4 <__sflush_r+0xc0>
 8007c12:	684b      	ldr	r3, [r1, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dc05      	bgt.n	8007c24 <__sflush_r+0x20>
 8007c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dc02      	bgt.n	8007c24 <__sflush_r+0x20>
 8007c1e:	2000      	movs	r0, #0
 8007c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	d0f9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c30:	682f      	ldr	r7, [r5, #0]
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	d032      	beq.n	8007c9c <__sflush_r+0x98>
 8007c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	075a      	lsls	r2, r3, #29
 8007c3c:	d505      	bpl.n	8007c4a <__sflush_r+0x46>
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	1ac0      	subs	r0, r0, r3
 8007c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c44:	b10b      	cbz	r3, 8007c4a <__sflush_r+0x46>
 8007c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c48:	1ac0      	subs	r0, r0, r3
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c50:	6a21      	ldr	r1, [r4, #32]
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b0      	blx	r6
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	d106      	bne.n	8007c6a <__sflush_r+0x66>
 8007c5c:	6829      	ldr	r1, [r5, #0]
 8007c5e:	291d      	cmp	r1, #29
 8007c60:	d82c      	bhi.n	8007cbc <__sflush_r+0xb8>
 8007c62:	4a2a      	ldr	r2, [pc, #168]	; (8007d0c <__sflush_r+0x108>)
 8007c64:	40ca      	lsrs	r2, r1
 8007c66:	07d6      	lsls	r6, r2, #31
 8007c68:	d528      	bpl.n	8007cbc <__sflush_r+0xb8>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	6062      	str	r2, [r4, #4]
 8007c6e:	04d9      	lsls	r1, r3, #19
 8007c70:	6922      	ldr	r2, [r4, #16]
 8007c72:	6022      	str	r2, [r4, #0]
 8007c74:	d504      	bpl.n	8007c80 <__sflush_r+0x7c>
 8007c76:	1c42      	adds	r2, r0, #1
 8007c78:	d101      	bne.n	8007c7e <__sflush_r+0x7a>
 8007c7a:	682b      	ldr	r3, [r5, #0]
 8007c7c:	b903      	cbnz	r3, 8007c80 <__sflush_r+0x7c>
 8007c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c82:	602f      	str	r7, [r5, #0]
 8007c84:	2900      	cmp	r1, #0
 8007c86:	d0ca      	beq.n	8007c1e <__sflush_r+0x1a>
 8007c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c8c:	4299      	cmp	r1, r3
 8007c8e:	d002      	beq.n	8007c96 <__sflush_r+0x92>
 8007c90:	4628      	mov	r0, r5
 8007c92:	f001 fa49 	bl	8009128 <_free_r>
 8007c96:	2000      	movs	r0, #0
 8007c98:	6360      	str	r0, [r4, #52]	; 0x34
 8007c9a:	e7c1      	b.n	8007c20 <__sflush_r+0x1c>
 8007c9c:	6a21      	ldr	r1, [r4, #32]
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b0      	blx	r6
 8007ca4:	1c41      	adds	r1, r0, #1
 8007ca6:	d1c7      	bne.n	8007c38 <__sflush_r+0x34>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0c4      	beq.n	8007c38 <__sflush_r+0x34>
 8007cae:	2b1d      	cmp	r3, #29
 8007cb0:	d001      	beq.n	8007cb6 <__sflush_r+0xb2>
 8007cb2:	2b16      	cmp	r3, #22
 8007cb4:	d101      	bne.n	8007cba <__sflush_r+0xb6>
 8007cb6:	602f      	str	r7, [r5, #0]
 8007cb8:	e7b1      	b.n	8007c1e <__sflush_r+0x1a>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	e7ad      	b.n	8007c20 <__sflush_r+0x1c>
 8007cc4:	690f      	ldr	r7, [r1, #16]
 8007cc6:	2f00      	cmp	r7, #0
 8007cc8:	d0a9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007cca:	0793      	lsls	r3, r2, #30
 8007ccc:	680e      	ldr	r6, [r1, #0]
 8007cce:	bf08      	it	eq
 8007cd0:	694b      	ldreq	r3, [r1, #20]
 8007cd2:	600f      	str	r7, [r1, #0]
 8007cd4:	bf18      	it	ne
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	eba6 0807 	sub.w	r8, r6, r7
 8007cdc:	608b      	str	r3, [r1, #8]
 8007cde:	f1b8 0f00 	cmp.w	r8, #0
 8007ce2:	dd9c      	ble.n	8007c1e <__sflush_r+0x1a>
 8007ce4:	6a21      	ldr	r1, [r4, #32]
 8007ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ce8:	4643      	mov	r3, r8
 8007cea:	463a      	mov	r2, r7
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b0      	blx	r6
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dc06      	bgt.n	8007d02 <__sflush_r+0xfe>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	e78e      	b.n	8007c20 <__sflush_r+0x1c>
 8007d02:	4407      	add	r7, r0
 8007d04:	eba8 0800 	sub.w	r8, r8, r0
 8007d08:	e7e9      	b.n	8007cde <__sflush_r+0xda>
 8007d0a:	bf00      	nop
 8007d0c:	20400001 	.word	0x20400001

08007d10 <_fflush_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	690b      	ldr	r3, [r1, #16]
 8007d14:	4605      	mov	r5, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	b913      	cbnz	r3, 8007d20 <_fflush_r+0x10>
 8007d1a:	2500      	movs	r5, #0
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	b118      	cbz	r0, 8007d2a <_fflush_r+0x1a>
 8007d22:	6983      	ldr	r3, [r0, #24]
 8007d24:	b90b      	cbnz	r3, 8007d2a <_fflush_r+0x1a>
 8007d26:	f000 f887 	bl	8007e38 <__sinit>
 8007d2a:	4b14      	ldr	r3, [pc, #80]	; (8007d7c <_fflush_r+0x6c>)
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	d11b      	bne.n	8007d68 <_fflush_r+0x58>
 8007d30:	686c      	ldr	r4, [r5, #4]
 8007d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0ef      	beq.n	8007d1a <_fflush_r+0xa>
 8007d3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d3c:	07d0      	lsls	r0, r2, #31
 8007d3e:	d404      	bmi.n	8007d4a <_fflush_r+0x3a>
 8007d40:	0599      	lsls	r1, r3, #22
 8007d42:	d402      	bmi.n	8007d4a <_fflush_r+0x3a>
 8007d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d46:	f000 fc88 	bl	800865a <__retarget_lock_acquire_recursive>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	f7ff ff59 	bl	8007c04 <__sflush_r>
 8007d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d54:	07da      	lsls	r2, r3, #31
 8007d56:	4605      	mov	r5, r0
 8007d58:	d4e0      	bmi.n	8007d1c <_fflush_r+0xc>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	059b      	lsls	r3, r3, #22
 8007d5e:	d4dd      	bmi.n	8007d1c <_fflush_r+0xc>
 8007d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d62:	f000 fc7b 	bl	800865c <__retarget_lock_release_recursive>
 8007d66:	e7d9      	b.n	8007d1c <_fflush_r+0xc>
 8007d68:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <_fflush_r+0x70>)
 8007d6a:	429c      	cmp	r4, r3
 8007d6c:	d101      	bne.n	8007d72 <_fflush_r+0x62>
 8007d6e:	68ac      	ldr	r4, [r5, #8]
 8007d70:	e7df      	b.n	8007d32 <_fflush_r+0x22>
 8007d72:	4b04      	ldr	r3, [pc, #16]	; (8007d84 <_fflush_r+0x74>)
 8007d74:	429c      	cmp	r4, r3
 8007d76:	bf08      	it	eq
 8007d78:	68ec      	ldreq	r4, [r5, #12]
 8007d7a:	e7da      	b.n	8007d32 <_fflush_r+0x22>
 8007d7c:	0800a404 	.word	0x0800a404
 8007d80:	0800a424 	.word	0x0800a424
 8007d84:	0800a3e4 	.word	0x0800a3e4

08007d88 <std>:
 8007d88:	2300      	movs	r3, #0
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d96:	6083      	str	r3, [r0, #8]
 8007d98:	8181      	strh	r1, [r0, #12]
 8007d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d9c:	81c2      	strh	r2, [r0, #14]
 8007d9e:	6183      	str	r3, [r0, #24]
 8007da0:	4619      	mov	r1, r3
 8007da2:	2208      	movs	r2, #8
 8007da4:	305c      	adds	r0, #92	; 0x5c
 8007da6:	f7fd fa81 	bl	80052ac <memset>
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <std+0x38>)
 8007dac:	6263      	str	r3, [r4, #36]	; 0x24
 8007dae:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <std+0x3c>)
 8007db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <std+0x40>)
 8007db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <std+0x44>)
 8007db8:	6224      	str	r4, [r4, #32]
 8007dba:	6323      	str	r3, [r4, #48]	; 0x30
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	bf00      	nop
 8007dc0:	08009889 	.word	0x08009889
 8007dc4:	080098ab 	.word	0x080098ab
 8007dc8:	080098e3 	.word	0x080098e3
 8007dcc:	08009907 	.word	0x08009907

08007dd0 <_cleanup_r>:
 8007dd0:	4901      	ldr	r1, [pc, #4]	; (8007dd8 <_cleanup_r+0x8>)
 8007dd2:	f000 b8af 	b.w	8007f34 <_fwalk_reent>
 8007dd6:	bf00      	nop
 8007dd8:	08007d11 	.word	0x08007d11

08007ddc <__sfmoreglue>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	2268      	movs	r2, #104	; 0x68
 8007de0:	1e4d      	subs	r5, r1, #1
 8007de2:	4355      	muls	r5, r2
 8007de4:	460e      	mov	r6, r1
 8007de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dea:	f001 fa09 	bl	8009200 <_malloc_r>
 8007dee:	4604      	mov	r4, r0
 8007df0:	b140      	cbz	r0, 8007e04 <__sfmoreglue+0x28>
 8007df2:	2100      	movs	r1, #0
 8007df4:	e9c0 1600 	strd	r1, r6, [r0]
 8007df8:	300c      	adds	r0, #12
 8007dfa:	60a0      	str	r0, [r4, #8]
 8007dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e00:	f7fd fa54 	bl	80052ac <memset>
 8007e04:	4620      	mov	r0, r4
 8007e06:	bd70      	pop	{r4, r5, r6, pc}

08007e08 <__sfp_lock_acquire>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__sfp_lock_acquire+0x8>)
 8007e0a:	f000 bc26 	b.w	800865a <__retarget_lock_acquire_recursive>
 8007e0e:	bf00      	nop
 8007e10:	20000379 	.word	0x20000379

08007e14 <__sfp_lock_release>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__sfp_lock_release+0x8>)
 8007e16:	f000 bc21 	b.w	800865c <__retarget_lock_release_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	20000379 	.word	0x20000379

08007e20 <__sinit_lock_acquire>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__sinit_lock_acquire+0x8>)
 8007e22:	f000 bc1a 	b.w	800865a <__retarget_lock_acquire_recursive>
 8007e26:	bf00      	nop
 8007e28:	2000037a 	.word	0x2000037a

08007e2c <__sinit_lock_release>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	; (8007e34 <__sinit_lock_release+0x8>)
 8007e2e:	f000 bc15 	b.w	800865c <__retarget_lock_release_recursive>
 8007e32:	bf00      	nop
 8007e34:	2000037a 	.word	0x2000037a

08007e38 <__sinit>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	f7ff fff0 	bl	8007e20 <__sinit_lock_acquire>
 8007e40:	69a3      	ldr	r3, [r4, #24]
 8007e42:	b11b      	cbz	r3, 8007e4c <__sinit+0x14>
 8007e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e48:	f7ff bff0 	b.w	8007e2c <__sinit_lock_release>
 8007e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e50:	6523      	str	r3, [r4, #80]	; 0x50
 8007e52:	4b13      	ldr	r3, [pc, #76]	; (8007ea0 <__sinit+0x68>)
 8007e54:	4a13      	ldr	r2, [pc, #76]	; (8007ea4 <__sinit+0x6c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e5a:	42a3      	cmp	r3, r4
 8007e5c:	bf04      	itt	eq
 8007e5e:	2301      	moveq	r3, #1
 8007e60:	61a3      	streq	r3, [r4, #24]
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 f820 	bl	8007ea8 <__sfp>
 8007e68:	6060      	str	r0, [r4, #4]
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 f81c 	bl	8007ea8 <__sfp>
 8007e70:	60a0      	str	r0, [r4, #8]
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 f818 	bl	8007ea8 <__sfp>
 8007e78:	2200      	movs	r2, #0
 8007e7a:	60e0      	str	r0, [r4, #12]
 8007e7c:	2104      	movs	r1, #4
 8007e7e:	6860      	ldr	r0, [r4, #4]
 8007e80:	f7ff ff82 	bl	8007d88 <std>
 8007e84:	68a0      	ldr	r0, [r4, #8]
 8007e86:	2201      	movs	r2, #1
 8007e88:	2109      	movs	r1, #9
 8007e8a:	f7ff ff7d 	bl	8007d88 <std>
 8007e8e:	68e0      	ldr	r0, [r4, #12]
 8007e90:	2202      	movs	r2, #2
 8007e92:	2112      	movs	r1, #18
 8007e94:	f7ff ff78 	bl	8007d88 <std>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	61a3      	str	r3, [r4, #24]
 8007e9c:	e7d2      	b.n	8007e44 <__sinit+0xc>
 8007e9e:	bf00      	nop
 8007ea0:	0800a1c0 	.word	0x0800a1c0
 8007ea4:	08007dd1 	.word	0x08007dd1

08007ea8 <__sfp>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	4607      	mov	r7, r0
 8007eac:	f7ff ffac 	bl	8007e08 <__sfp_lock_acquire>
 8007eb0:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <__sfp+0x84>)
 8007eb2:	681e      	ldr	r6, [r3, #0]
 8007eb4:	69b3      	ldr	r3, [r6, #24]
 8007eb6:	b913      	cbnz	r3, 8007ebe <__sfp+0x16>
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7ff ffbd 	bl	8007e38 <__sinit>
 8007ebe:	3648      	adds	r6, #72	; 0x48
 8007ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	d503      	bpl.n	8007ed0 <__sfp+0x28>
 8007ec8:	6833      	ldr	r3, [r6, #0]
 8007eca:	b30b      	cbz	r3, 8007f10 <__sfp+0x68>
 8007ecc:	6836      	ldr	r6, [r6, #0]
 8007ece:	e7f7      	b.n	8007ec0 <__sfp+0x18>
 8007ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ed4:	b9d5      	cbnz	r5, 8007f0c <__sfp+0x64>
 8007ed6:	4b16      	ldr	r3, [pc, #88]	; (8007f30 <__sfp+0x88>)
 8007ed8:	60e3      	str	r3, [r4, #12]
 8007eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ede:	6665      	str	r5, [r4, #100]	; 0x64
 8007ee0:	f000 fbba 	bl	8008658 <__retarget_lock_init_recursive>
 8007ee4:	f7ff ff96 	bl	8007e14 <__sfp_lock_release>
 8007ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ef0:	6025      	str	r5, [r4, #0]
 8007ef2:	61a5      	str	r5, [r4, #24]
 8007ef4:	2208      	movs	r2, #8
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007efc:	f7fd f9d6 	bl	80052ac <memset>
 8007f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f08:	4620      	mov	r0, r4
 8007f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f0c:	3468      	adds	r4, #104	; 0x68
 8007f0e:	e7d9      	b.n	8007ec4 <__sfp+0x1c>
 8007f10:	2104      	movs	r1, #4
 8007f12:	4638      	mov	r0, r7
 8007f14:	f7ff ff62 	bl	8007ddc <__sfmoreglue>
 8007f18:	4604      	mov	r4, r0
 8007f1a:	6030      	str	r0, [r6, #0]
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d1d5      	bne.n	8007ecc <__sfp+0x24>
 8007f20:	f7ff ff78 	bl	8007e14 <__sfp_lock_release>
 8007f24:	230c      	movs	r3, #12
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	e7ee      	b.n	8007f08 <__sfp+0x60>
 8007f2a:	bf00      	nop
 8007f2c:	0800a1c0 	.word	0x0800a1c0
 8007f30:	ffff0001 	.word	0xffff0001

08007f34 <_fwalk_reent>:
 8007f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f38:	4606      	mov	r6, r0
 8007f3a:	4688      	mov	r8, r1
 8007f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f40:	2700      	movs	r7, #0
 8007f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f46:	f1b9 0901 	subs.w	r9, r9, #1
 8007f4a:	d505      	bpl.n	8007f58 <_fwalk_reent+0x24>
 8007f4c:	6824      	ldr	r4, [r4, #0]
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	d1f7      	bne.n	8007f42 <_fwalk_reent+0xe>
 8007f52:	4638      	mov	r0, r7
 8007f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f58:	89ab      	ldrh	r3, [r5, #12]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d907      	bls.n	8007f6e <_fwalk_reent+0x3a>
 8007f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f62:	3301      	adds	r3, #1
 8007f64:	d003      	beq.n	8007f6e <_fwalk_reent+0x3a>
 8007f66:	4629      	mov	r1, r5
 8007f68:	4630      	mov	r0, r6
 8007f6a:	47c0      	blx	r8
 8007f6c:	4307      	orrs	r7, r0
 8007f6e:	3568      	adds	r5, #104	; 0x68
 8007f70:	e7e9      	b.n	8007f46 <_fwalk_reent+0x12>

08007f72 <rshift>:
 8007f72:	6903      	ldr	r3, [r0, #16]
 8007f74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f80:	f100 0414 	add.w	r4, r0, #20
 8007f84:	dd45      	ble.n	8008012 <rshift+0xa0>
 8007f86:	f011 011f 	ands.w	r1, r1, #31
 8007f8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f92:	d10c      	bne.n	8007fae <rshift+0x3c>
 8007f94:	f100 0710 	add.w	r7, r0, #16
 8007f98:	4629      	mov	r1, r5
 8007f9a:	42b1      	cmp	r1, r6
 8007f9c:	d334      	bcc.n	8008008 <rshift+0x96>
 8007f9e:	1a9b      	subs	r3, r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	1eea      	subs	r2, r5, #3
 8007fa4:	4296      	cmp	r6, r2
 8007fa6:	bf38      	it	cc
 8007fa8:	2300      	movcc	r3, #0
 8007faa:	4423      	add	r3, r4
 8007fac:	e015      	b.n	8007fda <rshift+0x68>
 8007fae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007fb2:	f1c1 0820 	rsb	r8, r1, #32
 8007fb6:	40cf      	lsrs	r7, r1
 8007fb8:	f105 0e04 	add.w	lr, r5, #4
 8007fbc:	46a1      	mov	r9, r4
 8007fbe:	4576      	cmp	r6, lr
 8007fc0:	46f4      	mov	ip, lr
 8007fc2:	d815      	bhi.n	8007ff0 <rshift+0x7e>
 8007fc4:	1a9a      	subs	r2, r3, r2
 8007fc6:	0092      	lsls	r2, r2, #2
 8007fc8:	3a04      	subs	r2, #4
 8007fca:	3501      	adds	r5, #1
 8007fcc:	42ae      	cmp	r6, r5
 8007fce:	bf38      	it	cc
 8007fd0:	2200      	movcc	r2, #0
 8007fd2:	18a3      	adds	r3, r4, r2
 8007fd4:	50a7      	str	r7, [r4, r2]
 8007fd6:	b107      	cbz	r7, 8007fda <rshift+0x68>
 8007fd8:	3304      	adds	r3, #4
 8007fda:	1b1a      	subs	r2, r3, r4
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fe2:	bf08      	it	eq
 8007fe4:	2300      	moveq	r3, #0
 8007fe6:	6102      	str	r2, [r0, #16]
 8007fe8:	bf08      	it	eq
 8007fea:	6143      	streq	r3, [r0, #20]
 8007fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ff0:	f8dc c000 	ldr.w	ip, [ip]
 8007ff4:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ff8:	ea4c 0707 	orr.w	r7, ip, r7
 8007ffc:	f849 7b04 	str.w	r7, [r9], #4
 8008000:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008004:	40cf      	lsrs	r7, r1
 8008006:	e7da      	b.n	8007fbe <rshift+0x4c>
 8008008:	f851 cb04 	ldr.w	ip, [r1], #4
 800800c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008010:	e7c3      	b.n	8007f9a <rshift+0x28>
 8008012:	4623      	mov	r3, r4
 8008014:	e7e1      	b.n	8007fda <rshift+0x68>

08008016 <__hexdig_fun>:
 8008016:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800801a:	2b09      	cmp	r3, #9
 800801c:	d802      	bhi.n	8008024 <__hexdig_fun+0xe>
 800801e:	3820      	subs	r0, #32
 8008020:	b2c0      	uxtb	r0, r0
 8008022:	4770      	bx	lr
 8008024:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008028:	2b05      	cmp	r3, #5
 800802a:	d801      	bhi.n	8008030 <__hexdig_fun+0x1a>
 800802c:	3847      	subs	r0, #71	; 0x47
 800802e:	e7f7      	b.n	8008020 <__hexdig_fun+0xa>
 8008030:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008034:	2b05      	cmp	r3, #5
 8008036:	d801      	bhi.n	800803c <__hexdig_fun+0x26>
 8008038:	3827      	subs	r0, #39	; 0x27
 800803a:	e7f1      	b.n	8008020 <__hexdig_fun+0xa>
 800803c:	2000      	movs	r0, #0
 800803e:	4770      	bx	lr

08008040 <__gethex>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	ed2d 8b02 	vpush	{d8}
 8008048:	b089      	sub	sp, #36	; 0x24
 800804a:	ee08 0a10 	vmov	s16, r0
 800804e:	9304      	str	r3, [sp, #16]
 8008050:	4bb4      	ldr	r3, [pc, #720]	; (8008324 <__gethex+0x2e4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	4618      	mov	r0, r3
 8008058:	468b      	mov	fp, r1
 800805a:	4690      	mov	r8, r2
 800805c:	f7f8 f8d8 	bl	8000210 <strlen>
 8008060:	9b01      	ldr	r3, [sp, #4]
 8008062:	f8db 2000 	ldr.w	r2, [fp]
 8008066:	4403      	add	r3, r0
 8008068:	4682      	mov	sl, r0
 800806a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800806e:	9305      	str	r3, [sp, #20]
 8008070:	1c93      	adds	r3, r2, #2
 8008072:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008076:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800807a:	32fe      	adds	r2, #254	; 0xfe
 800807c:	18d1      	adds	r1, r2, r3
 800807e:	461f      	mov	r7, r3
 8008080:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008084:	9100      	str	r1, [sp, #0]
 8008086:	2830      	cmp	r0, #48	; 0x30
 8008088:	d0f8      	beq.n	800807c <__gethex+0x3c>
 800808a:	f7ff ffc4 	bl	8008016 <__hexdig_fun>
 800808e:	4604      	mov	r4, r0
 8008090:	2800      	cmp	r0, #0
 8008092:	d13a      	bne.n	800810a <__gethex+0xca>
 8008094:	9901      	ldr	r1, [sp, #4]
 8008096:	4652      	mov	r2, sl
 8008098:	4638      	mov	r0, r7
 800809a:	f001 fc38 	bl	800990e <strncmp>
 800809e:	4605      	mov	r5, r0
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d168      	bne.n	8008176 <__gethex+0x136>
 80080a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80080a8:	eb07 060a 	add.w	r6, r7, sl
 80080ac:	f7ff ffb3 	bl	8008016 <__hexdig_fun>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d062      	beq.n	800817a <__gethex+0x13a>
 80080b4:	4633      	mov	r3, r6
 80080b6:	7818      	ldrb	r0, [r3, #0]
 80080b8:	2830      	cmp	r0, #48	; 0x30
 80080ba:	461f      	mov	r7, r3
 80080bc:	f103 0301 	add.w	r3, r3, #1
 80080c0:	d0f9      	beq.n	80080b6 <__gethex+0x76>
 80080c2:	f7ff ffa8 	bl	8008016 <__hexdig_fun>
 80080c6:	2301      	movs	r3, #1
 80080c8:	fab0 f480 	clz	r4, r0
 80080cc:	0964      	lsrs	r4, r4, #5
 80080ce:	4635      	mov	r5, r6
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	463a      	mov	r2, r7
 80080d4:	4616      	mov	r6, r2
 80080d6:	3201      	adds	r2, #1
 80080d8:	7830      	ldrb	r0, [r6, #0]
 80080da:	f7ff ff9c 	bl	8008016 <__hexdig_fun>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d1f8      	bne.n	80080d4 <__gethex+0x94>
 80080e2:	9901      	ldr	r1, [sp, #4]
 80080e4:	4652      	mov	r2, sl
 80080e6:	4630      	mov	r0, r6
 80080e8:	f001 fc11 	bl	800990e <strncmp>
 80080ec:	b980      	cbnz	r0, 8008110 <__gethex+0xd0>
 80080ee:	b94d      	cbnz	r5, 8008104 <__gethex+0xc4>
 80080f0:	eb06 050a 	add.w	r5, r6, sl
 80080f4:	462a      	mov	r2, r5
 80080f6:	4616      	mov	r6, r2
 80080f8:	3201      	adds	r2, #1
 80080fa:	7830      	ldrb	r0, [r6, #0]
 80080fc:	f7ff ff8b 	bl	8008016 <__hexdig_fun>
 8008100:	2800      	cmp	r0, #0
 8008102:	d1f8      	bne.n	80080f6 <__gethex+0xb6>
 8008104:	1bad      	subs	r5, r5, r6
 8008106:	00ad      	lsls	r5, r5, #2
 8008108:	e004      	b.n	8008114 <__gethex+0xd4>
 800810a:	2400      	movs	r4, #0
 800810c:	4625      	mov	r5, r4
 800810e:	e7e0      	b.n	80080d2 <__gethex+0x92>
 8008110:	2d00      	cmp	r5, #0
 8008112:	d1f7      	bne.n	8008104 <__gethex+0xc4>
 8008114:	7833      	ldrb	r3, [r6, #0]
 8008116:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800811a:	2b50      	cmp	r3, #80	; 0x50
 800811c:	d13b      	bne.n	8008196 <__gethex+0x156>
 800811e:	7873      	ldrb	r3, [r6, #1]
 8008120:	2b2b      	cmp	r3, #43	; 0x2b
 8008122:	d02c      	beq.n	800817e <__gethex+0x13e>
 8008124:	2b2d      	cmp	r3, #45	; 0x2d
 8008126:	d02e      	beq.n	8008186 <__gethex+0x146>
 8008128:	1c71      	adds	r1, r6, #1
 800812a:	f04f 0900 	mov.w	r9, #0
 800812e:	7808      	ldrb	r0, [r1, #0]
 8008130:	f7ff ff71 	bl	8008016 <__hexdig_fun>
 8008134:	1e43      	subs	r3, r0, #1
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b18      	cmp	r3, #24
 800813a:	d82c      	bhi.n	8008196 <__gethex+0x156>
 800813c:	f1a0 0210 	sub.w	r2, r0, #16
 8008140:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008144:	f7ff ff67 	bl	8008016 <__hexdig_fun>
 8008148:	1e43      	subs	r3, r0, #1
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b18      	cmp	r3, #24
 800814e:	d91d      	bls.n	800818c <__gethex+0x14c>
 8008150:	f1b9 0f00 	cmp.w	r9, #0
 8008154:	d000      	beq.n	8008158 <__gethex+0x118>
 8008156:	4252      	negs	r2, r2
 8008158:	4415      	add	r5, r2
 800815a:	f8cb 1000 	str.w	r1, [fp]
 800815e:	b1e4      	cbz	r4, 800819a <__gethex+0x15a>
 8008160:	9b00      	ldr	r3, [sp, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	bf14      	ite	ne
 8008166:	2700      	movne	r7, #0
 8008168:	2706      	moveq	r7, #6
 800816a:	4638      	mov	r0, r7
 800816c:	b009      	add	sp, #36	; 0x24
 800816e:	ecbd 8b02 	vpop	{d8}
 8008172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008176:	463e      	mov	r6, r7
 8008178:	4625      	mov	r5, r4
 800817a:	2401      	movs	r4, #1
 800817c:	e7ca      	b.n	8008114 <__gethex+0xd4>
 800817e:	f04f 0900 	mov.w	r9, #0
 8008182:	1cb1      	adds	r1, r6, #2
 8008184:	e7d3      	b.n	800812e <__gethex+0xee>
 8008186:	f04f 0901 	mov.w	r9, #1
 800818a:	e7fa      	b.n	8008182 <__gethex+0x142>
 800818c:	230a      	movs	r3, #10
 800818e:	fb03 0202 	mla	r2, r3, r2, r0
 8008192:	3a10      	subs	r2, #16
 8008194:	e7d4      	b.n	8008140 <__gethex+0x100>
 8008196:	4631      	mov	r1, r6
 8008198:	e7df      	b.n	800815a <__gethex+0x11a>
 800819a:	1bf3      	subs	r3, r6, r7
 800819c:	3b01      	subs	r3, #1
 800819e:	4621      	mov	r1, r4
 80081a0:	2b07      	cmp	r3, #7
 80081a2:	dc0b      	bgt.n	80081bc <__gethex+0x17c>
 80081a4:	ee18 0a10 	vmov	r0, s16
 80081a8:	f000 fae6 	bl	8008778 <_Balloc>
 80081ac:	4604      	mov	r4, r0
 80081ae:	b940      	cbnz	r0, 80081c2 <__gethex+0x182>
 80081b0:	4b5d      	ldr	r3, [pc, #372]	; (8008328 <__gethex+0x2e8>)
 80081b2:	4602      	mov	r2, r0
 80081b4:	21de      	movs	r1, #222	; 0xde
 80081b6:	485d      	ldr	r0, [pc, #372]	; (800832c <__gethex+0x2ec>)
 80081b8:	f001 fc9e 	bl	8009af8 <__assert_func>
 80081bc:	3101      	adds	r1, #1
 80081be:	105b      	asrs	r3, r3, #1
 80081c0:	e7ee      	b.n	80081a0 <__gethex+0x160>
 80081c2:	f100 0914 	add.w	r9, r0, #20
 80081c6:	f04f 0b00 	mov.w	fp, #0
 80081ca:	f1ca 0301 	rsb	r3, sl, #1
 80081ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80081d2:	f8cd b000 	str.w	fp, [sp]
 80081d6:	9306      	str	r3, [sp, #24]
 80081d8:	42b7      	cmp	r7, r6
 80081da:	d340      	bcc.n	800825e <__gethex+0x21e>
 80081dc:	9802      	ldr	r0, [sp, #8]
 80081de:	9b00      	ldr	r3, [sp, #0]
 80081e0:	f840 3b04 	str.w	r3, [r0], #4
 80081e4:	eba0 0009 	sub.w	r0, r0, r9
 80081e8:	1080      	asrs	r0, r0, #2
 80081ea:	0146      	lsls	r6, r0, #5
 80081ec:	6120      	str	r0, [r4, #16]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fbb4 	bl	800895c <__hi0bits>
 80081f4:	1a30      	subs	r0, r6, r0
 80081f6:	f8d8 6000 	ldr.w	r6, [r8]
 80081fa:	42b0      	cmp	r0, r6
 80081fc:	dd63      	ble.n	80082c6 <__gethex+0x286>
 80081fe:	1b87      	subs	r7, r0, r6
 8008200:	4639      	mov	r1, r7
 8008202:	4620      	mov	r0, r4
 8008204:	f000 ff58 	bl	80090b8 <__any_on>
 8008208:	4682      	mov	sl, r0
 800820a:	b1a8      	cbz	r0, 8008238 <__gethex+0x1f8>
 800820c:	1e7b      	subs	r3, r7, #1
 800820e:	1159      	asrs	r1, r3, #5
 8008210:	f003 021f 	and.w	r2, r3, #31
 8008214:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008218:	f04f 0a01 	mov.w	sl, #1
 800821c:	fa0a f202 	lsl.w	r2, sl, r2
 8008220:	420a      	tst	r2, r1
 8008222:	d009      	beq.n	8008238 <__gethex+0x1f8>
 8008224:	4553      	cmp	r3, sl
 8008226:	dd05      	ble.n	8008234 <__gethex+0x1f4>
 8008228:	1eb9      	subs	r1, r7, #2
 800822a:	4620      	mov	r0, r4
 800822c:	f000 ff44 	bl	80090b8 <__any_on>
 8008230:	2800      	cmp	r0, #0
 8008232:	d145      	bne.n	80082c0 <__gethex+0x280>
 8008234:	f04f 0a02 	mov.w	sl, #2
 8008238:	4639      	mov	r1, r7
 800823a:	4620      	mov	r0, r4
 800823c:	f7ff fe99 	bl	8007f72 <rshift>
 8008240:	443d      	add	r5, r7
 8008242:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008246:	42ab      	cmp	r3, r5
 8008248:	da4c      	bge.n	80082e4 <__gethex+0x2a4>
 800824a:	ee18 0a10 	vmov	r0, s16
 800824e:	4621      	mov	r1, r4
 8008250:	f000 fad2 	bl	80087f8 <_Bfree>
 8008254:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008256:	2300      	movs	r3, #0
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	27a3      	movs	r7, #163	; 0xa3
 800825c:	e785      	b.n	800816a <__gethex+0x12a>
 800825e:	1e73      	subs	r3, r6, #1
 8008260:	9a05      	ldr	r2, [sp, #20]
 8008262:	9303      	str	r3, [sp, #12]
 8008264:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008268:	4293      	cmp	r3, r2
 800826a:	d019      	beq.n	80082a0 <__gethex+0x260>
 800826c:	f1bb 0f20 	cmp.w	fp, #32
 8008270:	d107      	bne.n	8008282 <__gethex+0x242>
 8008272:	9b02      	ldr	r3, [sp, #8]
 8008274:	9a00      	ldr	r2, [sp, #0]
 8008276:	f843 2b04 	str.w	r2, [r3], #4
 800827a:	9302      	str	r3, [sp, #8]
 800827c:	2300      	movs	r3, #0
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	469b      	mov	fp, r3
 8008282:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008286:	f7ff fec6 	bl	8008016 <__hexdig_fun>
 800828a:	9b00      	ldr	r3, [sp, #0]
 800828c:	f000 000f 	and.w	r0, r0, #15
 8008290:	fa00 f00b 	lsl.w	r0, r0, fp
 8008294:	4303      	orrs	r3, r0
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	f10b 0b04 	add.w	fp, fp, #4
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	e00d      	b.n	80082bc <__gethex+0x27c>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	9a06      	ldr	r2, [sp, #24]
 80082a4:	4413      	add	r3, r2
 80082a6:	42bb      	cmp	r3, r7
 80082a8:	d3e0      	bcc.n	800826c <__gethex+0x22c>
 80082aa:	4618      	mov	r0, r3
 80082ac:	9901      	ldr	r1, [sp, #4]
 80082ae:	9307      	str	r3, [sp, #28]
 80082b0:	4652      	mov	r2, sl
 80082b2:	f001 fb2c 	bl	800990e <strncmp>
 80082b6:	9b07      	ldr	r3, [sp, #28]
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d1d7      	bne.n	800826c <__gethex+0x22c>
 80082bc:	461e      	mov	r6, r3
 80082be:	e78b      	b.n	80081d8 <__gethex+0x198>
 80082c0:	f04f 0a03 	mov.w	sl, #3
 80082c4:	e7b8      	b.n	8008238 <__gethex+0x1f8>
 80082c6:	da0a      	bge.n	80082de <__gethex+0x29e>
 80082c8:	1a37      	subs	r7, r6, r0
 80082ca:	4621      	mov	r1, r4
 80082cc:	ee18 0a10 	vmov	r0, s16
 80082d0:	463a      	mov	r2, r7
 80082d2:	f000 fcad 	bl	8008c30 <__lshift>
 80082d6:	1bed      	subs	r5, r5, r7
 80082d8:	4604      	mov	r4, r0
 80082da:	f100 0914 	add.w	r9, r0, #20
 80082de:	f04f 0a00 	mov.w	sl, #0
 80082e2:	e7ae      	b.n	8008242 <__gethex+0x202>
 80082e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80082e8:	42a8      	cmp	r0, r5
 80082ea:	dd72      	ble.n	80083d2 <__gethex+0x392>
 80082ec:	1b45      	subs	r5, r0, r5
 80082ee:	42ae      	cmp	r6, r5
 80082f0:	dc36      	bgt.n	8008360 <__gethex+0x320>
 80082f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d02a      	beq.n	8008350 <__gethex+0x310>
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d02c      	beq.n	8008358 <__gethex+0x318>
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d11c      	bne.n	800833c <__gethex+0x2fc>
 8008302:	42ae      	cmp	r6, r5
 8008304:	d11a      	bne.n	800833c <__gethex+0x2fc>
 8008306:	2e01      	cmp	r6, #1
 8008308:	d112      	bne.n	8008330 <__gethex+0x2f0>
 800830a:	9a04      	ldr	r2, [sp, #16]
 800830c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	2301      	movs	r3, #1
 8008314:	6123      	str	r3, [r4, #16]
 8008316:	f8c9 3000 	str.w	r3, [r9]
 800831a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800831c:	2762      	movs	r7, #98	; 0x62
 800831e:	601c      	str	r4, [r3, #0]
 8008320:	e723      	b.n	800816a <__gethex+0x12a>
 8008322:	bf00      	nop
 8008324:	0800a4ac 	.word	0x0800a4ac
 8008328:	0800a3d0 	.word	0x0800a3d0
 800832c:	0800a444 	.word	0x0800a444
 8008330:	1e71      	subs	r1, r6, #1
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fec0 	bl	80090b8 <__any_on>
 8008338:	2800      	cmp	r0, #0
 800833a:	d1e6      	bne.n	800830a <__gethex+0x2ca>
 800833c:	ee18 0a10 	vmov	r0, s16
 8008340:	4621      	mov	r1, r4
 8008342:	f000 fa59 	bl	80087f8 <_Bfree>
 8008346:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008348:	2300      	movs	r3, #0
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	2750      	movs	r7, #80	; 0x50
 800834e:	e70c      	b.n	800816a <__gethex+0x12a>
 8008350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f2      	bne.n	800833c <__gethex+0x2fc>
 8008356:	e7d8      	b.n	800830a <__gethex+0x2ca>
 8008358:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1d5      	bne.n	800830a <__gethex+0x2ca>
 800835e:	e7ed      	b.n	800833c <__gethex+0x2fc>
 8008360:	1e6f      	subs	r7, r5, #1
 8008362:	f1ba 0f00 	cmp.w	sl, #0
 8008366:	d131      	bne.n	80083cc <__gethex+0x38c>
 8008368:	b127      	cbz	r7, 8008374 <__gethex+0x334>
 800836a:	4639      	mov	r1, r7
 800836c:	4620      	mov	r0, r4
 800836e:	f000 fea3 	bl	80090b8 <__any_on>
 8008372:	4682      	mov	sl, r0
 8008374:	117b      	asrs	r3, r7, #5
 8008376:	2101      	movs	r1, #1
 8008378:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800837c:	f007 071f 	and.w	r7, r7, #31
 8008380:	fa01 f707 	lsl.w	r7, r1, r7
 8008384:	421f      	tst	r7, r3
 8008386:	4629      	mov	r1, r5
 8008388:	4620      	mov	r0, r4
 800838a:	bf18      	it	ne
 800838c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008390:	1b76      	subs	r6, r6, r5
 8008392:	f7ff fdee 	bl	8007f72 <rshift>
 8008396:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800839a:	2702      	movs	r7, #2
 800839c:	f1ba 0f00 	cmp.w	sl, #0
 80083a0:	d048      	beq.n	8008434 <__gethex+0x3f4>
 80083a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d015      	beq.n	80083d6 <__gethex+0x396>
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d017      	beq.n	80083de <__gethex+0x39e>
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d109      	bne.n	80083c6 <__gethex+0x386>
 80083b2:	f01a 0f02 	tst.w	sl, #2
 80083b6:	d006      	beq.n	80083c6 <__gethex+0x386>
 80083b8:	f8d9 0000 	ldr.w	r0, [r9]
 80083bc:	ea4a 0a00 	orr.w	sl, sl, r0
 80083c0:	f01a 0f01 	tst.w	sl, #1
 80083c4:	d10e      	bne.n	80083e4 <__gethex+0x3a4>
 80083c6:	f047 0710 	orr.w	r7, r7, #16
 80083ca:	e033      	b.n	8008434 <__gethex+0x3f4>
 80083cc:	f04f 0a01 	mov.w	sl, #1
 80083d0:	e7d0      	b.n	8008374 <__gethex+0x334>
 80083d2:	2701      	movs	r7, #1
 80083d4:	e7e2      	b.n	800839c <__gethex+0x35c>
 80083d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083d8:	f1c3 0301 	rsb	r3, r3, #1
 80083dc:	9315      	str	r3, [sp, #84]	; 0x54
 80083de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0f0      	beq.n	80083c6 <__gethex+0x386>
 80083e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80083e8:	f104 0314 	add.w	r3, r4, #20
 80083ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80083f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80083f4:	f04f 0c00 	mov.w	ip, #0
 80083f8:	4618      	mov	r0, r3
 80083fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008402:	d01c      	beq.n	800843e <__gethex+0x3fe>
 8008404:	3201      	adds	r2, #1
 8008406:	6002      	str	r2, [r0, #0]
 8008408:	2f02      	cmp	r7, #2
 800840a:	f104 0314 	add.w	r3, r4, #20
 800840e:	d13f      	bne.n	8008490 <__gethex+0x450>
 8008410:	f8d8 2000 	ldr.w	r2, [r8]
 8008414:	3a01      	subs	r2, #1
 8008416:	42b2      	cmp	r2, r6
 8008418:	d10a      	bne.n	8008430 <__gethex+0x3f0>
 800841a:	1171      	asrs	r1, r6, #5
 800841c:	2201      	movs	r2, #1
 800841e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008422:	f006 061f 	and.w	r6, r6, #31
 8008426:	fa02 f606 	lsl.w	r6, r2, r6
 800842a:	421e      	tst	r6, r3
 800842c:	bf18      	it	ne
 800842e:	4617      	movne	r7, r2
 8008430:	f047 0720 	orr.w	r7, r7, #32
 8008434:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008436:	601c      	str	r4, [r3, #0]
 8008438:	9b04      	ldr	r3, [sp, #16]
 800843a:	601d      	str	r5, [r3, #0]
 800843c:	e695      	b.n	800816a <__gethex+0x12a>
 800843e:	4299      	cmp	r1, r3
 8008440:	f843 cc04 	str.w	ip, [r3, #-4]
 8008444:	d8d8      	bhi.n	80083f8 <__gethex+0x3b8>
 8008446:	68a3      	ldr	r3, [r4, #8]
 8008448:	459b      	cmp	fp, r3
 800844a:	db19      	blt.n	8008480 <__gethex+0x440>
 800844c:	6861      	ldr	r1, [r4, #4]
 800844e:	ee18 0a10 	vmov	r0, s16
 8008452:	3101      	adds	r1, #1
 8008454:	f000 f990 	bl	8008778 <_Balloc>
 8008458:	4681      	mov	r9, r0
 800845a:	b918      	cbnz	r0, 8008464 <__gethex+0x424>
 800845c:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <__gethex+0x488>)
 800845e:	4602      	mov	r2, r0
 8008460:	2184      	movs	r1, #132	; 0x84
 8008462:	e6a8      	b.n	80081b6 <__gethex+0x176>
 8008464:	6922      	ldr	r2, [r4, #16]
 8008466:	3202      	adds	r2, #2
 8008468:	f104 010c 	add.w	r1, r4, #12
 800846c:	0092      	lsls	r2, r2, #2
 800846e:	300c      	adds	r0, #12
 8008470:	f000 f974 	bl	800875c <memcpy>
 8008474:	4621      	mov	r1, r4
 8008476:	ee18 0a10 	vmov	r0, s16
 800847a:	f000 f9bd 	bl	80087f8 <_Bfree>
 800847e:	464c      	mov	r4, r9
 8008480:	6923      	ldr	r3, [r4, #16]
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008488:	6122      	str	r2, [r4, #16]
 800848a:	2201      	movs	r2, #1
 800848c:	615a      	str	r2, [r3, #20]
 800848e:	e7bb      	b.n	8008408 <__gethex+0x3c8>
 8008490:	6922      	ldr	r2, [r4, #16]
 8008492:	455a      	cmp	r2, fp
 8008494:	dd0b      	ble.n	80084ae <__gethex+0x46e>
 8008496:	2101      	movs	r1, #1
 8008498:	4620      	mov	r0, r4
 800849a:	f7ff fd6a 	bl	8007f72 <rshift>
 800849e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084a2:	3501      	adds	r5, #1
 80084a4:	42ab      	cmp	r3, r5
 80084a6:	f6ff aed0 	blt.w	800824a <__gethex+0x20a>
 80084aa:	2701      	movs	r7, #1
 80084ac:	e7c0      	b.n	8008430 <__gethex+0x3f0>
 80084ae:	f016 061f 	ands.w	r6, r6, #31
 80084b2:	d0fa      	beq.n	80084aa <__gethex+0x46a>
 80084b4:	4453      	add	r3, sl
 80084b6:	f1c6 0620 	rsb	r6, r6, #32
 80084ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80084be:	f000 fa4d 	bl	800895c <__hi0bits>
 80084c2:	42b0      	cmp	r0, r6
 80084c4:	dbe7      	blt.n	8008496 <__gethex+0x456>
 80084c6:	e7f0      	b.n	80084aa <__gethex+0x46a>
 80084c8:	0800a3d0 	.word	0x0800a3d0

080084cc <L_shift>:
 80084cc:	f1c2 0208 	rsb	r2, r2, #8
 80084d0:	0092      	lsls	r2, r2, #2
 80084d2:	b570      	push	{r4, r5, r6, lr}
 80084d4:	f1c2 0620 	rsb	r6, r2, #32
 80084d8:	6843      	ldr	r3, [r0, #4]
 80084da:	6804      	ldr	r4, [r0, #0]
 80084dc:	fa03 f506 	lsl.w	r5, r3, r6
 80084e0:	432c      	orrs	r4, r5
 80084e2:	40d3      	lsrs	r3, r2
 80084e4:	6004      	str	r4, [r0, #0]
 80084e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80084ea:	4288      	cmp	r0, r1
 80084ec:	d3f4      	bcc.n	80084d8 <L_shift+0xc>
 80084ee:	bd70      	pop	{r4, r5, r6, pc}

080084f0 <__match>:
 80084f0:	b530      	push	{r4, r5, lr}
 80084f2:	6803      	ldr	r3, [r0, #0]
 80084f4:	3301      	adds	r3, #1
 80084f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084fa:	b914      	cbnz	r4, 8008502 <__match+0x12>
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	2001      	movs	r0, #1
 8008500:	bd30      	pop	{r4, r5, pc}
 8008502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008506:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800850a:	2d19      	cmp	r5, #25
 800850c:	bf98      	it	ls
 800850e:	3220      	addls	r2, #32
 8008510:	42a2      	cmp	r2, r4
 8008512:	d0f0      	beq.n	80084f6 <__match+0x6>
 8008514:	2000      	movs	r0, #0
 8008516:	e7f3      	b.n	8008500 <__match+0x10>

08008518 <__hexnan>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	680b      	ldr	r3, [r1, #0]
 800851e:	115e      	asrs	r6, r3, #5
 8008520:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008524:	f013 031f 	ands.w	r3, r3, #31
 8008528:	b087      	sub	sp, #28
 800852a:	bf18      	it	ne
 800852c:	3604      	addne	r6, #4
 800852e:	2500      	movs	r5, #0
 8008530:	1f37      	subs	r7, r6, #4
 8008532:	4690      	mov	r8, r2
 8008534:	6802      	ldr	r2, [r0, #0]
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	4682      	mov	sl, r0
 800853a:	f846 5c04 	str.w	r5, [r6, #-4]
 800853e:	46b9      	mov	r9, r7
 8008540:	463c      	mov	r4, r7
 8008542:	9502      	str	r5, [sp, #8]
 8008544:	46ab      	mov	fp, r5
 8008546:	7851      	ldrb	r1, [r2, #1]
 8008548:	1c53      	adds	r3, r2, #1
 800854a:	9303      	str	r3, [sp, #12]
 800854c:	b341      	cbz	r1, 80085a0 <__hexnan+0x88>
 800854e:	4608      	mov	r0, r1
 8008550:	9205      	str	r2, [sp, #20]
 8008552:	9104      	str	r1, [sp, #16]
 8008554:	f7ff fd5f 	bl	8008016 <__hexdig_fun>
 8008558:	2800      	cmp	r0, #0
 800855a:	d14f      	bne.n	80085fc <__hexnan+0xe4>
 800855c:	9904      	ldr	r1, [sp, #16]
 800855e:	9a05      	ldr	r2, [sp, #20]
 8008560:	2920      	cmp	r1, #32
 8008562:	d818      	bhi.n	8008596 <__hexnan+0x7e>
 8008564:	9b02      	ldr	r3, [sp, #8]
 8008566:	459b      	cmp	fp, r3
 8008568:	dd13      	ble.n	8008592 <__hexnan+0x7a>
 800856a:	454c      	cmp	r4, r9
 800856c:	d206      	bcs.n	800857c <__hexnan+0x64>
 800856e:	2d07      	cmp	r5, #7
 8008570:	dc04      	bgt.n	800857c <__hexnan+0x64>
 8008572:	462a      	mov	r2, r5
 8008574:	4649      	mov	r1, r9
 8008576:	4620      	mov	r0, r4
 8008578:	f7ff ffa8 	bl	80084cc <L_shift>
 800857c:	4544      	cmp	r4, r8
 800857e:	d950      	bls.n	8008622 <__hexnan+0x10a>
 8008580:	2300      	movs	r3, #0
 8008582:	f1a4 0904 	sub.w	r9, r4, #4
 8008586:	f844 3c04 	str.w	r3, [r4, #-4]
 800858a:	f8cd b008 	str.w	fp, [sp, #8]
 800858e:	464c      	mov	r4, r9
 8008590:	461d      	mov	r5, r3
 8008592:	9a03      	ldr	r2, [sp, #12]
 8008594:	e7d7      	b.n	8008546 <__hexnan+0x2e>
 8008596:	2929      	cmp	r1, #41	; 0x29
 8008598:	d156      	bne.n	8008648 <__hexnan+0x130>
 800859a:	3202      	adds	r2, #2
 800859c:	f8ca 2000 	str.w	r2, [sl]
 80085a0:	f1bb 0f00 	cmp.w	fp, #0
 80085a4:	d050      	beq.n	8008648 <__hexnan+0x130>
 80085a6:	454c      	cmp	r4, r9
 80085a8:	d206      	bcs.n	80085b8 <__hexnan+0xa0>
 80085aa:	2d07      	cmp	r5, #7
 80085ac:	dc04      	bgt.n	80085b8 <__hexnan+0xa0>
 80085ae:	462a      	mov	r2, r5
 80085b0:	4649      	mov	r1, r9
 80085b2:	4620      	mov	r0, r4
 80085b4:	f7ff ff8a 	bl	80084cc <L_shift>
 80085b8:	4544      	cmp	r4, r8
 80085ba:	d934      	bls.n	8008626 <__hexnan+0x10e>
 80085bc:	f1a8 0204 	sub.w	r2, r8, #4
 80085c0:	4623      	mov	r3, r4
 80085c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80085c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80085ca:	429f      	cmp	r7, r3
 80085cc:	d2f9      	bcs.n	80085c2 <__hexnan+0xaa>
 80085ce:	1b3b      	subs	r3, r7, r4
 80085d0:	f023 0303 	bic.w	r3, r3, #3
 80085d4:	3304      	adds	r3, #4
 80085d6:	3401      	adds	r4, #1
 80085d8:	3e03      	subs	r6, #3
 80085da:	42b4      	cmp	r4, r6
 80085dc:	bf88      	it	hi
 80085de:	2304      	movhi	r3, #4
 80085e0:	4443      	add	r3, r8
 80085e2:	2200      	movs	r2, #0
 80085e4:	f843 2b04 	str.w	r2, [r3], #4
 80085e8:	429f      	cmp	r7, r3
 80085ea:	d2fb      	bcs.n	80085e4 <__hexnan+0xcc>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	b91b      	cbnz	r3, 80085f8 <__hexnan+0xe0>
 80085f0:	4547      	cmp	r7, r8
 80085f2:	d127      	bne.n	8008644 <__hexnan+0x12c>
 80085f4:	2301      	movs	r3, #1
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	2005      	movs	r0, #5
 80085fa:	e026      	b.n	800864a <__hexnan+0x132>
 80085fc:	3501      	adds	r5, #1
 80085fe:	2d08      	cmp	r5, #8
 8008600:	f10b 0b01 	add.w	fp, fp, #1
 8008604:	dd06      	ble.n	8008614 <__hexnan+0xfc>
 8008606:	4544      	cmp	r4, r8
 8008608:	d9c3      	bls.n	8008592 <__hexnan+0x7a>
 800860a:	2300      	movs	r3, #0
 800860c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008610:	2501      	movs	r5, #1
 8008612:	3c04      	subs	r4, #4
 8008614:	6822      	ldr	r2, [r4, #0]
 8008616:	f000 000f 	and.w	r0, r0, #15
 800861a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800861e:	6022      	str	r2, [r4, #0]
 8008620:	e7b7      	b.n	8008592 <__hexnan+0x7a>
 8008622:	2508      	movs	r5, #8
 8008624:	e7b5      	b.n	8008592 <__hexnan+0x7a>
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0df      	beq.n	80085ec <__hexnan+0xd4>
 800862c:	f04f 32ff 	mov.w	r2, #4294967295
 8008630:	f1c3 0320 	rsb	r3, r3, #32
 8008634:	fa22 f303 	lsr.w	r3, r2, r3
 8008638:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800863c:	401a      	ands	r2, r3
 800863e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008642:	e7d3      	b.n	80085ec <__hexnan+0xd4>
 8008644:	3f04      	subs	r7, #4
 8008646:	e7d1      	b.n	80085ec <__hexnan+0xd4>
 8008648:	2004      	movs	r0, #4
 800864a:	b007      	add	sp, #28
 800864c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008650 <_localeconv_r>:
 8008650:	4800      	ldr	r0, [pc, #0]	; (8008654 <_localeconv_r+0x4>)
 8008652:	4770      	bx	lr
 8008654:	20000164 	.word	0x20000164

08008658 <__retarget_lock_init_recursive>:
 8008658:	4770      	bx	lr

0800865a <__retarget_lock_acquire_recursive>:
 800865a:	4770      	bx	lr

0800865c <__retarget_lock_release_recursive>:
 800865c:	4770      	bx	lr

0800865e <__swhatbuf_r>:
 800865e:	b570      	push	{r4, r5, r6, lr}
 8008660:	460e      	mov	r6, r1
 8008662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008666:	2900      	cmp	r1, #0
 8008668:	b096      	sub	sp, #88	; 0x58
 800866a:	4614      	mov	r4, r2
 800866c:	461d      	mov	r5, r3
 800866e:	da08      	bge.n	8008682 <__swhatbuf_r+0x24>
 8008670:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	602a      	str	r2, [r5, #0]
 8008678:	061a      	lsls	r2, r3, #24
 800867a:	d410      	bmi.n	800869e <__swhatbuf_r+0x40>
 800867c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008680:	e00e      	b.n	80086a0 <__swhatbuf_r+0x42>
 8008682:	466a      	mov	r2, sp
 8008684:	f001 fa78 	bl	8009b78 <_fstat_r>
 8008688:	2800      	cmp	r0, #0
 800868a:	dbf1      	blt.n	8008670 <__swhatbuf_r+0x12>
 800868c:	9a01      	ldr	r2, [sp, #4]
 800868e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008692:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008696:	425a      	negs	r2, r3
 8008698:	415a      	adcs	r2, r3
 800869a:	602a      	str	r2, [r5, #0]
 800869c:	e7ee      	b.n	800867c <__swhatbuf_r+0x1e>
 800869e:	2340      	movs	r3, #64	; 0x40
 80086a0:	2000      	movs	r0, #0
 80086a2:	6023      	str	r3, [r4, #0]
 80086a4:	b016      	add	sp, #88	; 0x58
 80086a6:	bd70      	pop	{r4, r5, r6, pc}

080086a8 <__smakebuf_r>:
 80086a8:	898b      	ldrh	r3, [r1, #12]
 80086aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086ac:	079d      	lsls	r5, r3, #30
 80086ae:	4606      	mov	r6, r0
 80086b0:	460c      	mov	r4, r1
 80086b2:	d507      	bpl.n	80086c4 <__smakebuf_r+0x1c>
 80086b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	6123      	str	r3, [r4, #16]
 80086bc:	2301      	movs	r3, #1
 80086be:	6163      	str	r3, [r4, #20]
 80086c0:	b002      	add	sp, #8
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	ab01      	add	r3, sp, #4
 80086c6:	466a      	mov	r2, sp
 80086c8:	f7ff ffc9 	bl	800865e <__swhatbuf_r>
 80086cc:	9900      	ldr	r1, [sp, #0]
 80086ce:	4605      	mov	r5, r0
 80086d0:	4630      	mov	r0, r6
 80086d2:	f000 fd95 	bl	8009200 <_malloc_r>
 80086d6:	b948      	cbnz	r0, 80086ec <__smakebuf_r+0x44>
 80086d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086dc:	059a      	lsls	r2, r3, #22
 80086de:	d4ef      	bmi.n	80086c0 <__smakebuf_r+0x18>
 80086e0:	f023 0303 	bic.w	r3, r3, #3
 80086e4:	f043 0302 	orr.w	r3, r3, #2
 80086e8:	81a3      	strh	r3, [r4, #12]
 80086ea:	e7e3      	b.n	80086b4 <__smakebuf_r+0xc>
 80086ec:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <__smakebuf_r+0x7c>)
 80086ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	6020      	str	r0, [r4, #0]
 80086f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f8:	81a3      	strh	r3, [r4, #12]
 80086fa:	9b00      	ldr	r3, [sp, #0]
 80086fc:	6163      	str	r3, [r4, #20]
 80086fe:	9b01      	ldr	r3, [sp, #4]
 8008700:	6120      	str	r0, [r4, #16]
 8008702:	b15b      	cbz	r3, 800871c <__smakebuf_r+0x74>
 8008704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008708:	4630      	mov	r0, r6
 800870a:	f001 fa47 	bl	8009b9c <_isatty_r>
 800870e:	b128      	cbz	r0, 800871c <__smakebuf_r+0x74>
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	f043 0301 	orr.w	r3, r3, #1
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	89a0      	ldrh	r0, [r4, #12]
 800871e:	4305      	orrs	r5, r0
 8008720:	81a5      	strh	r5, [r4, #12]
 8008722:	e7cd      	b.n	80086c0 <__smakebuf_r+0x18>
 8008724:	08007dd1 	.word	0x08007dd1

08008728 <malloc>:
 8008728:	4b02      	ldr	r3, [pc, #8]	; (8008734 <malloc+0xc>)
 800872a:	4601      	mov	r1, r0
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	f000 bd67 	b.w	8009200 <_malloc_r>
 8008732:	bf00      	nop
 8008734:	2000000c 	.word	0x2000000c

08008738 <__ascii_mbtowc>:
 8008738:	b082      	sub	sp, #8
 800873a:	b901      	cbnz	r1, 800873e <__ascii_mbtowc+0x6>
 800873c:	a901      	add	r1, sp, #4
 800873e:	b142      	cbz	r2, 8008752 <__ascii_mbtowc+0x1a>
 8008740:	b14b      	cbz	r3, 8008756 <__ascii_mbtowc+0x1e>
 8008742:	7813      	ldrb	r3, [r2, #0]
 8008744:	600b      	str	r3, [r1, #0]
 8008746:	7812      	ldrb	r2, [r2, #0]
 8008748:	1e10      	subs	r0, r2, #0
 800874a:	bf18      	it	ne
 800874c:	2001      	movne	r0, #1
 800874e:	b002      	add	sp, #8
 8008750:	4770      	bx	lr
 8008752:	4610      	mov	r0, r2
 8008754:	e7fb      	b.n	800874e <__ascii_mbtowc+0x16>
 8008756:	f06f 0001 	mvn.w	r0, #1
 800875a:	e7f8      	b.n	800874e <__ascii_mbtowc+0x16>

0800875c <memcpy>:
 800875c:	440a      	add	r2, r1
 800875e:	4291      	cmp	r1, r2
 8008760:	f100 33ff 	add.w	r3, r0, #4294967295
 8008764:	d100      	bne.n	8008768 <memcpy+0xc>
 8008766:	4770      	bx	lr
 8008768:	b510      	push	{r4, lr}
 800876a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800876e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008772:	4291      	cmp	r1, r2
 8008774:	d1f9      	bne.n	800876a <memcpy+0xe>
 8008776:	bd10      	pop	{r4, pc}

08008778 <_Balloc>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800877c:	4604      	mov	r4, r0
 800877e:	460d      	mov	r5, r1
 8008780:	b976      	cbnz	r6, 80087a0 <_Balloc+0x28>
 8008782:	2010      	movs	r0, #16
 8008784:	f7ff ffd0 	bl	8008728 <malloc>
 8008788:	4602      	mov	r2, r0
 800878a:	6260      	str	r0, [r4, #36]	; 0x24
 800878c:	b920      	cbnz	r0, 8008798 <_Balloc+0x20>
 800878e:	4b18      	ldr	r3, [pc, #96]	; (80087f0 <_Balloc+0x78>)
 8008790:	4818      	ldr	r0, [pc, #96]	; (80087f4 <_Balloc+0x7c>)
 8008792:	2166      	movs	r1, #102	; 0x66
 8008794:	f001 f9b0 	bl	8009af8 <__assert_func>
 8008798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800879c:	6006      	str	r6, [r0, #0]
 800879e:	60c6      	str	r6, [r0, #12]
 80087a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087a2:	68f3      	ldr	r3, [r6, #12]
 80087a4:	b183      	cbz	r3, 80087c8 <_Balloc+0x50>
 80087a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087ae:	b9b8      	cbnz	r0, 80087e0 <_Balloc+0x68>
 80087b0:	2101      	movs	r1, #1
 80087b2:	fa01 f605 	lsl.w	r6, r1, r5
 80087b6:	1d72      	adds	r2, r6, #5
 80087b8:	0092      	lsls	r2, r2, #2
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fc9d 	bl	80090fa <_calloc_r>
 80087c0:	b160      	cbz	r0, 80087dc <_Balloc+0x64>
 80087c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087c6:	e00e      	b.n	80087e6 <_Balloc+0x6e>
 80087c8:	2221      	movs	r2, #33	; 0x21
 80087ca:	2104      	movs	r1, #4
 80087cc:	4620      	mov	r0, r4
 80087ce:	f000 fc94 	bl	80090fa <_calloc_r>
 80087d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087d4:	60f0      	str	r0, [r6, #12]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e4      	bne.n	80087a6 <_Balloc+0x2e>
 80087dc:	2000      	movs	r0, #0
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	6802      	ldr	r2, [r0, #0]
 80087e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087e6:	2300      	movs	r3, #0
 80087e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087ec:	e7f7      	b.n	80087de <_Balloc+0x66>
 80087ee:	bf00      	nop
 80087f0:	0800a35e 	.word	0x0800a35e
 80087f4:	0800a4c0 	.word	0x0800a4c0

080087f8 <_Bfree>:
 80087f8:	b570      	push	{r4, r5, r6, lr}
 80087fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087fc:	4605      	mov	r5, r0
 80087fe:	460c      	mov	r4, r1
 8008800:	b976      	cbnz	r6, 8008820 <_Bfree+0x28>
 8008802:	2010      	movs	r0, #16
 8008804:	f7ff ff90 	bl	8008728 <malloc>
 8008808:	4602      	mov	r2, r0
 800880a:	6268      	str	r0, [r5, #36]	; 0x24
 800880c:	b920      	cbnz	r0, 8008818 <_Bfree+0x20>
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <_Bfree+0x3c>)
 8008810:	4809      	ldr	r0, [pc, #36]	; (8008838 <_Bfree+0x40>)
 8008812:	218a      	movs	r1, #138	; 0x8a
 8008814:	f001 f970 	bl	8009af8 <__assert_func>
 8008818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800881c:	6006      	str	r6, [r0, #0]
 800881e:	60c6      	str	r6, [r0, #12]
 8008820:	b13c      	cbz	r4, 8008832 <_Bfree+0x3a>
 8008822:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008824:	6862      	ldr	r2, [r4, #4]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800882c:	6021      	str	r1, [r4, #0]
 800882e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008832:	bd70      	pop	{r4, r5, r6, pc}
 8008834:	0800a35e 	.word	0x0800a35e
 8008838:	0800a4c0 	.word	0x0800a4c0

0800883c <__multadd>:
 800883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008840:	690d      	ldr	r5, [r1, #16]
 8008842:	4607      	mov	r7, r0
 8008844:	460c      	mov	r4, r1
 8008846:	461e      	mov	r6, r3
 8008848:	f101 0c14 	add.w	ip, r1, #20
 800884c:	2000      	movs	r0, #0
 800884e:	f8dc 3000 	ldr.w	r3, [ip]
 8008852:	b299      	uxth	r1, r3
 8008854:	fb02 6101 	mla	r1, r2, r1, r6
 8008858:	0c1e      	lsrs	r6, r3, #16
 800885a:	0c0b      	lsrs	r3, r1, #16
 800885c:	fb02 3306 	mla	r3, r2, r6, r3
 8008860:	b289      	uxth	r1, r1
 8008862:	3001      	adds	r0, #1
 8008864:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008868:	4285      	cmp	r5, r0
 800886a:	f84c 1b04 	str.w	r1, [ip], #4
 800886e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008872:	dcec      	bgt.n	800884e <__multadd+0x12>
 8008874:	b30e      	cbz	r6, 80088ba <__multadd+0x7e>
 8008876:	68a3      	ldr	r3, [r4, #8]
 8008878:	42ab      	cmp	r3, r5
 800887a:	dc19      	bgt.n	80088b0 <__multadd+0x74>
 800887c:	6861      	ldr	r1, [r4, #4]
 800887e:	4638      	mov	r0, r7
 8008880:	3101      	adds	r1, #1
 8008882:	f7ff ff79 	bl	8008778 <_Balloc>
 8008886:	4680      	mov	r8, r0
 8008888:	b928      	cbnz	r0, 8008896 <__multadd+0x5a>
 800888a:	4602      	mov	r2, r0
 800888c:	4b0c      	ldr	r3, [pc, #48]	; (80088c0 <__multadd+0x84>)
 800888e:	480d      	ldr	r0, [pc, #52]	; (80088c4 <__multadd+0x88>)
 8008890:	21b5      	movs	r1, #181	; 0xb5
 8008892:	f001 f931 	bl	8009af8 <__assert_func>
 8008896:	6922      	ldr	r2, [r4, #16]
 8008898:	3202      	adds	r2, #2
 800889a:	f104 010c 	add.w	r1, r4, #12
 800889e:	0092      	lsls	r2, r2, #2
 80088a0:	300c      	adds	r0, #12
 80088a2:	f7ff ff5b 	bl	800875c <memcpy>
 80088a6:	4621      	mov	r1, r4
 80088a8:	4638      	mov	r0, r7
 80088aa:	f7ff ffa5 	bl	80087f8 <_Bfree>
 80088ae:	4644      	mov	r4, r8
 80088b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088b4:	3501      	adds	r5, #1
 80088b6:	615e      	str	r6, [r3, #20]
 80088b8:	6125      	str	r5, [r4, #16]
 80088ba:	4620      	mov	r0, r4
 80088bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c0:	0800a3d0 	.word	0x0800a3d0
 80088c4:	0800a4c0 	.word	0x0800a4c0

080088c8 <__s2b>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	460c      	mov	r4, r1
 80088ce:	4615      	mov	r5, r2
 80088d0:	461f      	mov	r7, r3
 80088d2:	2209      	movs	r2, #9
 80088d4:	3308      	adds	r3, #8
 80088d6:	4606      	mov	r6, r0
 80088d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80088dc:	2100      	movs	r1, #0
 80088de:	2201      	movs	r2, #1
 80088e0:	429a      	cmp	r2, r3
 80088e2:	db09      	blt.n	80088f8 <__s2b+0x30>
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ff47 	bl	8008778 <_Balloc>
 80088ea:	b940      	cbnz	r0, 80088fe <__s2b+0x36>
 80088ec:	4602      	mov	r2, r0
 80088ee:	4b19      	ldr	r3, [pc, #100]	; (8008954 <__s2b+0x8c>)
 80088f0:	4819      	ldr	r0, [pc, #100]	; (8008958 <__s2b+0x90>)
 80088f2:	21ce      	movs	r1, #206	; 0xce
 80088f4:	f001 f900 	bl	8009af8 <__assert_func>
 80088f8:	0052      	lsls	r2, r2, #1
 80088fa:	3101      	adds	r1, #1
 80088fc:	e7f0      	b.n	80088e0 <__s2b+0x18>
 80088fe:	9b08      	ldr	r3, [sp, #32]
 8008900:	6143      	str	r3, [r0, #20]
 8008902:	2d09      	cmp	r5, #9
 8008904:	f04f 0301 	mov.w	r3, #1
 8008908:	6103      	str	r3, [r0, #16]
 800890a:	dd16      	ble.n	800893a <__s2b+0x72>
 800890c:	f104 0909 	add.w	r9, r4, #9
 8008910:	46c8      	mov	r8, r9
 8008912:	442c      	add	r4, r5
 8008914:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008918:	4601      	mov	r1, r0
 800891a:	3b30      	subs	r3, #48	; 0x30
 800891c:	220a      	movs	r2, #10
 800891e:	4630      	mov	r0, r6
 8008920:	f7ff ff8c 	bl	800883c <__multadd>
 8008924:	45a0      	cmp	r8, r4
 8008926:	d1f5      	bne.n	8008914 <__s2b+0x4c>
 8008928:	f1a5 0408 	sub.w	r4, r5, #8
 800892c:	444c      	add	r4, r9
 800892e:	1b2d      	subs	r5, r5, r4
 8008930:	1963      	adds	r3, r4, r5
 8008932:	42bb      	cmp	r3, r7
 8008934:	db04      	blt.n	8008940 <__s2b+0x78>
 8008936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893a:	340a      	adds	r4, #10
 800893c:	2509      	movs	r5, #9
 800893e:	e7f6      	b.n	800892e <__s2b+0x66>
 8008940:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008944:	4601      	mov	r1, r0
 8008946:	3b30      	subs	r3, #48	; 0x30
 8008948:	220a      	movs	r2, #10
 800894a:	4630      	mov	r0, r6
 800894c:	f7ff ff76 	bl	800883c <__multadd>
 8008950:	e7ee      	b.n	8008930 <__s2b+0x68>
 8008952:	bf00      	nop
 8008954:	0800a3d0 	.word	0x0800a3d0
 8008958:	0800a4c0 	.word	0x0800a4c0

0800895c <__hi0bits>:
 800895c:	0c03      	lsrs	r3, r0, #16
 800895e:	041b      	lsls	r3, r3, #16
 8008960:	b9d3      	cbnz	r3, 8008998 <__hi0bits+0x3c>
 8008962:	0400      	lsls	r0, r0, #16
 8008964:	2310      	movs	r3, #16
 8008966:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800896a:	bf04      	itt	eq
 800896c:	0200      	lsleq	r0, r0, #8
 800896e:	3308      	addeq	r3, #8
 8008970:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008974:	bf04      	itt	eq
 8008976:	0100      	lsleq	r0, r0, #4
 8008978:	3304      	addeq	r3, #4
 800897a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800897e:	bf04      	itt	eq
 8008980:	0080      	lsleq	r0, r0, #2
 8008982:	3302      	addeq	r3, #2
 8008984:	2800      	cmp	r0, #0
 8008986:	db05      	blt.n	8008994 <__hi0bits+0x38>
 8008988:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800898c:	f103 0301 	add.w	r3, r3, #1
 8008990:	bf08      	it	eq
 8008992:	2320      	moveq	r3, #32
 8008994:	4618      	mov	r0, r3
 8008996:	4770      	bx	lr
 8008998:	2300      	movs	r3, #0
 800899a:	e7e4      	b.n	8008966 <__hi0bits+0xa>

0800899c <__lo0bits>:
 800899c:	6803      	ldr	r3, [r0, #0]
 800899e:	f013 0207 	ands.w	r2, r3, #7
 80089a2:	4601      	mov	r1, r0
 80089a4:	d00b      	beq.n	80089be <__lo0bits+0x22>
 80089a6:	07da      	lsls	r2, r3, #31
 80089a8:	d423      	bmi.n	80089f2 <__lo0bits+0x56>
 80089aa:	0798      	lsls	r0, r3, #30
 80089ac:	bf49      	itett	mi
 80089ae:	085b      	lsrmi	r3, r3, #1
 80089b0:	089b      	lsrpl	r3, r3, #2
 80089b2:	2001      	movmi	r0, #1
 80089b4:	600b      	strmi	r3, [r1, #0]
 80089b6:	bf5c      	itt	pl
 80089b8:	600b      	strpl	r3, [r1, #0]
 80089ba:	2002      	movpl	r0, #2
 80089bc:	4770      	bx	lr
 80089be:	b298      	uxth	r0, r3
 80089c0:	b9a8      	cbnz	r0, 80089ee <__lo0bits+0x52>
 80089c2:	0c1b      	lsrs	r3, r3, #16
 80089c4:	2010      	movs	r0, #16
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	b90a      	cbnz	r2, 80089ce <__lo0bits+0x32>
 80089ca:	3008      	adds	r0, #8
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	071a      	lsls	r2, r3, #28
 80089d0:	bf04      	itt	eq
 80089d2:	091b      	lsreq	r3, r3, #4
 80089d4:	3004      	addeq	r0, #4
 80089d6:	079a      	lsls	r2, r3, #30
 80089d8:	bf04      	itt	eq
 80089da:	089b      	lsreq	r3, r3, #2
 80089dc:	3002      	addeq	r0, #2
 80089de:	07da      	lsls	r2, r3, #31
 80089e0:	d403      	bmi.n	80089ea <__lo0bits+0x4e>
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	f100 0001 	add.w	r0, r0, #1
 80089e8:	d005      	beq.n	80089f6 <__lo0bits+0x5a>
 80089ea:	600b      	str	r3, [r1, #0]
 80089ec:	4770      	bx	lr
 80089ee:	4610      	mov	r0, r2
 80089f0:	e7e9      	b.n	80089c6 <__lo0bits+0x2a>
 80089f2:	2000      	movs	r0, #0
 80089f4:	4770      	bx	lr
 80089f6:	2020      	movs	r0, #32
 80089f8:	4770      	bx	lr
	...

080089fc <__i2b>:
 80089fc:	b510      	push	{r4, lr}
 80089fe:	460c      	mov	r4, r1
 8008a00:	2101      	movs	r1, #1
 8008a02:	f7ff feb9 	bl	8008778 <_Balloc>
 8008a06:	4602      	mov	r2, r0
 8008a08:	b928      	cbnz	r0, 8008a16 <__i2b+0x1a>
 8008a0a:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <__i2b+0x24>)
 8008a0c:	4805      	ldr	r0, [pc, #20]	; (8008a24 <__i2b+0x28>)
 8008a0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a12:	f001 f871 	bl	8009af8 <__assert_func>
 8008a16:	2301      	movs	r3, #1
 8008a18:	6144      	str	r4, [r0, #20]
 8008a1a:	6103      	str	r3, [r0, #16]
 8008a1c:	bd10      	pop	{r4, pc}
 8008a1e:	bf00      	nop
 8008a20:	0800a3d0 	.word	0x0800a3d0
 8008a24:	0800a4c0 	.word	0x0800a4c0

08008a28 <__multiply>:
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	4691      	mov	r9, r2
 8008a2e:	690a      	ldr	r2, [r1, #16]
 8008a30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	bfb8      	it	lt
 8008a38:	460b      	movlt	r3, r1
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	bfbc      	itt	lt
 8008a3e:	464c      	movlt	r4, r9
 8008a40:	4699      	movlt	r9, r3
 8008a42:	6927      	ldr	r7, [r4, #16]
 8008a44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a48:	68a3      	ldr	r3, [r4, #8]
 8008a4a:	6861      	ldr	r1, [r4, #4]
 8008a4c:	eb07 060a 	add.w	r6, r7, sl
 8008a50:	42b3      	cmp	r3, r6
 8008a52:	b085      	sub	sp, #20
 8008a54:	bfb8      	it	lt
 8008a56:	3101      	addlt	r1, #1
 8008a58:	f7ff fe8e 	bl	8008778 <_Balloc>
 8008a5c:	b930      	cbnz	r0, 8008a6c <__multiply+0x44>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	4b44      	ldr	r3, [pc, #272]	; (8008b74 <__multiply+0x14c>)
 8008a62:	4845      	ldr	r0, [pc, #276]	; (8008b78 <__multiply+0x150>)
 8008a64:	f240 115d 	movw	r1, #349	; 0x15d
 8008a68:	f001 f846 	bl	8009af8 <__assert_func>
 8008a6c:	f100 0514 	add.w	r5, r0, #20
 8008a70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a74:	462b      	mov	r3, r5
 8008a76:	2200      	movs	r2, #0
 8008a78:	4543      	cmp	r3, r8
 8008a7a:	d321      	bcc.n	8008ac0 <__multiply+0x98>
 8008a7c:	f104 0314 	add.w	r3, r4, #20
 8008a80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a84:	f109 0314 	add.w	r3, r9, #20
 8008a88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a8c:	9202      	str	r2, [sp, #8]
 8008a8e:	1b3a      	subs	r2, r7, r4
 8008a90:	3a15      	subs	r2, #21
 8008a92:	f022 0203 	bic.w	r2, r2, #3
 8008a96:	3204      	adds	r2, #4
 8008a98:	f104 0115 	add.w	r1, r4, #21
 8008a9c:	428f      	cmp	r7, r1
 8008a9e:	bf38      	it	cc
 8008aa0:	2204      	movcc	r2, #4
 8008aa2:	9201      	str	r2, [sp, #4]
 8008aa4:	9a02      	ldr	r2, [sp, #8]
 8008aa6:	9303      	str	r3, [sp, #12]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d80c      	bhi.n	8008ac6 <__multiply+0x9e>
 8008aac:	2e00      	cmp	r6, #0
 8008aae:	dd03      	ble.n	8008ab8 <__multiply+0x90>
 8008ab0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d05a      	beq.n	8008b6e <__multiply+0x146>
 8008ab8:	6106      	str	r6, [r0, #16]
 8008aba:	b005      	add	sp, #20
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	f843 2b04 	str.w	r2, [r3], #4
 8008ac4:	e7d8      	b.n	8008a78 <__multiply+0x50>
 8008ac6:	f8b3 a000 	ldrh.w	sl, [r3]
 8008aca:	f1ba 0f00 	cmp.w	sl, #0
 8008ace:	d024      	beq.n	8008b1a <__multiply+0xf2>
 8008ad0:	f104 0e14 	add.w	lr, r4, #20
 8008ad4:	46a9      	mov	r9, r5
 8008ad6:	f04f 0c00 	mov.w	ip, #0
 8008ada:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ade:	f8d9 1000 	ldr.w	r1, [r9]
 8008ae2:	fa1f fb82 	uxth.w	fp, r2
 8008ae6:	b289      	uxth	r1, r1
 8008ae8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008aec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008af0:	f8d9 2000 	ldr.w	r2, [r9]
 8008af4:	4461      	add	r1, ip
 8008af6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008afa:	fb0a c20b 	mla	r2, sl, fp, ip
 8008afe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b02:	b289      	uxth	r1, r1
 8008b04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b08:	4577      	cmp	r7, lr
 8008b0a:	f849 1b04 	str.w	r1, [r9], #4
 8008b0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b12:	d8e2      	bhi.n	8008ada <__multiply+0xb2>
 8008b14:	9a01      	ldr	r2, [sp, #4]
 8008b16:	f845 c002 	str.w	ip, [r5, r2]
 8008b1a:	9a03      	ldr	r2, [sp, #12]
 8008b1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b20:	3304      	adds	r3, #4
 8008b22:	f1b9 0f00 	cmp.w	r9, #0
 8008b26:	d020      	beq.n	8008b6a <__multiply+0x142>
 8008b28:	6829      	ldr	r1, [r5, #0]
 8008b2a:	f104 0c14 	add.w	ip, r4, #20
 8008b2e:	46ae      	mov	lr, r5
 8008b30:	f04f 0a00 	mov.w	sl, #0
 8008b34:	f8bc b000 	ldrh.w	fp, [ip]
 8008b38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b3c:	fb09 220b 	mla	r2, r9, fp, r2
 8008b40:	4492      	add	sl, r2
 8008b42:	b289      	uxth	r1, r1
 8008b44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b48:	f84e 1b04 	str.w	r1, [lr], #4
 8008b4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b50:	f8be 1000 	ldrh.w	r1, [lr]
 8008b54:	0c12      	lsrs	r2, r2, #16
 8008b56:	fb09 1102 	mla	r1, r9, r2, r1
 8008b5a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b5e:	4567      	cmp	r7, ip
 8008b60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b64:	d8e6      	bhi.n	8008b34 <__multiply+0x10c>
 8008b66:	9a01      	ldr	r2, [sp, #4]
 8008b68:	50a9      	str	r1, [r5, r2]
 8008b6a:	3504      	adds	r5, #4
 8008b6c:	e79a      	b.n	8008aa4 <__multiply+0x7c>
 8008b6e:	3e01      	subs	r6, #1
 8008b70:	e79c      	b.n	8008aac <__multiply+0x84>
 8008b72:	bf00      	nop
 8008b74:	0800a3d0 	.word	0x0800a3d0
 8008b78:	0800a4c0 	.word	0x0800a4c0

08008b7c <__pow5mult>:
 8008b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b80:	4615      	mov	r5, r2
 8008b82:	f012 0203 	ands.w	r2, r2, #3
 8008b86:	4606      	mov	r6, r0
 8008b88:	460f      	mov	r7, r1
 8008b8a:	d007      	beq.n	8008b9c <__pow5mult+0x20>
 8008b8c:	4c25      	ldr	r4, [pc, #148]	; (8008c24 <__pow5mult+0xa8>)
 8008b8e:	3a01      	subs	r2, #1
 8008b90:	2300      	movs	r3, #0
 8008b92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b96:	f7ff fe51 	bl	800883c <__multadd>
 8008b9a:	4607      	mov	r7, r0
 8008b9c:	10ad      	asrs	r5, r5, #2
 8008b9e:	d03d      	beq.n	8008c1c <__pow5mult+0xa0>
 8008ba0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ba2:	b97c      	cbnz	r4, 8008bc4 <__pow5mult+0x48>
 8008ba4:	2010      	movs	r0, #16
 8008ba6:	f7ff fdbf 	bl	8008728 <malloc>
 8008baa:	4602      	mov	r2, r0
 8008bac:	6270      	str	r0, [r6, #36]	; 0x24
 8008bae:	b928      	cbnz	r0, 8008bbc <__pow5mult+0x40>
 8008bb0:	4b1d      	ldr	r3, [pc, #116]	; (8008c28 <__pow5mult+0xac>)
 8008bb2:	481e      	ldr	r0, [pc, #120]	; (8008c2c <__pow5mult+0xb0>)
 8008bb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bb8:	f000 ff9e 	bl	8009af8 <__assert_func>
 8008bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bc0:	6004      	str	r4, [r0, #0]
 8008bc2:	60c4      	str	r4, [r0, #12]
 8008bc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bcc:	b94c      	cbnz	r4, 8008be2 <__pow5mult+0x66>
 8008bce:	f240 2171 	movw	r1, #625	; 0x271
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7ff ff12 	bl	80089fc <__i2b>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bde:	4604      	mov	r4, r0
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	f04f 0900 	mov.w	r9, #0
 8008be6:	07eb      	lsls	r3, r5, #31
 8008be8:	d50a      	bpl.n	8008c00 <__pow5mult+0x84>
 8008bea:	4639      	mov	r1, r7
 8008bec:	4622      	mov	r2, r4
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ff1a 	bl	8008a28 <__multiply>
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4680      	mov	r8, r0
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7ff fdfd 	bl	80087f8 <_Bfree>
 8008bfe:	4647      	mov	r7, r8
 8008c00:	106d      	asrs	r5, r5, #1
 8008c02:	d00b      	beq.n	8008c1c <__pow5mult+0xa0>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	b938      	cbnz	r0, 8008c18 <__pow5mult+0x9c>
 8008c08:	4622      	mov	r2, r4
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff ff0b 	bl	8008a28 <__multiply>
 8008c12:	6020      	str	r0, [r4, #0]
 8008c14:	f8c0 9000 	str.w	r9, [r0]
 8008c18:	4604      	mov	r4, r0
 8008c1a:	e7e4      	b.n	8008be6 <__pow5mult+0x6a>
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c22:	bf00      	nop
 8008c24:	0800a610 	.word	0x0800a610
 8008c28:	0800a35e 	.word	0x0800a35e
 8008c2c:	0800a4c0 	.word	0x0800a4c0

08008c30 <__lshift>:
 8008c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c34:	460c      	mov	r4, r1
 8008c36:	6849      	ldr	r1, [r1, #4]
 8008c38:	6923      	ldr	r3, [r4, #16]
 8008c3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c3e:	68a3      	ldr	r3, [r4, #8]
 8008c40:	4607      	mov	r7, r0
 8008c42:	4691      	mov	r9, r2
 8008c44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c48:	f108 0601 	add.w	r6, r8, #1
 8008c4c:	42b3      	cmp	r3, r6
 8008c4e:	db0b      	blt.n	8008c68 <__lshift+0x38>
 8008c50:	4638      	mov	r0, r7
 8008c52:	f7ff fd91 	bl	8008778 <_Balloc>
 8008c56:	4605      	mov	r5, r0
 8008c58:	b948      	cbnz	r0, 8008c6e <__lshift+0x3e>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	4b2a      	ldr	r3, [pc, #168]	; (8008d08 <__lshift+0xd8>)
 8008c5e:	482b      	ldr	r0, [pc, #172]	; (8008d0c <__lshift+0xdc>)
 8008c60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c64:	f000 ff48 	bl	8009af8 <__assert_func>
 8008c68:	3101      	adds	r1, #1
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	e7ee      	b.n	8008c4c <__lshift+0x1c>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f100 0114 	add.w	r1, r0, #20
 8008c74:	f100 0210 	add.w	r2, r0, #16
 8008c78:	4618      	mov	r0, r3
 8008c7a:	4553      	cmp	r3, sl
 8008c7c:	db37      	blt.n	8008cee <__lshift+0xbe>
 8008c7e:	6920      	ldr	r0, [r4, #16]
 8008c80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c84:	f104 0314 	add.w	r3, r4, #20
 8008c88:	f019 091f 	ands.w	r9, r9, #31
 8008c8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c94:	d02f      	beq.n	8008cf6 <__lshift+0xc6>
 8008c96:	f1c9 0e20 	rsb	lr, r9, #32
 8008c9a:	468a      	mov	sl, r1
 8008c9c:	f04f 0c00 	mov.w	ip, #0
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	fa02 f209 	lsl.w	r2, r2, r9
 8008ca6:	ea42 020c 	orr.w	r2, r2, ip
 8008caa:	f84a 2b04 	str.w	r2, [sl], #4
 8008cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb2:	4298      	cmp	r0, r3
 8008cb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008cb8:	d8f2      	bhi.n	8008ca0 <__lshift+0x70>
 8008cba:	1b03      	subs	r3, r0, r4
 8008cbc:	3b15      	subs	r3, #21
 8008cbe:	f023 0303 	bic.w	r3, r3, #3
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	f104 0215 	add.w	r2, r4, #21
 8008cc8:	4290      	cmp	r0, r2
 8008cca:	bf38      	it	cc
 8008ccc:	2304      	movcc	r3, #4
 8008cce:	f841 c003 	str.w	ip, [r1, r3]
 8008cd2:	f1bc 0f00 	cmp.w	ip, #0
 8008cd6:	d001      	beq.n	8008cdc <__lshift+0xac>
 8008cd8:	f108 0602 	add.w	r6, r8, #2
 8008cdc:	3e01      	subs	r6, #1
 8008cde:	4638      	mov	r0, r7
 8008ce0:	612e      	str	r6, [r5, #16]
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	f7ff fd88 	bl	80087f8 <_Bfree>
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	e7c1      	b.n	8008c7a <__lshift+0x4a>
 8008cf6:	3904      	subs	r1, #4
 8008cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d00:	4298      	cmp	r0, r3
 8008d02:	d8f9      	bhi.n	8008cf8 <__lshift+0xc8>
 8008d04:	e7ea      	b.n	8008cdc <__lshift+0xac>
 8008d06:	bf00      	nop
 8008d08:	0800a3d0 	.word	0x0800a3d0
 8008d0c:	0800a4c0 	.word	0x0800a4c0

08008d10 <__mcmp>:
 8008d10:	b530      	push	{r4, r5, lr}
 8008d12:	6902      	ldr	r2, [r0, #16]
 8008d14:	690c      	ldr	r4, [r1, #16]
 8008d16:	1b12      	subs	r2, r2, r4
 8008d18:	d10e      	bne.n	8008d38 <__mcmp+0x28>
 8008d1a:	f100 0314 	add.w	r3, r0, #20
 8008d1e:	3114      	adds	r1, #20
 8008d20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d30:	42a5      	cmp	r5, r4
 8008d32:	d003      	beq.n	8008d3c <__mcmp+0x2c>
 8008d34:	d305      	bcc.n	8008d42 <__mcmp+0x32>
 8008d36:	2201      	movs	r2, #1
 8008d38:	4610      	mov	r0, r2
 8008d3a:	bd30      	pop	{r4, r5, pc}
 8008d3c:	4283      	cmp	r3, r0
 8008d3e:	d3f3      	bcc.n	8008d28 <__mcmp+0x18>
 8008d40:	e7fa      	b.n	8008d38 <__mcmp+0x28>
 8008d42:	f04f 32ff 	mov.w	r2, #4294967295
 8008d46:	e7f7      	b.n	8008d38 <__mcmp+0x28>

08008d48 <__mdiff>:
 8008d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	4606      	mov	r6, r0
 8008d50:	4611      	mov	r1, r2
 8008d52:	4620      	mov	r0, r4
 8008d54:	4690      	mov	r8, r2
 8008d56:	f7ff ffdb 	bl	8008d10 <__mcmp>
 8008d5a:	1e05      	subs	r5, r0, #0
 8008d5c:	d110      	bne.n	8008d80 <__mdiff+0x38>
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4630      	mov	r0, r6
 8008d62:	f7ff fd09 	bl	8008778 <_Balloc>
 8008d66:	b930      	cbnz	r0, 8008d76 <__mdiff+0x2e>
 8008d68:	4b3a      	ldr	r3, [pc, #232]	; (8008e54 <__mdiff+0x10c>)
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	f240 2132 	movw	r1, #562	; 0x232
 8008d70:	4839      	ldr	r0, [pc, #228]	; (8008e58 <__mdiff+0x110>)
 8008d72:	f000 fec1 	bl	8009af8 <__assert_func>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d80:	bfa4      	itt	ge
 8008d82:	4643      	movge	r3, r8
 8008d84:	46a0      	movge	r8, r4
 8008d86:	4630      	mov	r0, r6
 8008d88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d8c:	bfa6      	itte	ge
 8008d8e:	461c      	movge	r4, r3
 8008d90:	2500      	movge	r5, #0
 8008d92:	2501      	movlt	r5, #1
 8008d94:	f7ff fcf0 	bl	8008778 <_Balloc>
 8008d98:	b920      	cbnz	r0, 8008da4 <__mdiff+0x5c>
 8008d9a:	4b2e      	ldr	r3, [pc, #184]	; (8008e54 <__mdiff+0x10c>)
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008da2:	e7e5      	b.n	8008d70 <__mdiff+0x28>
 8008da4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008da8:	6926      	ldr	r6, [r4, #16]
 8008daa:	60c5      	str	r5, [r0, #12]
 8008dac:	f104 0914 	add.w	r9, r4, #20
 8008db0:	f108 0514 	add.w	r5, r8, #20
 8008db4:	f100 0e14 	add.w	lr, r0, #20
 8008db8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008dc0:	f108 0210 	add.w	r2, r8, #16
 8008dc4:	46f2      	mov	sl, lr
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008dcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008dd0:	fa1f f883 	uxth.w	r8, r3
 8008dd4:	fa11 f18b 	uxtah	r1, r1, fp
 8008dd8:	0c1b      	lsrs	r3, r3, #16
 8008dda:	eba1 0808 	sub.w	r8, r1, r8
 8008dde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008de2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008de6:	fa1f f888 	uxth.w	r8, r8
 8008dea:	1419      	asrs	r1, r3, #16
 8008dec:	454e      	cmp	r6, r9
 8008dee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008df2:	f84a 3b04 	str.w	r3, [sl], #4
 8008df6:	d8e7      	bhi.n	8008dc8 <__mdiff+0x80>
 8008df8:	1b33      	subs	r3, r6, r4
 8008dfa:	3b15      	subs	r3, #21
 8008dfc:	f023 0303 	bic.w	r3, r3, #3
 8008e00:	3304      	adds	r3, #4
 8008e02:	3415      	adds	r4, #21
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	bf38      	it	cc
 8008e08:	2304      	movcc	r3, #4
 8008e0a:	441d      	add	r5, r3
 8008e0c:	4473      	add	r3, lr
 8008e0e:	469e      	mov	lr, r3
 8008e10:	462e      	mov	r6, r5
 8008e12:	4566      	cmp	r6, ip
 8008e14:	d30e      	bcc.n	8008e34 <__mdiff+0xec>
 8008e16:	f10c 0203 	add.w	r2, ip, #3
 8008e1a:	1b52      	subs	r2, r2, r5
 8008e1c:	f022 0203 	bic.w	r2, r2, #3
 8008e20:	3d03      	subs	r5, #3
 8008e22:	45ac      	cmp	ip, r5
 8008e24:	bf38      	it	cc
 8008e26:	2200      	movcc	r2, #0
 8008e28:	441a      	add	r2, r3
 8008e2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e2e:	b17b      	cbz	r3, 8008e50 <__mdiff+0x108>
 8008e30:	6107      	str	r7, [r0, #16]
 8008e32:	e7a3      	b.n	8008d7c <__mdiff+0x34>
 8008e34:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e38:	fa11 f288 	uxtah	r2, r1, r8
 8008e3c:	1414      	asrs	r4, r2, #16
 8008e3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e42:	b292      	uxth	r2, r2
 8008e44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e48:	f84e 2b04 	str.w	r2, [lr], #4
 8008e4c:	1421      	asrs	r1, r4, #16
 8008e4e:	e7e0      	b.n	8008e12 <__mdiff+0xca>
 8008e50:	3f01      	subs	r7, #1
 8008e52:	e7ea      	b.n	8008e2a <__mdiff+0xe2>
 8008e54:	0800a3d0 	.word	0x0800a3d0
 8008e58:	0800a4c0 	.word	0x0800a4c0

08008e5c <__ulp>:
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	ed8d 0b00 	vstr	d0, [sp]
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	4912      	ldr	r1, [pc, #72]	; (8008eb0 <__ulp+0x54>)
 8008e66:	4019      	ands	r1, r3
 8008e68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	dd05      	ble.n	8008e7c <__ulp+0x20>
 8008e70:	2200      	movs	r2, #0
 8008e72:	460b      	mov	r3, r1
 8008e74:	ec43 2b10 	vmov	d0, r2, r3
 8008e78:	b002      	add	sp, #8
 8008e7a:	4770      	bx	lr
 8008e7c:	4249      	negs	r1, r1
 8008e7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008e82:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008e86:	f04f 0200 	mov.w	r2, #0
 8008e8a:	f04f 0300 	mov.w	r3, #0
 8008e8e:	da04      	bge.n	8008e9a <__ulp+0x3e>
 8008e90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008e94:	fa41 f300 	asr.w	r3, r1, r0
 8008e98:	e7ec      	b.n	8008e74 <__ulp+0x18>
 8008e9a:	f1a0 0114 	sub.w	r1, r0, #20
 8008e9e:	291e      	cmp	r1, #30
 8008ea0:	bfda      	itte	le
 8008ea2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008ea6:	fa20 f101 	lsrle.w	r1, r0, r1
 8008eaa:	2101      	movgt	r1, #1
 8008eac:	460a      	mov	r2, r1
 8008eae:	e7e1      	b.n	8008e74 <__ulp+0x18>
 8008eb0:	7ff00000 	.word	0x7ff00000

08008eb4 <__b2d>:
 8008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb6:	6905      	ldr	r5, [r0, #16]
 8008eb8:	f100 0714 	add.w	r7, r0, #20
 8008ebc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008ec0:	1f2e      	subs	r6, r5, #4
 8008ec2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f7ff fd48 	bl	800895c <__hi0bits>
 8008ecc:	f1c0 0320 	rsb	r3, r0, #32
 8008ed0:	280a      	cmp	r0, #10
 8008ed2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008f50 <__b2d+0x9c>
 8008ed6:	600b      	str	r3, [r1, #0]
 8008ed8:	dc14      	bgt.n	8008f04 <__b2d+0x50>
 8008eda:	f1c0 0e0b 	rsb	lr, r0, #11
 8008ede:	fa24 f10e 	lsr.w	r1, r4, lr
 8008ee2:	42b7      	cmp	r7, r6
 8008ee4:	ea41 030c 	orr.w	r3, r1, ip
 8008ee8:	bf34      	ite	cc
 8008eea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008eee:	2100      	movcs	r1, #0
 8008ef0:	3015      	adds	r0, #21
 8008ef2:	fa04 f000 	lsl.w	r0, r4, r0
 8008ef6:	fa21 f10e 	lsr.w	r1, r1, lr
 8008efa:	ea40 0201 	orr.w	r2, r0, r1
 8008efe:	ec43 2b10 	vmov	d0, r2, r3
 8008f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f04:	42b7      	cmp	r7, r6
 8008f06:	bf3a      	itte	cc
 8008f08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008f10:	2100      	movcs	r1, #0
 8008f12:	380b      	subs	r0, #11
 8008f14:	d017      	beq.n	8008f46 <__b2d+0x92>
 8008f16:	f1c0 0c20 	rsb	ip, r0, #32
 8008f1a:	fa04 f500 	lsl.w	r5, r4, r0
 8008f1e:	42be      	cmp	r6, r7
 8008f20:	fa21 f40c 	lsr.w	r4, r1, ip
 8008f24:	ea45 0504 	orr.w	r5, r5, r4
 8008f28:	bf8c      	ite	hi
 8008f2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008f2e:	2400      	movls	r4, #0
 8008f30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008f34:	fa01 f000 	lsl.w	r0, r1, r0
 8008f38:	fa24 f40c 	lsr.w	r4, r4, ip
 8008f3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f40:	ea40 0204 	orr.w	r2, r0, r4
 8008f44:	e7db      	b.n	8008efe <__b2d+0x4a>
 8008f46:	ea44 030c 	orr.w	r3, r4, ip
 8008f4a:	460a      	mov	r2, r1
 8008f4c:	e7d7      	b.n	8008efe <__b2d+0x4a>
 8008f4e:	bf00      	nop
 8008f50:	3ff00000 	.word	0x3ff00000

08008f54 <__d2b>:
 8008f54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f58:	4689      	mov	r9, r1
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	ec57 6b10 	vmov	r6, r7, d0
 8008f60:	4690      	mov	r8, r2
 8008f62:	f7ff fc09 	bl	8008778 <_Balloc>
 8008f66:	4604      	mov	r4, r0
 8008f68:	b930      	cbnz	r0, 8008f78 <__d2b+0x24>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	4b25      	ldr	r3, [pc, #148]	; (8009004 <__d2b+0xb0>)
 8008f6e:	4826      	ldr	r0, [pc, #152]	; (8009008 <__d2b+0xb4>)
 8008f70:	f240 310a 	movw	r1, #778	; 0x30a
 8008f74:	f000 fdc0 	bl	8009af8 <__assert_func>
 8008f78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f80:	bb35      	cbnz	r5, 8008fd0 <__d2b+0x7c>
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	d028      	beq.n	8008fda <__d2b+0x86>
 8008f88:	4668      	mov	r0, sp
 8008f8a:	9600      	str	r6, [sp, #0]
 8008f8c:	f7ff fd06 	bl	800899c <__lo0bits>
 8008f90:	9900      	ldr	r1, [sp, #0]
 8008f92:	b300      	cbz	r0, 8008fd6 <__d2b+0x82>
 8008f94:	9a01      	ldr	r2, [sp, #4]
 8008f96:	f1c0 0320 	rsb	r3, r0, #32
 8008f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	40c2      	lsrs	r2, r0
 8008fa2:	6163      	str	r3, [r4, #20]
 8008fa4:	9201      	str	r2, [sp, #4]
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	61a3      	str	r3, [r4, #24]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bf14      	ite	ne
 8008fae:	2202      	movne	r2, #2
 8008fb0:	2201      	moveq	r2, #1
 8008fb2:	6122      	str	r2, [r4, #16]
 8008fb4:	b1d5      	cbz	r5, 8008fec <__d2b+0x98>
 8008fb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fba:	4405      	add	r5, r0
 8008fbc:	f8c9 5000 	str.w	r5, [r9]
 8008fc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fc4:	f8c8 0000 	str.w	r0, [r8]
 8008fc8:	4620      	mov	r0, r4
 8008fca:	b003      	add	sp, #12
 8008fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fd4:	e7d5      	b.n	8008f82 <__d2b+0x2e>
 8008fd6:	6161      	str	r1, [r4, #20]
 8008fd8:	e7e5      	b.n	8008fa6 <__d2b+0x52>
 8008fda:	a801      	add	r0, sp, #4
 8008fdc:	f7ff fcde 	bl	800899c <__lo0bits>
 8008fe0:	9b01      	ldr	r3, [sp, #4]
 8008fe2:	6163      	str	r3, [r4, #20]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	6122      	str	r2, [r4, #16]
 8008fe8:	3020      	adds	r0, #32
 8008fea:	e7e3      	b.n	8008fb4 <__d2b+0x60>
 8008fec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ff0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ff4:	f8c9 0000 	str.w	r0, [r9]
 8008ff8:	6918      	ldr	r0, [r3, #16]
 8008ffa:	f7ff fcaf 	bl	800895c <__hi0bits>
 8008ffe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009002:	e7df      	b.n	8008fc4 <__d2b+0x70>
 8009004:	0800a3d0 	.word	0x0800a3d0
 8009008:	0800a4c0 	.word	0x0800a4c0

0800900c <__ratio>:
 800900c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	4688      	mov	r8, r1
 8009012:	4669      	mov	r1, sp
 8009014:	4681      	mov	r9, r0
 8009016:	f7ff ff4d 	bl	8008eb4 <__b2d>
 800901a:	a901      	add	r1, sp, #4
 800901c:	4640      	mov	r0, r8
 800901e:	ec55 4b10 	vmov	r4, r5, d0
 8009022:	f7ff ff47 	bl	8008eb4 <__b2d>
 8009026:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800902a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800902e:	eba3 0c02 	sub.w	ip, r3, r2
 8009032:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009036:	1a9b      	subs	r3, r3, r2
 8009038:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800903c:	ec51 0b10 	vmov	r0, r1, d0
 8009040:	2b00      	cmp	r3, #0
 8009042:	bfd6      	itet	le
 8009044:	460a      	movle	r2, r1
 8009046:	462a      	movgt	r2, r5
 8009048:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800904c:	468b      	mov	fp, r1
 800904e:	462f      	mov	r7, r5
 8009050:	bfd4      	ite	le
 8009052:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009056:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800905a:	4620      	mov	r0, r4
 800905c:	ee10 2a10 	vmov	r2, s0
 8009060:	465b      	mov	r3, fp
 8009062:	4639      	mov	r1, r7
 8009064:	f7f7 fc12 	bl	800088c <__aeabi_ddiv>
 8009068:	ec41 0b10 	vmov	d0, r0, r1
 800906c:	b003      	add	sp, #12
 800906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009072 <__copybits>:
 8009072:	3901      	subs	r1, #1
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	1149      	asrs	r1, r1, #5
 8009078:	6914      	ldr	r4, [r2, #16]
 800907a:	3101      	adds	r1, #1
 800907c:	f102 0314 	add.w	r3, r2, #20
 8009080:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009084:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009088:	1f05      	subs	r5, r0, #4
 800908a:	42a3      	cmp	r3, r4
 800908c:	d30c      	bcc.n	80090a8 <__copybits+0x36>
 800908e:	1aa3      	subs	r3, r4, r2
 8009090:	3b11      	subs	r3, #17
 8009092:	f023 0303 	bic.w	r3, r3, #3
 8009096:	3211      	adds	r2, #17
 8009098:	42a2      	cmp	r2, r4
 800909a:	bf88      	it	hi
 800909c:	2300      	movhi	r3, #0
 800909e:	4418      	add	r0, r3
 80090a0:	2300      	movs	r3, #0
 80090a2:	4288      	cmp	r0, r1
 80090a4:	d305      	bcc.n	80090b2 <__copybits+0x40>
 80090a6:	bd70      	pop	{r4, r5, r6, pc}
 80090a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80090ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80090b0:	e7eb      	b.n	800908a <__copybits+0x18>
 80090b2:	f840 3b04 	str.w	r3, [r0], #4
 80090b6:	e7f4      	b.n	80090a2 <__copybits+0x30>

080090b8 <__any_on>:
 80090b8:	f100 0214 	add.w	r2, r0, #20
 80090bc:	6900      	ldr	r0, [r0, #16]
 80090be:	114b      	asrs	r3, r1, #5
 80090c0:	4298      	cmp	r0, r3
 80090c2:	b510      	push	{r4, lr}
 80090c4:	db11      	blt.n	80090ea <__any_on+0x32>
 80090c6:	dd0a      	ble.n	80090de <__any_on+0x26>
 80090c8:	f011 011f 	ands.w	r1, r1, #31
 80090cc:	d007      	beq.n	80090de <__any_on+0x26>
 80090ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090d2:	fa24 f001 	lsr.w	r0, r4, r1
 80090d6:	fa00 f101 	lsl.w	r1, r0, r1
 80090da:	428c      	cmp	r4, r1
 80090dc:	d10b      	bne.n	80090f6 <__any_on+0x3e>
 80090de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d803      	bhi.n	80090ee <__any_on+0x36>
 80090e6:	2000      	movs	r0, #0
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	4603      	mov	r3, r0
 80090ec:	e7f7      	b.n	80090de <__any_on+0x26>
 80090ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090f2:	2900      	cmp	r1, #0
 80090f4:	d0f5      	beq.n	80090e2 <__any_on+0x2a>
 80090f6:	2001      	movs	r0, #1
 80090f8:	e7f6      	b.n	80090e8 <__any_on+0x30>

080090fa <_calloc_r>:
 80090fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090fc:	fba1 2402 	umull	r2, r4, r1, r2
 8009100:	b94c      	cbnz	r4, 8009116 <_calloc_r+0x1c>
 8009102:	4611      	mov	r1, r2
 8009104:	9201      	str	r2, [sp, #4]
 8009106:	f000 f87b 	bl	8009200 <_malloc_r>
 800910a:	9a01      	ldr	r2, [sp, #4]
 800910c:	4605      	mov	r5, r0
 800910e:	b930      	cbnz	r0, 800911e <_calloc_r+0x24>
 8009110:	4628      	mov	r0, r5
 8009112:	b003      	add	sp, #12
 8009114:	bd30      	pop	{r4, r5, pc}
 8009116:	220c      	movs	r2, #12
 8009118:	6002      	str	r2, [r0, #0]
 800911a:	2500      	movs	r5, #0
 800911c:	e7f8      	b.n	8009110 <_calloc_r+0x16>
 800911e:	4621      	mov	r1, r4
 8009120:	f7fc f8c4 	bl	80052ac <memset>
 8009124:	e7f4      	b.n	8009110 <_calloc_r+0x16>
	...

08009128 <_free_r>:
 8009128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800912a:	2900      	cmp	r1, #0
 800912c:	d044      	beq.n	80091b8 <_free_r+0x90>
 800912e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009132:	9001      	str	r0, [sp, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f1a1 0404 	sub.w	r4, r1, #4
 800913a:	bfb8      	it	lt
 800913c:	18e4      	addlt	r4, r4, r3
 800913e:	f000 fd69 	bl	8009c14 <__malloc_lock>
 8009142:	4a1e      	ldr	r2, [pc, #120]	; (80091bc <_free_r+0x94>)
 8009144:	9801      	ldr	r0, [sp, #4]
 8009146:	6813      	ldr	r3, [r2, #0]
 8009148:	b933      	cbnz	r3, 8009158 <_free_r+0x30>
 800914a:	6063      	str	r3, [r4, #4]
 800914c:	6014      	str	r4, [r2, #0]
 800914e:	b003      	add	sp, #12
 8009150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009154:	f000 bd64 	b.w	8009c20 <__malloc_unlock>
 8009158:	42a3      	cmp	r3, r4
 800915a:	d908      	bls.n	800916e <_free_r+0x46>
 800915c:	6825      	ldr	r5, [r4, #0]
 800915e:	1961      	adds	r1, r4, r5
 8009160:	428b      	cmp	r3, r1
 8009162:	bf01      	itttt	eq
 8009164:	6819      	ldreq	r1, [r3, #0]
 8009166:	685b      	ldreq	r3, [r3, #4]
 8009168:	1949      	addeq	r1, r1, r5
 800916a:	6021      	streq	r1, [r4, #0]
 800916c:	e7ed      	b.n	800914a <_free_r+0x22>
 800916e:	461a      	mov	r2, r3
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	b10b      	cbz	r3, 8009178 <_free_r+0x50>
 8009174:	42a3      	cmp	r3, r4
 8009176:	d9fa      	bls.n	800916e <_free_r+0x46>
 8009178:	6811      	ldr	r1, [r2, #0]
 800917a:	1855      	adds	r5, r2, r1
 800917c:	42a5      	cmp	r5, r4
 800917e:	d10b      	bne.n	8009198 <_free_r+0x70>
 8009180:	6824      	ldr	r4, [r4, #0]
 8009182:	4421      	add	r1, r4
 8009184:	1854      	adds	r4, r2, r1
 8009186:	42a3      	cmp	r3, r4
 8009188:	6011      	str	r1, [r2, #0]
 800918a:	d1e0      	bne.n	800914e <_free_r+0x26>
 800918c:	681c      	ldr	r4, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	6053      	str	r3, [r2, #4]
 8009192:	4421      	add	r1, r4
 8009194:	6011      	str	r1, [r2, #0]
 8009196:	e7da      	b.n	800914e <_free_r+0x26>
 8009198:	d902      	bls.n	80091a0 <_free_r+0x78>
 800919a:	230c      	movs	r3, #12
 800919c:	6003      	str	r3, [r0, #0]
 800919e:	e7d6      	b.n	800914e <_free_r+0x26>
 80091a0:	6825      	ldr	r5, [r4, #0]
 80091a2:	1961      	adds	r1, r4, r5
 80091a4:	428b      	cmp	r3, r1
 80091a6:	bf04      	itt	eq
 80091a8:	6819      	ldreq	r1, [r3, #0]
 80091aa:	685b      	ldreq	r3, [r3, #4]
 80091ac:	6063      	str	r3, [r4, #4]
 80091ae:	bf04      	itt	eq
 80091b0:	1949      	addeq	r1, r1, r5
 80091b2:	6021      	streq	r1, [r4, #0]
 80091b4:	6054      	str	r4, [r2, #4]
 80091b6:	e7ca      	b.n	800914e <_free_r+0x26>
 80091b8:	b003      	add	sp, #12
 80091ba:	bd30      	pop	{r4, r5, pc}
 80091bc:	2000037c 	.word	0x2000037c

080091c0 <sbrk_aligned>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	4e0e      	ldr	r6, [pc, #56]	; (80091fc <sbrk_aligned+0x3c>)
 80091c4:	460c      	mov	r4, r1
 80091c6:	6831      	ldr	r1, [r6, #0]
 80091c8:	4605      	mov	r5, r0
 80091ca:	b911      	cbnz	r1, 80091d2 <sbrk_aligned+0x12>
 80091cc:	f000 fb4c 	bl	8009868 <_sbrk_r>
 80091d0:	6030      	str	r0, [r6, #0]
 80091d2:	4621      	mov	r1, r4
 80091d4:	4628      	mov	r0, r5
 80091d6:	f000 fb47 	bl	8009868 <_sbrk_r>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d00a      	beq.n	80091f4 <sbrk_aligned+0x34>
 80091de:	1cc4      	adds	r4, r0, #3
 80091e0:	f024 0403 	bic.w	r4, r4, #3
 80091e4:	42a0      	cmp	r0, r4
 80091e6:	d007      	beq.n	80091f8 <sbrk_aligned+0x38>
 80091e8:	1a21      	subs	r1, r4, r0
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 fb3c 	bl	8009868 <_sbrk_r>
 80091f0:	3001      	adds	r0, #1
 80091f2:	d101      	bne.n	80091f8 <sbrk_aligned+0x38>
 80091f4:	f04f 34ff 	mov.w	r4, #4294967295
 80091f8:	4620      	mov	r0, r4
 80091fa:	bd70      	pop	{r4, r5, r6, pc}
 80091fc:	20000380 	.word	0x20000380

08009200 <_malloc_r>:
 8009200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009204:	1ccd      	adds	r5, r1, #3
 8009206:	f025 0503 	bic.w	r5, r5, #3
 800920a:	3508      	adds	r5, #8
 800920c:	2d0c      	cmp	r5, #12
 800920e:	bf38      	it	cc
 8009210:	250c      	movcc	r5, #12
 8009212:	2d00      	cmp	r5, #0
 8009214:	4607      	mov	r7, r0
 8009216:	db01      	blt.n	800921c <_malloc_r+0x1c>
 8009218:	42a9      	cmp	r1, r5
 800921a:	d905      	bls.n	8009228 <_malloc_r+0x28>
 800921c:	230c      	movs	r3, #12
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	2600      	movs	r6, #0
 8009222:	4630      	mov	r0, r6
 8009224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009228:	4e2e      	ldr	r6, [pc, #184]	; (80092e4 <_malloc_r+0xe4>)
 800922a:	f000 fcf3 	bl	8009c14 <__malloc_lock>
 800922e:	6833      	ldr	r3, [r6, #0]
 8009230:	461c      	mov	r4, r3
 8009232:	bb34      	cbnz	r4, 8009282 <_malloc_r+0x82>
 8009234:	4629      	mov	r1, r5
 8009236:	4638      	mov	r0, r7
 8009238:	f7ff ffc2 	bl	80091c0 <sbrk_aligned>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	4604      	mov	r4, r0
 8009240:	d14d      	bne.n	80092de <_malloc_r+0xde>
 8009242:	6834      	ldr	r4, [r6, #0]
 8009244:	4626      	mov	r6, r4
 8009246:	2e00      	cmp	r6, #0
 8009248:	d140      	bne.n	80092cc <_malloc_r+0xcc>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	4631      	mov	r1, r6
 800924e:	4638      	mov	r0, r7
 8009250:	eb04 0803 	add.w	r8, r4, r3
 8009254:	f000 fb08 	bl	8009868 <_sbrk_r>
 8009258:	4580      	cmp	r8, r0
 800925a:	d13a      	bne.n	80092d2 <_malloc_r+0xd2>
 800925c:	6821      	ldr	r1, [r4, #0]
 800925e:	3503      	adds	r5, #3
 8009260:	1a6d      	subs	r5, r5, r1
 8009262:	f025 0503 	bic.w	r5, r5, #3
 8009266:	3508      	adds	r5, #8
 8009268:	2d0c      	cmp	r5, #12
 800926a:	bf38      	it	cc
 800926c:	250c      	movcc	r5, #12
 800926e:	4629      	mov	r1, r5
 8009270:	4638      	mov	r0, r7
 8009272:	f7ff ffa5 	bl	80091c0 <sbrk_aligned>
 8009276:	3001      	adds	r0, #1
 8009278:	d02b      	beq.n	80092d2 <_malloc_r+0xd2>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	442b      	add	r3, r5
 800927e:	6023      	str	r3, [r4, #0]
 8009280:	e00e      	b.n	80092a0 <_malloc_r+0xa0>
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	1b52      	subs	r2, r2, r5
 8009286:	d41e      	bmi.n	80092c6 <_malloc_r+0xc6>
 8009288:	2a0b      	cmp	r2, #11
 800928a:	d916      	bls.n	80092ba <_malloc_r+0xba>
 800928c:	1961      	adds	r1, r4, r5
 800928e:	42a3      	cmp	r3, r4
 8009290:	6025      	str	r5, [r4, #0]
 8009292:	bf18      	it	ne
 8009294:	6059      	strne	r1, [r3, #4]
 8009296:	6863      	ldr	r3, [r4, #4]
 8009298:	bf08      	it	eq
 800929a:	6031      	streq	r1, [r6, #0]
 800929c:	5162      	str	r2, [r4, r5]
 800929e:	604b      	str	r3, [r1, #4]
 80092a0:	4638      	mov	r0, r7
 80092a2:	f104 060b 	add.w	r6, r4, #11
 80092a6:	f000 fcbb 	bl	8009c20 <__malloc_unlock>
 80092aa:	f026 0607 	bic.w	r6, r6, #7
 80092ae:	1d23      	adds	r3, r4, #4
 80092b0:	1af2      	subs	r2, r6, r3
 80092b2:	d0b6      	beq.n	8009222 <_malloc_r+0x22>
 80092b4:	1b9b      	subs	r3, r3, r6
 80092b6:	50a3      	str	r3, [r4, r2]
 80092b8:	e7b3      	b.n	8009222 <_malloc_r+0x22>
 80092ba:	6862      	ldr	r2, [r4, #4]
 80092bc:	42a3      	cmp	r3, r4
 80092be:	bf0c      	ite	eq
 80092c0:	6032      	streq	r2, [r6, #0]
 80092c2:	605a      	strne	r2, [r3, #4]
 80092c4:	e7ec      	b.n	80092a0 <_malloc_r+0xa0>
 80092c6:	4623      	mov	r3, r4
 80092c8:	6864      	ldr	r4, [r4, #4]
 80092ca:	e7b2      	b.n	8009232 <_malloc_r+0x32>
 80092cc:	4634      	mov	r4, r6
 80092ce:	6876      	ldr	r6, [r6, #4]
 80092d0:	e7b9      	b.n	8009246 <_malloc_r+0x46>
 80092d2:	230c      	movs	r3, #12
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	4638      	mov	r0, r7
 80092d8:	f000 fca2 	bl	8009c20 <__malloc_unlock>
 80092dc:	e7a1      	b.n	8009222 <_malloc_r+0x22>
 80092de:	6025      	str	r5, [r4, #0]
 80092e0:	e7de      	b.n	80092a0 <_malloc_r+0xa0>
 80092e2:	bf00      	nop
 80092e4:	2000037c 	.word	0x2000037c

080092e8 <__ssputs_r>:
 80092e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	688e      	ldr	r6, [r1, #8]
 80092ee:	429e      	cmp	r6, r3
 80092f0:	4682      	mov	sl, r0
 80092f2:	460c      	mov	r4, r1
 80092f4:	4690      	mov	r8, r2
 80092f6:	461f      	mov	r7, r3
 80092f8:	d838      	bhi.n	800936c <__ssputs_r+0x84>
 80092fa:	898a      	ldrh	r2, [r1, #12]
 80092fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009300:	d032      	beq.n	8009368 <__ssputs_r+0x80>
 8009302:	6825      	ldr	r5, [r4, #0]
 8009304:	6909      	ldr	r1, [r1, #16]
 8009306:	eba5 0901 	sub.w	r9, r5, r1
 800930a:	6965      	ldr	r5, [r4, #20]
 800930c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009314:	3301      	adds	r3, #1
 8009316:	444b      	add	r3, r9
 8009318:	106d      	asrs	r5, r5, #1
 800931a:	429d      	cmp	r5, r3
 800931c:	bf38      	it	cc
 800931e:	461d      	movcc	r5, r3
 8009320:	0553      	lsls	r3, r2, #21
 8009322:	d531      	bpl.n	8009388 <__ssputs_r+0xa0>
 8009324:	4629      	mov	r1, r5
 8009326:	f7ff ff6b 	bl	8009200 <_malloc_r>
 800932a:	4606      	mov	r6, r0
 800932c:	b950      	cbnz	r0, 8009344 <__ssputs_r+0x5c>
 800932e:	230c      	movs	r3, #12
 8009330:	f8ca 3000 	str.w	r3, [sl]
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800933a:	81a3      	strh	r3, [r4, #12]
 800933c:	f04f 30ff 	mov.w	r0, #4294967295
 8009340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009344:	6921      	ldr	r1, [r4, #16]
 8009346:	464a      	mov	r2, r9
 8009348:	f7ff fa08 	bl	800875c <memcpy>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	6126      	str	r6, [r4, #16]
 800935a:	6165      	str	r5, [r4, #20]
 800935c:	444e      	add	r6, r9
 800935e:	eba5 0509 	sub.w	r5, r5, r9
 8009362:	6026      	str	r6, [r4, #0]
 8009364:	60a5      	str	r5, [r4, #8]
 8009366:	463e      	mov	r6, r7
 8009368:	42be      	cmp	r6, r7
 800936a:	d900      	bls.n	800936e <__ssputs_r+0x86>
 800936c:	463e      	mov	r6, r7
 800936e:	6820      	ldr	r0, [r4, #0]
 8009370:	4632      	mov	r2, r6
 8009372:	4641      	mov	r1, r8
 8009374:	f000 fc34 	bl	8009be0 <memmove>
 8009378:	68a3      	ldr	r3, [r4, #8]
 800937a:	1b9b      	subs	r3, r3, r6
 800937c:	60a3      	str	r3, [r4, #8]
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	4433      	add	r3, r6
 8009382:	6023      	str	r3, [r4, #0]
 8009384:	2000      	movs	r0, #0
 8009386:	e7db      	b.n	8009340 <__ssputs_r+0x58>
 8009388:	462a      	mov	r2, r5
 800938a:	f000 fc4f 	bl	8009c2c <_realloc_r>
 800938e:	4606      	mov	r6, r0
 8009390:	2800      	cmp	r0, #0
 8009392:	d1e1      	bne.n	8009358 <__ssputs_r+0x70>
 8009394:	6921      	ldr	r1, [r4, #16]
 8009396:	4650      	mov	r0, sl
 8009398:	f7ff fec6 	bl	8009128 <_free_r>
 800939c:	e7c7      	b.n	800932e <__ssputs_r+0x46>
	...

080093a0 <_svfiprintf_r>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	4698      	mov	r8, r3
 80093a6:	898b      	ldrh	r3, [r1, #12]
 80093a8:	061b      	lsls	r3, r3, #24
 80093aa:	b09d      	sub	sp, #116	; 0x74
 80093ac:	4607      	mov	r7, r0
 80093ae:	460d      	mov	r5, r1
 80093b0:	4614      	mov	r4, r2
 80093b2:	d50e      	bpl.n	80093d2 <_svfiprintf_r+0x32>
 80093b4:	690b      	ldr	r3, [r1, #16]
 80093b6:	b963      	cbnz	r3, 80093d2 <_svfiprintf_r+0x32>
 80093b8:	2140      	movs	r1, #64	; 0x40
 80093ba:	f7ff ff21 	bl	8009200 <_malloc_r>
 80093be:	6028      	str	r0, [r5, #0]
 80093c0:	6128      	str	r0, [r5, #16]
 80093c2:	b920      	cbnz	r0, 80093ce <_svfiprintf_r+0x2e>
 80093c4:	230c      	movs	r3, #12
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295
 80093cc:	e0d1      	b.n	8009572 <_svfiprintf_r+0x1d2>
 80093ce:	2340      	movs	r3, #64	; 0x40
 80093d0:	616b      	str	r3, [r5, #20]
 80093d2:	2300      	movs	r3, #0
 80093d4:	9309      	str	r3, [sp, #36]	; 0x24
 80093d6:	2320      	movs	r3, #32
 80093d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80093e0:	2330      	movs	r3, #48	; 0x30
 80093e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800958c <_svfiprintf_r+0x1ec>
 80093e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ea:	f04f 0901 	mov.w	r9, #1
 80093ee:	4623      	mov	r3, r4
 80093f0:	469a      	mov	sl, r3
 80093f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093f6:	b10a      	cbz	r2, 80093fc <_svfiprintf_r+0x5c>
 80093f8:	2a25      	cmp	r2, #37	; 0x25
 80093fa:	d1f9      	bne.n	80093f0 <_svfiprintf_r+0x50>
 80093fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009400:	d00b      	beq.n	800941a <_svfiprintf_r+0x7a>
 8009402:	465b      	mov	r3, fp
 8009404:	4622      	mov	r2, r4
 8009406:	4629      	mov	r1, r5
 8009408:	4638      	mov	r0, r7
 800940a:	f7ff ff6d 	bl	80092e8 <__ssputs_r>
 800940e:	3001      	adds	r0, #1
 8009410:	f000 80aa 	beq.w	8009568 <_svfiprintf_r+0x1c8>
 8009414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009416:	445a      	add	r2, fp
 8009418:	9209      	str	r2, [sp, #36]	; 0x24
 800941a:	f89a 3000 	ldrb.w	r3, [sl]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 80a2 	beq.w	8009568 <_svfiprintf_r+0x1c8>
 8009424:	2300      	movs	r3, #0
 8009426:	f04f 32ff 	mov.w	r2, #4294967295
 800942a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800942e:	f10a 0a01 	add.w	sl, sl, #1
 8009432:	9304      	str	r3, [sp, #16]
 8009434:	9307      	str	r3, [sp, #28]
 8009436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800943a:	931a      	str	r3, [sp, #104]	; 0x68
 800943c:	4654      	mov	r4, sl
 800943e:	2205      	movs	r2, #5
 8009440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009444:	4851      	ldr	r0, [pc, #324]	; (800958c <_svfiprintf_r+0x1ec>)
 8009446:	f7f6 feeb 	bl	8000220 <memchr>
 800944a:	9a04      	ldr	r2, [sp, #16]
 800944c:	b9d8      	cbnz	r0, 8009486 <_svfiprintf_r+0xe6>
 800944e:	06d0      	lsls	r0, r2, #27
 8009450:	bf44      	itt	mi
 8009452:	2320      	movmi	r3, #32
 8009454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009458:	0711      	lsls	r1, r2, #28
 800945a:	bf44      	itt	mi
 800945c:	232b      	movmi	r3, #43	; 0x2b
 800945e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009462:	f89a 3000 	ldrb.w	r3, [sl]
 8009466:	2b2a      	cmp	r3, #42	; 0x2a
 8009468:	d015      	beq.n	8009496 <_svfiprintf_r+0xf6>
 800946a:	9a07      	ldr	r2, [sp, #28]
 800946c:	4654      	mov	r4, sl
 800946e:	2000      	movs	r0, #0
 8009470:	f04f 0c0a 	mov.w	ip, #10
 8009474:	4621      	mov	r1, r4
 8009476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800947a:	3b30      	subs	r3, #48	; 0x30
 800947c:	2b09      	cmp	r3, #9
 800947e:	d94e      	bls.n	800951e <_svfiprintf_r+0x17e>
 8009480:	b1b0      	cbz	r0, 80094b0 <_svfiprintf_r+0x110>
 8009482:	9207      	str	r2, [sp, #28]
 8009484:	e014      	b.n	80094b0 <_svfiprintf_r+0x110>
 8009486:	eba0 0308 	sub.w	r3, r0, r8
 800948a:	fa09 f303 	lsl.w	r3, r9, r3
 800948e:	4313      	orrs	r3, r2
 8009490:	9304      	str	r3, [sp, #16]
 8009492:	46a2      	mov	sl, r4
 8009494:	e7d2      	b.n	800943c <_svfiprintf_r+0x9c>
 8009496:	9b03      	ldr	r3, [sp, #12]
 8009498:	1d19      	adds	r1, r3, #4
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	9103      	str	r1, [sp, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bfbb      	ittet	lt
 80094a2:	425b      	neglt	r3, r3
 80094a4:	f042 0202 	orrlt.w	r2, r2, #2
 80094a8:	9307      	strge	r3, [sp, #28]
 80094aa:	9307      	strlt	r3, [sp, #28]
 80094ac:	bfb8      	it	lt
 80094ae:	9204      	strlt	r2, [sp, #16]
 80094b0:	7823      	ldrb	r3, [r4, #0]
 80094b2:	2b2e      	cmp	r3, #46	; 0x2e
 80094b4:	d10c      	bne.n	80094d0 <_svfiprintf_r+0x130>
 80094b6:	7863      	ldrb	r3, [r4, #1]
 80094b8:	2b2a      	cmp	r3, #42	; 0x2a
 80094ba:	d135      	bne.n	8009528 <_svfiprintf_r+0x188>
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	1d1a      	adds	r2, r3, #4
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	9203      	str	r2, [sp, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bfb8      	it	lt
 80094c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80094cc:	3402      	adds	r4, #2
 80094ce:	9305      	str	r3, [sp, #20]
 80094d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800959c <_svfiprintf_r+0x1fc>
 80094d4:	7821      	ldrb	r1, [r4, #0]
 80094d6:	2203      	movs	r2, #3
 80094d8:	4650      	mov	r0, sl
 80094da:	f7f6 fea1 	bl	8000220 <memchr>
 80094de:	b140      	cbz	r0, 80094f2 <_svfiprintf_r+0x152>
 80094e0:	2340      	movs	r3, #64	; 0x40
 80094e2:	eba0 000a 	sub.w	r0, r0, sl
 80094e6:	fa03 f000 	lsl.w	r0, r3, r0
 80094ea:	9b04      	ldr	r3, [sp, #16]
 80094ec:	4303      	orrs	r3, r0
 80094ee:	3401      	adds	r4, #1
 80094f0:	9304      	str	r3, [sp, #16]
 80094f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f6:	4826      	ldr	r0, [pc, #152]	; (8009590 <_svfiprintf_r+0x1f0>)
 80094f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094fc:	2206      	movs	r2, #6
 80094fe:	f7f6 fe8f 	bl	8000220 <memchr>
 8009502:	2800      	cmp	r0, #0
 8009504:	d038      	beq.n	8009578 <_svfiprintf_r+0x1d8>
 8009506:	4b23      	ldr	r3, [pc, #140]	; (8009594 <_svfiprintf_r+0x1f4>)
 8009508:	bb1b      	cbnz	r3, 8009552 <_svfiprintf_r+0x1b2>
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	3307      	adds	r3, #7
 800950e:	f023 0307 	bic.w	r3, r3, #7
 8009512:	3308      	adds	r3, #8
 8009514:	9303      	str	r3, [sp, #12]
 8009516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009518:	4433      	add	r3, r6
 800951a:	9309      	str	r3, [sp, #36]	; 0x24
 800951c:	e767      	b.n	80093ee <_svfiprintf_r+0x4e>
 800951e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009522:	460c      	mov	r4, r1
 8009524:	2001      	movs	r0, #1
 8009526:	e7a5      	b.n	8009474 <_svfiprintf_r+0xd4>
 8009528:	2300      	movs	r3, #0
 800952a:	3401      	adds	r4, #1
 800952c:	9305      	str	r3, [sp, #20]
 800952e:	4619      	mov	r1, r3
 8009530:	f04f 0c0a 	mov.w	ip, #10
 8009534:	4620      	mov	r0, r4
 8009536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800953a:	3a30      	subs	r2, #48	; 0x30
 800953c:	2a09      	cmp	r2, #9
 800953e:	d903      	bls.n	8009548 <_svfiprintf_r+0x1a8>
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0c5      	beq.n	80094d0 <_svfiprintf_r+0x130>
 8009544:	9105      	str	r1, [sp, #20]
 8009546:	e7c3      	b.n	80094d0 <_svfiprintf_r+0x130>
 8009548:	fb0c 2101 	mla	r1, ip, r1, r2
 800954c:	4604      	mov	r4, r0
 800954e:	2301      	movs	r3, #1
 8009550:	e7f0      	b.n	8009534 <_svfiprintf_r+0x194>
 8009552:	ab03      	add	r3, sp, #12
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	462a      	mov	r2, r5
 8009558:	4b0f      	ldr	r3, [pc, #60]	; (8009598 <_svfiprintf_r+0x1f8>)
 800955a:	a904      	add	r1, sp, #16
 800955c:	4638      	mov	r0, r7
 800955e:	f7fb ff4d 	bl	80053fc <_printf_float>
 8009562:	1c42      	adds	r2, r0, #1
 8009564:	4606      	mov	r6, r0
 8009566:	d1d6      	bne.n	8009516 <_svfiprintf_r+0x176>
 8009568:	89ab      	ldrh	r3, [r5, #12]
 800956a:	065b      	lsls	r3, r3, #25
 800956c:	f53f af2c 	bmi.w	80093c8 <_svfiprintf_r+0x28>
 8009570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009572:	b01d      	add	sp, #116	; 0x74
 8009574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009578:	ab03      	add	r3, sp, #12
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	462a      	mov	r2, r5
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <_svfiprintf_r+0x1f8>)
 8009580:	a904      	add	r1, sp, #16
 8009582:	4638      	mov	r0, r7
 8009584:	f7fc f9de 	bl	8005944 <_printf_i>
 8009588:	e7eb      	b.n	8009562 <_svfiprintf_r+0x1c2>
 800958a:	bf00      	nop
 800958c:	0800a61c 	.word	0x0800a61c
 8009590:	0800a626 	.word	0x0800a626
 8009594:	080053fd 	.word	0x080053fd
 8009598:	080092e9 	.word	0x080092e9
 800959c:	0800a622 	.word	0x0800a622

080095a0 <__sfputc_r>:
 80095a0:	6893      	ldr	r3, [r2, #8]
 80095a2:	3b01      	subs	r3, #1
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	b410      	push	{r4}
 80095a8:	6093      	str	r3, [r2, #8]
 80095aa:	da08      	bge.n	80095be <__sfputc_r+0x1e>
 80095ac:	6994      	ldr	r4, [r2, #24]
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	db01      	blt.n	80095b6 <__sfputc_r+0x16>
 80095b2:	290a      	cmp	r1, #10
 80095b4:	d103      	bne.n	80095be <__sfputc_r+0x1e>
 80095b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ba:	f000 b9bd 	b.w	8009938 <__swbuf_r>
 80095be:	6813      	ldr	r3, [r2, #0]
 80095c0:	1c58      	adds	r0, r3, #1
 80095c2:	6010      	str	r0, [r2, #0]
 80095c4:	7019      	strb	r1, [r3, #0]
 80095c6:	4608      	mov	r0, r1
 80095c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <__sfputs_r>:
 80095ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d0:	4606      	mov	r6, r0
 80095d2:	460f      	mov	r7, r1
 80095d4:	4614      	mov	r4, r2
 80095d6:	18d5      	adds	r5, r2, r3
 80095d8:	42ac      	cmp	r4, r5
 80095da:	d101      	bne.n	80095e0 <__sfputs_r+0x12>
 80095dc:	2000      	movs	r0, #0
 80095de:	e007      	b.n	80095f0 <__sfputs_r+0x22>
 80095e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e4:	463a      	mov	r2, r7
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7ff ffda 	bl	80095a0 <__sfputc_r>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d1f3      	bne.n	80095d8 <__sfputs_r+0xa>
 80095f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095f4 <_vfiprintf_r>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	460d      	mov	r5, r1
 80095fa:	b09d      	sub	sp, #116	; 0x74
 80095fc:	4614      	mov	r4, r2
 80095fe:	4698      	mov	r8, r3
 8009600:	4606      	mov	r6, r0
 8009602:	b118      	cbz	r0, 800960c <_vfiprintf_r+0x18>
 8009604:	6983      	ldr	r3, [r0, #24]
 8009606:	b90b      	cbnz	r3, 800960c <_vfiprintf_r+0x18>
 8009608:	f7fe fc16 	bl	8007e38 <__sinit>
 800960c:	4b89      	ldr	r3, [pc, #548]	; (8009834 <_vfiprintf_r+0x240>)
 800960e:	429d      	cmp	r5, r3
 8009610:	d11b      	bne.n	800964a <_vfiprintf_r+0x56>
 8009612:	6875      	ldr	r5, [r6, #4]
 8009614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009616:	07d9      	lsls	r1, r3, #31
 8009618:	d405      	bmi.n	8009626 <_vfiprintf_r+0x32>
 800961a:	89ab      	ldrh	r3, [r5, #12]
 800961c:	059a      	lsls	r2, r3, #22
 800961e:	d402      	bmi.n	8009626 <_vfiprintf_r+0x32>
 8009620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009622:	f7ff f81a 	bl	800865a <__retarget_lock_acquire_recursive>
 8009626:	89ab      	ldrh	r3, [r5, #12]
 8009628:	071b      	lsls	r3, r3, #28
 800962a:	d501      	bpl.n	8009630 <_vfiprintf_r+0x3c>
 800962c:	692b      	ldr	r3, [r5, #16]
 800962e:	b9eb      	cbnz	r3, 800966c <_vfiprintf_r+0x78>
 8009630:	4629      	mov	r1, r5
 8009632:	4630      	mov	r0, r6
 8009634:	f000 f9f2 	bl	8009a1c <__swsetup_r>
 8009638:	b1c0      	cbz	r0, 800966c <_vfiprintf_r+0x78>
 800963a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800963c:	07dc      	lsls	r4, r3, #31
 800963e:	d50e      	bpl.n	800965e <_vfiprintf_r+0x6a>
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	b01d      	add	sp, #116	; 0x74
 8009646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964a:	4b7b      	ldr	r3, [pc, #492]	; (8009838 <_vfiprintf_r+0x244>)
 800964c:	429d      	cmp	r5, r3
 800964e:	d101      	bne.n	8009654 <_vfiprintf_r+0x60>
 8009650:	68b5      	ldr	r5, [r6, #8]
 8009652:	e7df      	b.n	8009614 <_vfiprintf_r+0x20>
 8009654:	4b79      	ldr	r3, [pc, #484]	; (800983c <_vfiprintf_r+0x248>)
 8009656:	429d      	cmp	r5, r3
 8009658:	bf08      	it	eq
 800965a:	68f5      	ldreq	r5, [r6, #12]
 800965c:	e7da      	b.n	8009614 <_vfiprintf_r+0x20>
 800965e:	89ab      	ldrh	r3, [r5, #12]
 8009660:	0598      	lsls	r0, r3, #22
 8009662:	d4ed      	bmi.n	8009640 <_vfiprintf_r+0x4c>
 8009664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009666:	f7fe fff9 	bl	800865c <__retarget_lock_release_recursive>
 800966a:	e7e9      	b.n	8009640 <_vfiprintf_r+0x4c>
 800966c:	2300      	movs	r3, #0
 800966e:	9309      	str	r3, [sp, #36]	; 0x24
 8009670:	2320      	movs	r3, #32
 8009672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009676:	f8cd 800c 	str.w	r8, [sp, #12]
 800967a:	2330      	movs	r3, #48	; 0x30
 800967c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009840 <_vfiprintf_r+0x24c>
 8009680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009684:	f04f 0901 	mov.w	r9, #1
 8009688:	4623      	mov	r3, r4
 800968a:	469a      	mov	sl, r3
 800968c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009690:	b10a      	cbz	r2, 8009696 <_vfiprintf_r+0xa2>
 8009692:	2a25      	cmp	r2, #37	; 0x25
 8009694:	d1f9      	bne.n	800968a <_vfiprintf_r+0x96>
 8009696:	ebba 0b04 	subs.w	fp, sl, r4
 800969a:	d00b      	beq.n	80096b4 <_vfiprintf_r+0xc0>
 800969c:	465b      	mov	r3, fp
 800969e:	4622      	mov	r2, r4
 80096a0:	4629      	mov	r1, r5
 80096a2:	4630      	mov	r0, r6
 80096a4:	f7ff ff93 	bl	80095ce <__sfputs_r>
 80096a8:	3001      	adds	r0, #1
 80096aa:	f000 80aa 	beq.w	8009802 <_vfiprintf_r+0x20e>
 80096ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096b0:	445a      	add	r2, fp
 80096b2:	9209      	str	r2, [sp, #36]	; 0x24
 80096b4:	f89a 3000 	ldrb.w	r3, [sl]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 80a2 	beq.w	8009802 <_vfiprintf_r+0x20e>
 80096be:	2300      	movs	r3, #0
 80096c0:	f04f 32ff 	mov.w	r2, #4294967295
 80096c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096c8:	f10a 0a01 	add.w	sl, sl, #1
 80096cc:	9304      	str	r3, [sp, #16]
 80096ce:	9307      	str	r3, [sp, #28]
 80096d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096d4:	931a      	str	r3, [sp, #104]	; 0x68
 80096d6:	4654      	mov	r4, sl
 80096d8:	2205      	movs	r2, #5
 80096da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096de:	4858      	ldr	r0, [pc, #352]	; (8009840 <_vfiprintf_r+0x24c>)
 80096e0:	f7f6 fd9e 	bl	8000220 <memchr>
 80096e4:	9a04      	ldr	r2, [sp, #16]
 80096e6:	b9d8      	cbnz	r0, 8009720 <_vfiprintf_r+0x12c>
 80096e8:	06d1      	lsls	r1, r2, #27
 80096ea:	bf44      	itt	mi
 80096ec:	2320      	movmi	r3, #32
 80096ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096f2:	0713      	lsls	r3, r2, #28
 80096f4:	bf44      	itt	mi
 80096f6:	232b      	movmi	r3, #43	; 0x2b
 80096f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009700:	2b2a      	cmp	r3, #42	; 0x2a
 8009702:	d015      	beq.n	8009730 <_vfiprintf_r+0x13c>
 8009704:	9a07      	ldr	r2, [sp, #28]
 8009706:	4654      	mov	r4, sl
 8009708:	2000      	movs	r0, #0
 800970a:	f04f 0c0a 	mov.w	ip, #10
 800970e:	4621      	mov	r1, r4
 8009710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009714:	3b30      	subs	r3, #48	; 0x30
 8009716:	2b09      	cmp	r3, #9
 8009718:	d94e      	bls.n	80097b8 <_vfiprintf_r+0x1c4>
 800971a:	b1b0      	cbz	r0, 800974a <_vfiprintf_r+0x156>
 800971c:	9207      	str	r2, [sp, #28]
 800971e:	e014      	b.n	800974a <_vfiprintf_r+0x156>
 8009720:	eba0 0308 	sub.w	r3, r0, r8
 8009724:	fa09 f303 	lsl.w	r3, r9, r3
 8009728:	4313      	orrs	r3, r2
 800972a:	9304      	str	r3, [sp, #16]
 800972c:	46a2      	mov	sl, r4
 800972e:	e7d2      	b.n	80096d6 <_vfiprintf_r+0xe2>
 8009730:	9b03      	ldr	r3, [sp, #12]
 8009732:	1d19      	adds	r1, r3, #4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	9103      	str	r1, [sp, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	bfbb      	ittet	lt
 800973c:	425b      	neglt	r3, r3
 800973e:	f042 0202 	orrlt.w	r2, r2, #2
 8009742:	9307      	strge	r3, [sp, #28]
 8009744:	9307      	strlt	r3, [sp, #28]
 8009746:	bfb8      	it	lt
 8009748:	9204      	strlt	r2, [sp, #16]
 800974a:	7823      	ldrb	r3, [r4, #0]
 800974c:	2b2e      	cmp	r3, #46	; 0x2e
 800974e:	d10c      	bne.n	800976a <_vfiprintf_r+0x176>
 8009750:	7863      	ldrb	r3, [r4, #1]
 8009752:	2b2a      	cmp	r3, #42	; 0x2a
 8009754:	d135      	bne.n	80097c2 <_vfiprintf_r+0x1ce>
 8009756:	9b03      	ldr	r3, [sp, #12]
 8009758:	1d1a      	adds	r2, r3, #4
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	9203      	str	r2, [sp, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	bfb8      	it	lt
 8009762:	f04f 33ff 	movlt.w	r3, #4294967295
 8009766:	3402      	adds	r4, #2
 8009768:	9305      	str	r3, [sp, #20]
 800976a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009850 <_vfiprintf_r+0x25c>
 800976e:	7821      	ldrb	r1, [r4, #0]
 8009770:	2203      	movs	r2, #3
 8009772:	4650      	mov	r0, sl
 8009774:	f7f6 fd54 	bl	8000220 <memchr>
 8009778:	b140      	cbz	r0, 800978c <_vfiprintf_r+0x198>
 800977a:	2340      	movs	r3, #64	; 0x40
 800977c:	eba0 000a 	sub.w	r0, r0, sl
 8009780:	fa03 f000 	lsl.w	r0, r3, r0
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	4303      	orrs	r3, r0
 8009788:	3401      	adds	r4, #1
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009790:	482c      	ldr	r0, [pc, #176]	; (8009844 <_vfiprintf_r+0x250>)
 8009792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009796:	2206      	movs	r2, #6
 8009798:	f7f6 fd42 	bl	8000220 <memchr>
 800979c:	2800      	cmp	r0, #0
 800979e:	d03f      	beq.n	8009820 <_vfiprintf_r+0x22c>
 80097a0:	4b29      	ldr	r3, [pc, #164]	; (8009848 <_vfiprintf_r+0x254>)
 80097a2:	bb1b      	cbnz	r3, 80097ec <_vfiprintf_r+0x1f8>
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	3307      	adds	r3, #7
 80097a8:	f023 0307 	bic.w	r3, r3, #7
 80097ac:	3308      	adds	r3, #8
 80097ae:	9303      	str	r3, [sp, #12]
 80097b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b2:	443b      	add	r3, r7
 80097b4:	9309      	str	r3, [sp, #36]	; 0x24
 80097b6:	e767      	b.n	8009688 <_vfiprintf_r+0x94>
 80097b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80097bc:	460c      	mov	r4, r1
 80097be:	2001      	movs	r0, #1
 80097c0:	e7a5      	b.n	800970e <_vfiprintf_r+0x11a>
 80097c2:	2300      	movs	r3, #0
 80097c4:	3401      	adds	r4, #1
 80097c6:	9305      	str	r3, [sp, #20]
 80097c8:	4619      	mov	r1, r3
 80097ca:	f04f 0c0a 	mov.w	ip, #10
 80097ce:	4620      	mov	r0, r4
 80097d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097d4:	3a30      	subs	r2, #48	; 0x30
 80097d6:	2a09      	cmp	r2, #9
 80097d8:	d903      	bls.n	80097e2 <_vfiprintf_r+0x1ee>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0c5      	beq.n	800976a <_vfiprintf_r+0x176>
 80097de:	9105      	str	r1, [sp, #20]
 80097e0:	e7c3      	b.n	800976a <_vfiprintf_r+0x176>
 80097e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80097e6:	4604      	mov	r4, r0
 80097e8:	2301      	movs	r3, #1
 80097ea:	e7f0      	b.n	80097ce <_vfiprintf_r+0x1da>
 80097ec:	ab03      	add	r3, sp, #12
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	462a      	mov	r2, r5
 80097f2:	4b16      	ldr	r3, [pc, #88]	; (800984c <_vfiprintf_r+0x258>)
 80097f4:	a904      	add	r1, sp, #16
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7fb fe00 	bl	80053fc <_printf_float>
 80097fc:	4607      	mov	r7, r0
 80097fe:	1c78      	adds	r0, r7, #1
 8009800:	d1d6      	bne.n	80097b0 <_vfiprintf_r+0x1bc>
 8009802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009804:	07d9      	lsls	r1, r3, #31
 8009806:	d405      	bmi.n	8009814 <_vfiprintf_r+0x220>
 8009808:	89ab      	ldrh	r3, [r5, #12]
 800980a:	059a      	lsls	r2, r3, #22
 800980c:	d402      	bmi.n	8009814 <_vfiprintf_r+0x220>
 800980e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009810:	f7fe ff24 	bl	800865c <__retarget_lock_release_recursive>
 8009814:	89ab      	ldrh	r3, [r5, #12]
 8009816:	065b      	lsls	r3, r3, #25
 8009818:	f53f af12 	bmi.w	8009640 <_vfiprintf_r+0x4c>
 800981c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800981e:	e711      	b.n	8009644 <_vfiprintf_r+0x50>
 8009820:	ab03      	add	r3, sp, #12
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	462a      	mov	r2, r5
 8009826:	4b09      	ldr	r3, [pc, #36]	; (800984c <_vfiprintf_r+0x258>)
 8009828:	a904      	add	r1, sp, #16
 800982a:	4630      	mov	r0, r6
 800982c:	f7fc f88a 	bl	8005944 <_printf_i>
 8009830:	e7e4      	b.n	80097fc <_vfiprintf_r+0x208>
 8009832:	bf00      	nop
 8009834:	0800a404 	.word	0x0800a404
 8009838:	0800a424 	.word	0x0800a424
 800983c:	0800a3e4 	.word	0x0800a3e4
 8009840:	0800a61c 	.word	0x0800a61c
 8009844:	0800a626 	.word	0x0800a626
 8009848:	080053fd 	.word	0x080053fd
 800984c:	080095cf 	.word	0x080095cf
 8009850:	0800a622 	.word	0x0800a622
 8009854:	00000000 	.word	0x00000000

08009858 <nan>:
 8009858:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009860 <nan+0x8>
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	00000000 	.word	0x00000000
 8009864:	7ff80000 	.word	0x7ff80000

08009868 <_sbrk_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d06      	ldr	r5, [pc, #24]	; (8009884 <_sbrk_r+0x1c>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7f8 fb40 	bl	8001ef8 <_sbrk>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_sbrk_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_sbrk_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20000384 	.word	0x20000384

08009888 <__sread>:
 8009888:	b510      	push	{r4, lr}
 800988a:	460c      	mov	r4, r1
 800988c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009890:	f000 f9fc 	bl	8009c8c <_read_r>
 8009894:	2800      	cmp	r0, #0
 8009896:	bfab      	itete	ge
 8009898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800989a:	89a3      	ldrhlt	r3, [r4, #12]
 800989c:	181b      	addge	r3, r3, r0
 800989e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098a2:	bfac      	ite	ge
 80098a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098a6:	81a3      	strhlt	r3, [r4, #12]
 80098a8:	bd10      	pop	{r4, pc}

080098aa <__swrite>:
 80098aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ae:	461f      	mov	r7, r3
 80098b0:	898b      	ldrh	r3, [r1, #12]
 80098b2:	05db      	lsls	r3, r3, #23
 80098b4:	4605      	mov	r5, r0
 80098b6:	460c      	mov	r4, r1
 80098b8:	4616      	mov	r6, r2
 80098ba:	d505      	bpl.n	80098c8 <__swrite+0x1e>
 80098bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c0:	2302      	movs	r3, #2
 80098c2:	2200      	movs	r2, #0
 80098c4:	f000 f97a 	bl	8009bbc <_lseek_r>
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	4632      	mov	r2, r6
 80098d6:	463b      	mov	r3, r7
 80098d8:	4628      	mov	r0, r5
 80098da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098de:	f000 b88b 	b.w	80099f8 <_write_r>

080098e2 <__sseek>:
 80098e2:	b510      	push	{r4, lr}
 80098e4:	460c      	mov	r4, r1
 80098e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ea:	f000 f967 	bl	8009bbc <_lseek_r>
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	bf15      	itete	ne
 80098f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80098f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098fe:	81a3      	strheq	r3, [r4, #12]
 8009900:	bf18      	it	ne
 8009902:	81a3      	strhne	r3, [r4, #12]
 8009904:	bd10      	pop	{r4, pc}

08009906 <__sclose>:
 8009906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990a:	f000 b913 	b.w	8009b34 <_close_r>

0800990e <strncmp>:
 800990e:	b510      	push	{r4, lr}
 8009910:	b17a      	cbz	r2, 8009932 <strncmp+0x24>
 8009912:	4603      	mov	r3, r0
 8009914:	3901      	subs	r1, #1
 8009916:	1884      	adds	r4, r0, r2
 8009918:	f813 0b01 	ldrb.w	r0, [r3], #1
 800991c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009920:	4290      	cmp	r0, r2
 8009922:	d101      	bne.n	8009928 <strncmp+0x1a>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d101      	bne.n	800992c <strncmp+0x1e>
 8009928:	1a80      	subs	r0, r0, r2
 800992a:	bd10      	pop	{r4, pc}
 800992c:	2800      	cmp	r0, #0
 800992e:	d1f3      	bne.n	8009918 <strncmp+0xa>
 8009930:	e7fa      	b.n	8009928 <strncmp+0x1a>
 8009932:	4610      	mov	r0, r2
 8009934:	e7f9      	b.n	800992a <strncmp+0x1c>
	...

08009938 <__swbuf_r>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	460e      	mov	r6, r1
 800993c:	4614      	mov	r4, r2
 800993e:	4605      	mov	r5, r0
 8009940:	b118      	cbz	r0, 800994a <__swbuf_r+0x12>
 8009942:	6983      	ldr	r3, [r0, #24]
 8009944:	b90b      	cbnz	r3, 800994a <__swbuf_r+0x12>
 8009946:	f7fe fa77 	bl	8007e38 <__sinit>
 800994a:	4b21      	ldr	r3, [pc, #132]	; (80099d0 <__swbuf_r+0x98>)
 800994c:	429c      	cmp	r4, r3
 800994e:	d12b      	bne.n	80099a8 <__swbuf_r+0x70>
 8009950:	686c      	ldr	r4, [r5, #4]
 8009952:	69a3      	ldr	r3, [r4, #24]
 8009954:	60a3      	str	r3, [r4, #8]
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	071a      	lsls	r2, r3, #28
 800995a:	d52f      	bpl.n	80099bc <__swbuf_r+0x84>
 800995c:	6923      	ldr	r3, [r4, #16]
 800995e:	b36b      	cbz	r3, 80099bc <__swbuf_r+0x84>
 8009960:	6923      	ldr	r3, [r4, #16]
 8009962:	6820      	ldr	r0, [r4, #0]
 8009964:	1ac0      	subs	r0, r0, r3
 8009966:	6963      	ldr	r3, [r4, #20]
 8009968:	b2f6      	uxtb	r6, r6
 800996a:	4283      	cmp	r3, r0
 800996c:	4637      	mov	r7, r6
 800996e:	dc04      	bgt.n	800997a <__swbuf_r+0x42>
 8009970:	4621      	mov	r1, r4
 8009972:	4628      	mov	r0, r5
 8009974:	f7fe f9cc 	bl	8007d10 <_fflush_r>
 8009978:	bb30      	cbnz	r0, 80099c8 <__swbuf_r+0x90>
 800997a:	68a3      	ldr	r3, [r4, #8]
 800997c:	3b01      	subs	r3, #1
 800997e:	60a3      	str	r3, [r4, #8]
 8009980:	6823      	ldr	r3, [r4, #0]
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	6022      	str	r2, [r4, #0]
 8009986:	701e      	strb	r6, [r3, #0]
 8009988:	6963      	ldr	r3, [r4, #20]
 800998a:	3001      	adds	r0, #1
 800998c:	4283      	cmp	r3, r0
 800998e:	d004      	beq.n	800999a <__swbuf_r+0x62>
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	07db      	lsls	r3, r3, #31
 8009994:	d506      	bpl.n	80099a4 <__swbuf_r+0x6c>
 8009996:	2e0a      	cmp	r6, #10
 8009998:	d104      	bne.n	80099a4 <__swbuf_r+0x6c>
 800999a:	4621      	mov	r1, r4
 800999c:	4628      	mov	r0, r5
 800999e:	f7fe f9b7 	bl	8007d10 <_fflush_r>
 80099a2:	b988      	cbnz	r0, 80099c8 <__swbuf_r+0x90>
 80099a4:	4638      	mov	r0, r7
 80099a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a8:	4b0a      	ldr	r3, [pc, #40]	; (80099d4 <__swbuf_r+0x9c>)
 80099aa:	429c      	cmp	r4, r3
 80099ac:	d101      	bne.n	80099b2 <__swbuf_r+0x7a>
 80099ae:	68ac      	ldr	r4, [r5, #8]
 80099b0:	e7cf      	b.n	8009952 <__swbuf_r+0x1a>
 80099b2:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <__swbuf_r+0xa0>)
 80099b4:	429c      	cmp	r4, r3
 80099b6:	bf08      	it	eq
 80099b8:	68ec      	ldreq	r4, [r5, #12]
 80099ba:	e7ca      	b.n	8009952 <__swbuf_r+0x1a>
 80099bc:	4621      	mov	r1, r4
 80099be:	4628      	mov	r0, r5
 80099c0:	f000 f82c 	bl	8009a1c <__swsetup_r>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d0cb      	beq.n	8009960 <__swbuf_r+0x28>
 80099c8:	f04f 37ff 	mov.w	r7, #4294967295
 80099cc:	e7ea      	b.n	80099a4 <__swbuf_r+0x6c>
 80099ce:	bf00      	nop
 80099d0:	0800a404 	.word	0x0800a404
 80099d4:	0800a424 	.word	0x0800a424
 80099d8:	0800a3e4 	.word	0x0800a3e4

080099dc <__ascii_wctomb>:
 80099dc:	b149      	cbz	r1, 80099f2 <__ascii_wctomb+0x16>
 80099de:	2aff      	cmp	r2, #255	; 0xff
 80099e0:	bf85      	ittet	hi
 80099e2:	238a      	movhi	r3, #138	; 0x8a
 80099e4:	6003      	strhi	r3, [r0, #0]
 80099e6:	700a      	strbls	r2, [r1, #0]
 80099e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80099ec:	bf98      	it	ls
 80099ee:	2001      	movls	r0, #1
 80099f0:	4770      	bx	lr
 80099f2:	4608      	mov	r0, r1
 80099f4:	4770      	bx	lr
	...

080099f8 <_write_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	; (8009a18 <_write_r+0x20>)
 80099fc:	4604      	mov	r4, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f8 fa25 	bl	8001e56 <_write>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_write_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_write_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	20000384 	.word	0x20000384

08009a1c <__swsetup_r>:
 8009a1c:	4b32      	ldr	r3, [pc, #200]	; (8009ae8 <__swsetup_r+0xcc>)
 8009a1e:	b570      	push	{r4, r5, r6, lr}
 8009a20:	681d      	ldr	r5, [r3, #0]
 8009a22:	4606      	mov	r6, r0
 8009a24:	460c      	mov	r4, r1
 8009a26:	b125      	cbz	r5, 8009a32 <__swsetup_r+0x16>
 8009a28:	69ab      	ldr	r3, [r5, #24]
 8009a2a:	b913      	cbnz	r3, 8009a32 <__swsetup_r+0x16>
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	f7fe fa03 	bl	8007e38 <__sinit>
 8009a32:	4b2e      	ldr	r3, [pc, #184]	; (8009aec <__swsetup_r+0xd0>)
 8009a34:	429c      	cmp	r4, r3
 8009a36:	d10f      	bne.n	8009a58 <__swsetup_r+0x3c>
 8009a38:	686c      	ldr	r4, [r5, #4]
 8009a3a:	89a3      	ldrh	r3, [r4, #12]
 8009a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a40:	0719      	lsls	r1, r3, #28
 8009a42:	d42c      	bmi.n	8009a9e <__swsetup_r+0x82>
 8009a44:	06dd      	lsls	r5, r3, #27
 8009a46:	d411      	bmi.n	8009a6c <__swsetup_r+0x50>
 8009a48:	2309      	movs	r3, #9
 8009a4a:	6033      	str	r3, [r6, #0]
 8009a4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a50:	81a3      	strh	r3, [r4, #12]
 8009a52:	f04f 30ff 	mov.w	r0, #4294967295
 8009a56:	e03e      	b.n	8009ad6 <__swsetup_r+0xba>
 8009a58:	4b25      	ldr	r3, [pc, #148]	; (8009af0 <__swsetup_r+0xd4>)
 8009a5a:	429c      	cmp	r4, r3
 8009a5c:	d101      	bne.n	8009a62 <__swsetup_r+0x46>
 8009a5e:	68ac      	ldr	r4, [r5, #8]
 8009a60:	e7eb      	b.n	8009a3a <__swsetup_r+0x1e>
 8009a62:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <__swsetup_r+0xd8>)
 8009a64:	429c      	cmp	r4, r3
 8009a66:	bf08      	it	eq
 8009a68:	68ec      	ldreq	r4, [r5, #12]
 8009a6a:	e7e6      	b.n	8009a3a <__swsetup_r+0x1e>
 8009a6c:	0758      	lsls	r0, r3, #29
 8009a6e:	d512      	bpl.n	8009a96 <__swsetup_r+0x7a>
 8009a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a72:	b141      	cbz	r1, 8009a86 <__swsetup_r+0x6a>
 8009a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a78:	4299      	cmp	r1, r3
 8009a7a:	d002      	beq.n	8009a82 <__swsetup_r+0x66>
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f7ff fb53 	bl	8009128 <_free_r>
 8009a82:	2300      	movs	r3, #0
 8009a84:	6363      	str	r3, [r4, #52]	; 0x34
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	6063      	str	r3, [r4, #4]
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	89a3      	ldrh	r3, [r4, #12]
 8009a98:	f043 0308 	orr.w	r3, r3, #8
 8009a9c:	81a3      	strh	r3, [r4, #12]
 8009a9e:	6923      	ldr	r3, [r4, #16]
 8009aa0:	b94b      	cbnz	r3, 8009ab6 <__swsetup_r+0x9a>
 8009aa2:	89a3      	ldrh	r3, [r4, #12]
 8009aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aac:	d003      	beq.n	8009ab6 <__swsetup_r+0x9a>
 8009aae:	4621      	mov	r1, r4
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f7fe fdf9 	bl	80086a8 <__smakebuf_r>
 8009ab6:	89a0      	ldrh	r0, [r4, #12]
 8009ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009abc:	f010 0301 	ands.w	r3, r0, #1
 8009ac0:	d00a      	beq.n	8009ad8 <__swsetup_r+0xbc>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	60a3      	str	r3, [r4, #8]
 8009ac6:	6963      	ldr	r3, [r4, #20]
 8009ac8:	425b      	negs	r3, r3
 8009aca:	61a3      	str	r3, [r4, #24]
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	b943      	cbnz	r3, 8009ae2 <__swsetup_r+0xc6>
 8009ad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ad4:	d1ba      	bne.n	8009a4c <__swsetup_r+0x30>
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}
 8009ad8:	0781      	lsls	r1, r0, #30
 8009ada:	bf58      	it	pl
 8009adc:	6963      	ldrpl	r3, [r4, #20]
 8009ade:	60a3      	str	r3, [r4, #8]
 8009ae0:	e7f4      	b.n	8009acc <__swsetup_r+0xb0>
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	e7f7      	b.n	8009ad6 <__swsetup_r+0xba>
 8009ae6:	bf00      	nop
 8009ae8:	2000000c 	.word	0x2000000c
 8009aec:	0800a404 	.word	0x0800a404
 8009af0:	0800a424 	.word	0x0800a424
 8009af4:	0800a3e4 	.word	0x0800a3e4

08009af8 <__assert_func>:
 8009af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009afa:	4614      	mov	r4, r2
 8009afc:	461a      	mov	r2, r3
 8009afe:	4b09      	ldr	r3, [pc, #36]	; (8009b24 <__assert_func+0x2c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4605      	mov	r5, r0
 8009b04:	68d8      	ldr	r0, [r3, #12]
 8009b06:	b14c      	cbz	r4, 8009b1c <__assert_func+0x24>
 8009b08:	4b07      	ldr	r3, [pc, #28]	; (8009b28 <__assert_func+0x30>)
 8009b0a:	9100      	str	r1, [sp, #0]
 8009b0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b10:	4906      	ldr	r1, [pc, #24]	; (8009b2c <__assert_func+0x34>)
 8009b12:	462b      	mov	r3, r5
 8009b14:	f000 f81e 	bl	8009b54 <fiprintf>
 8009b18:	f000 f8ca 	bl	8009cb0 <abort>
 8009b1c:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <__assert_func+0x38>)
 8009b1e:	461c      	mov	r4, r3
 8009b20:	e7f3      	b.n	8009b0a <__assert_func+0x12>
 8009b22:	bf00      	nop
 8009b24:	2000000c 	.word	0x2000000c
 8009b28:	0800a62d 	.word	0x0800a62d
 8009b2c:	0800a63a 	.word	0x0800a63a
 8009b30:	0800a668 	.word	0x0800a668

08009b34 <_close_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d06      	ldr	r5, [pc, #24]	; (8009b50 <_close_r+0x1c>)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	602b      	str	r3, [r5, #0]
 8009b40:	f7f8 f9a5 	bl	8001e8e <_close>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_close_r+0x1a>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_close_r+0x1a>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	20000384 	.word	0x20000384

08009b54 <fiprintf>:
 8009b54:	b40e      	push	{r1, r2, r3}
 8009b56:	b503      	push	{r0, r1, lr}
 8009b58:	4601      	mov	r1, r0
 8009b5a:	ab03      	add	r3, sp, #12
 8009b5c:	4805      	ldr	r0, [pc, #20]	; (8009b74 <fiprintf+0x20>)
 8009b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b62:	6800      	ldr	r0, [r0, #0]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	f7ff fd45 	bl	80095f4 <_vfiprintf_r>
 8009b6a:	b002      	add	sp, #8
 8009b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b70:	b003      	add	sp, #12
 8009b72:	4770      	bx	lr
 8009b74:	2000000c 	.word	0x2000000c

08009b78 <_fstat_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4d07      	ldr	r5, [pc, #28]	; (8009b98 <_fstat_r+0x20>)
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4604      	mov	r4, r0
 8009b80:	4608      	mov	r0, r1
 8009b82:	4611      	mov	r1, r2
 8009b84:	602b      	str	r3, [r5, #0]
 8009b86:	f7f8 f98e 	bl	8001ea6 <_fstat>
 8009b8a:	1c43      	adds	r3, r0, #1
 8009b8c:	d102      	bne.n	8009b94 <_fstat_r+0x1c>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	b103      	cbz	r3, 8009b94 <_fstat_r+0x1c>
 8009b92:	6023      	str	r3, [r4, #0]
 8009b94:	bd38      	pop	{r3, r4, r5, pc}
 8009b96:	bf00      	nop
 8009b98:	20000384 	.word	0x20000384

08009b9c <_isatty_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4d06      	ldr	r5, [pc, #24]	; (8009bb8 <_isatty_r+0x1c>)
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	4608      	mov	r0, r1
 8009ba6:	602b      	str	r3, [r5, #0]
 8009ba8:	f7f8 f98d 	bl	8001ec6 <_isatty>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_isatty_r+0x1a>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_isatty_r+0x1a>
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	20000384 	.word	0x20000384

08009bbc <_lseek_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4d07      	ldr	r5, [pc, #28]	; (8009bdc <_lseek_r+0x20>)
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	4608      	mov	r0, r1
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	602a      	str	r2, [r5, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f7f8 f986 	bl	8001edc <_lseek>
 8009bd0:	1c43      	adds	r3, r0, #1
 8009bd2:	d102      	bne.n	8009bda <_lseek_r+0x1e>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	b103      	cbz	r3, 8009bda <_lseek_r+0x1e>
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	20000384 	.word	0x20000384

08009be0 <memmove>:
 8009be0:	4288      	cmp	r0, r1
 8009be2:	b510      	push	{r4, lr}
 8009be4:	eb01 0402 	add.w	r4, r1, r2
 8009be8:	d902      	bls.n	8009bf0 <memmove+0x10>
 8009bea:	4284      	cmp	r4, r0
 8009bec:	4623      	mov	r3, r4
 8009bee:	d807      	bhi.n	8009c00 <memmove+0x20>
 8009bf0:	1e43      	subs	r3, r0, #1
 8009bf2:	42a1      	cmp	r1, r4
 8009bf4:	d008      	beq.n	8009c08 <memmove+0x28>
 8009bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bfe:	e7f8      	b.n	8009bf2 <memmove+0x12>
 8009c00:	4402      	add	r2, r0
 8009c02:	4601      	mov	r1, r0
 8009c04:	428a      	cmp	r2, r1
 8009c06:	d100      	bne.n	8009c0a <memmove+0x2a>
 8009c08:	bd10      	pop	{r4, pc}
 8009c0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c12:	e7f7      	b.n	8009c04 <memmove+0x24>

08009c14 <__malloc_lock>:
 8009c14:	4801      	ldr	r0, [pc, #4]	; (8009c1c <__malloc_lock+0x8>)
 8009c16:	f7fe bd20 	b.w	800865a <__retarget_lock_acquire_recursive>
 8009c1a:	bf00      	nop
 8009c1c:	20000378 	.word	0x20000378

08009c20 <__malloc_unlock>:
 8009c20:	4801      	ldr	r0, [pc, #4]	; (8009c28 <__malloc_unlock+0x8>)
 8009c22:	f7fe bd1b 	b.w	800865c <__retarget_lock_release_recursive>
 8009c26:	bf00      	nop
 8009c28:	20000378 	.word	0x20000378

08009c2c <_realloc_r>:
 8009c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c30:	4680      	mov	r8, r0
 8009c32:	4614      	mov	r4, r2
 8009c34:	460e      	mov	r6, r1
 8009c36:	b921      	cbnz	r1, 8009c42 <_realloc_r+0x16>
 8009c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	f7ff badf 	b.w	8009200 <_malloc_r>
 8009c42:	b92a      	cbnz	r2, 8009c50 <_realloc_r+0x24>
 8009c44:	f7ff fa70 	bl	8009128 <_free_r>
 8009c48:	4625      	mov	r5, r4
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c50:	f000 f835 	bl	8009cbe <_malloc_usable_size_r>
 8009c54:	4284      	cmp	r4, r0
 8009c56:	4607      	mov	r7, r0
 8009c58:	d802      	bhi.n	8009c60 <_realloc_r+0x34>
 8009c5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c5e:	d812      	bhi.n	8009c86 <_realloc_r+0x5a>
 8009c60:	4621      	mov	r1, r4
 8009c62:	4640      	mov	r0, r8
 8009c64:	f7ff facc 	bl	8009200 <_malloc_r>
 8009c68:	4605      	mov	r5, r0
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d0ed      	beq.n	8009c4a <_realloc_r+0x1e>
 8009c6e:	42bc      	cmp	r4, r7
 8009c70:	4622      	mov	r2, r4
 8009c72:	4631      	mov	r1, r6
 8009c74:	bf28      	it	cs
 8009c76:	463a      	movcs	r2, r7
 8009c78:	f7fe fd70 	bl	800875c <memcpy>
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4640      	mov	r0, r8
 8009c80:	f7ff fa52 	bl	8009128 <_free_r>
 8009c84:	e7e1      	b.n	8009c4a <_realloc_r+0x1e>
 8009c86:	4635      	mov	r5, r6
 8009c88:	e7df      	b.n	8009c4a <_realloc_r+0x1e>
	...

08009c8c <_read_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d07      	ldr	r5, [pc, #28]	; (8009cac <_read_r+0x20>)
 8009c90:	4604      	mov	r4, r0
 8009c92:	4608      	mov	r0, r1
 8009c94:	4611      	mov	r1, r2
 8009c96:	2200      	movs	r2, #0
 8009c98:	602a      	str	r2, [r5, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f7f8 f8be 	bl	8001e1c <_read>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_read_r+0x1e>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_read_r+0x1e>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	20000384 	.word	0x20000384

08009cb0 <abort>:
 8009cb0:	b508      	push	{r3, lr}
 8009cb2:	2006      	movs	r0, #6
 8009cb4:	f000 f834 	bl	8009d20 <raise>
 8009cb8:	2001      	movs	r0, #1
 8009cba:	f7f8 f8a5 	bl	8001e08 <_exit>

08009cbe <_malloc_usable_size_r>:
 8009cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc2:	1f18      	subs	r0, r3, #4
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfbc      	itt	lt
 8009cc8:	580b      	ldrlt	r3, [r1, r0]
 8009cca:	18c0      	addlt	r0, r0, r3
 8009ccc:	4770      	bx	lr

08009cce <_raise_r>:
 8009cce:	291f      	cmp	r1, #31
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	460d      	mov	r5, r1
 8009cd6:	d904      	bls.n	8009ce2 <_raise_r+0x14>
 8009cd8:	2316      	movs	r3, #22
 8009cda:	6003      	str	r3, [r0, #0]
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce0:	bd38      	pop	{r3, r4, r5, pc}
 8009ce2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ce4:	b112      	cbz	r2, 8009cec <_raise_r+0x1e>
 8009ce6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cea:	b94b      	cbnz	r3, 8009d00 <_raise_r+0x32>
 8009cec:	4620      	mov	r0, r4
 8009cee:	f000 f831 	bl	8009d54 <_getpid_r>
 8009cf2:	462a      	mov	r2, r5
 8009cf4:	4601      	mov	r1, r0
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cfc:	f000 b818 	b.w	8009d30 <_kill_r>
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d00a      	beq.n	8009d1a <_raise_r+0x4c>
 8009d04:	1c59      	adds	r1, r3, #1
 8009d06:	d103      	bne.n	8009d10 <_raise_r+0x42>
 8009d08:	2316      	movs	r3, #22
 8009d0a:	6003      	str	r3, [r0, #0]
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	e7e7      	b.n	8009ce0 <_raise_r+0x12>
 8009d10:	2400      	movs	r4, #0
 8009d12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d16:	4628      	mov	r0, r5
 8009d18:	4798      	blx	r3
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	e7e0      	b.n	8009ce0 <_raise_r+0x12>
	...

08009d20 <raise>:
 8009d20:	4b02      	ldr	r3, [pc, #8]	; (8009d2c <raise+0xc>)
 8009d22:	4601      	mov	r1, r0
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	f7ff bfd2 	b.w	8009cce <_raise_r>
 8009d2a:	bf00      	nop
 8009d2c:	2000000c 	.word	0x2000000c

08009d30 <_kill_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4d07      	ldr	r5, [pc, #28]	; (8009d50 <_kill_r+0x20>)
 8009d34:	2300      	movs	r3, #0
 8009d36:	4604      	mov	r4, r0
 8009d38:	4608      	mov	r0, r1
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	602b      	str	r3, [r5, #0]
 8009d3e:	f7f8 f853 	bl	8001de8 <_kill>
 8009d42:	1c43      	adds	r3, r0, #1
 8009d44:	d102      	bne.n	8009d4c <_kill_r+0x1c>
 8009d46:	682b      	ldr	r3, [r5, #0]
 8009d48:	b103      	cbz	r3, 8009d4c <_kill_r+0x1c>
 8009d4a:	6023      	str	r3, [r4, #0]
 8009d4c:	bd38      	pop	{r3, r4, r5, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000384 	.word	0x20000384

08009d54 <_getpid_r>:
 8009d54:	f7f8 b840 	b.w	8001dd8 <_getpid>

08009d58 <exp>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	ed2d 8b02 	vpush	{d8}
 8009d5e:	ec55 4b10 	vmov	r4, r5, d0
 8009d62:	f000 f841 	bl	8009de8 <__ieee754_exp>
 8009d66:	eeb0 8a40 	vmov.f32	s16, s0
 8009d6a:	eef0 8a60 	vmov.f32	s17, s1
 8009d6e:	ec45 4b10 	vmov	d0, r4, r5
 8009d72:	f000 f9eb 	bl	800a14c <finite>
 8009d76:	b168      	cbz	r0, 8009d94 <exp+0x3c>
 8009d78:	a317      	add	r3, pc, #92	; (adr r3, 8009dd8 <exp+0x80>)
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4629      	mov	r1, r5
 8009d82:	f7f6 fee9 	bl	8000b58 <__aeabi_dcmpgt>
 8009d86:	b160      	cbz	r0, 8009da2 <exp+0x4a>
 8009d88:	f7fb fa66 	bl	8005258 <__errno>
 8009d8c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8009dc8 <exp+0x70>
 8009d90:	2322      	movs	r3, #34	; 0x22
 8009d92:	6003      	str	r3, [r0, #0]
 8009d94:	eeb0 0a48 	vmov.f32	s0, s16
 8009d98:	eef0 0a68 	vmov.f32	s1, s17
 8009d9c:	ecbd 8b02 	vpop	{d8}
 8009da0:	bd38      	pop	{r3, r4, r5, pc}
 8009da2:	a30f      	add	r3, pc, #60	; (adr r3, 8009de0 <exp+0x88>)
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	4620      	mov	r0, r4
 8009daa:	4629      	mov	r1, r5
 8009dac:	f7f6 feb6 	bl	8000b1c <__aeabi_dcmplt>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d0ef      	beq.n	8009d94 <exp+0x3c>
 8009db4:	f7fb fa50 	bl	8005258 <__errno>
 8009db8:	2322      	movs	r3, #34	; 0x22
 8009dba:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8009dd0 <exp+0x78>
 8009dbe:	6003      	str	r3, [r0, #0]
 8009dc0:	e7e8      	b.n	8009d94 <exp+0x3c>
 8009dc2:	bf00      	nop
 8009dc4:	f3af 8000 	nop.w
 8009dc8:	00000000 	.word	0x00000000
 8009dcc:	7ff00000 	.word	0x7ff00000
	...
 8009dd8:	fefa39ef 	.word	0xfefa39ef
 8009ddc:	40862e42 	.word	0x40862e42
 8009de0:	d52d3051 	.word	0xd52d3051
 8009de4:	c0874910 	.word	0xc0874910

08009de8 <__ieee754_exp>:
 8009de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dec:	ec55 4b10 	vmov	r4, r5, d0
 8009df0:	49b5      	ldr	r1, [pc, #724]	; (800a0c8 <__ieee754_exp+0x2e0>)
 8009df2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009df6:	428b      	cmp	r3, r1
 8009df8:	ed2d 8b04 	vpush	{d8-d9}
 8009dfc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8009e00:	d93d      	bls.n	8009e7e <__ieee754_exp+0x96>
 8009e02:	49b2      	ldr	r1, [pc, #712]	; (800a0cc <__ieee754_exp+0x2e4>)
 8009e04:	428b      	cmp	r3, r1
 8009e06:	d918      	bls.n	8009e3a <__ieee754_exp+0x52>
 8009e08:	ee10 3a10 	vmov	r3, s0
 8009e0c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8009e10:	4313      	orrs	r3, r2
 8009e12:	d009      	beq.n	8009e28 <__ieee754_exp+0x40>
 8009e14:	ee10 2a10 	vmov	r2, s0
 8009e18:	462b      	mov	r3, r5
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7f6 fa55 	bl	80002cc <__adddf3>
 8009e22:	4604      	mov	r4, r0
 8009e24:	460d      	mov	r5, r1
 8009e26:	e002      	b.n	8009e2e <__ieee754_exp+0x46>
 8009e28:	b10e      	cbz	r6, 8009e2e <__ieee754_exp+0x46>
 8009e2a:	2400      	movs	r4, #0
 8009e2c:	2500      	movs	r5, #0
 8009e2e:	ecbd 8b04 	vpop	{d8-d9}
 8009e32:	ec45 4b10 	vmov	d0, r4, r5
 8009e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3a:	a38d      	add	r3, pc, #564	; (adr r3, 800a070 <__ieee754_exp+0x288>)
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	ee10 0a10 	vmov	r0, s0
 8009e44:	4629      	mov	r1, r5
 8009e46:	f7f6 fe87 	bl	8000b58 <__aeabi_dcmpgt>
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	b130      	cbz	r0, 8009e5c <__ieee754_exp+0x74>
 8009e4e:	ecbd 8b04 	vpop	{d8-d9}
 8009e52:	2000      	movs	r0, #0
 8009e54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e58:	f000 b96f 	b.w	800a13a <__math_oflow>
 8009e5c:	a386      	add	r3, pc, #536	; (adr r3, 800a078 <__ieee754_exp+0x290>)
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	4620      	mov	r0, r4
 8009e64:	4629      	mov	r1, r5
 8009e66:	f7f6 fe59 	bl	8000b1c <__aeabi_dcmplt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	f000 808b 	beq.w	8009f86 <__ieee754_exp+0x19e>
 8009e70:	ecbd 8b04 	vpop	{d8-d9}
 8009e74:	4638      	mov	r0, r7
 8009e76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7a:	f000 b955 	b.w	800a128 <__math_uflow>
 8009e7e:	4a94      	ldr	r2, [pc, #592]	; (800a0d0 <__ieee754_exp+0x2e8>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	f240 80ac 	bls.w	8009fde <__ieee754_exp+0x1f6>
 8009e86:	4a93      	ldr	r2, [pc, #588]	; (800a0d4 <__ieee754_exp+0x2ec>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d87c      	bhi.n	8009f86 <__ieee754_exp+0x19e>
 8009e8c:	4b92      	ldr	r3, [pc, #584]	; (800a0d8 <__ieee754_exp+0x2f0>)
 8009e8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	ee10 0a10 	vmov	r0, s0
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	f7f6 fa14 	bl	80002c8 <__aeabi_dsub>
 8009ea0:	4b8e      	ldr	r3, [pc, #568]	; (800a0dc <__ieee754_exp+0x2f4>)
 8009ea2:	00f7      	lsls	r7, r6, #3
 8009ea4:	443b      	add	r3, r7
 8009ea6:	ed93 7b00 	vldr	d7, [r3]
 8009eaa:	f1c6 0a01 	rsb	sl, r6, #1
 8009eae:	4680      	mov	r8, r0
 8009eb0:	4689      	mov	r9, r1
 8009eb2:	ebaa 0a06 	sub.w	sl, sl, r6
 8009eb6:	eeb0 8a47 	vmov.f32	s16, s14
 8009eba:	eef0 8a67 	vmov.f32	s17, s15
 8009ebe:	ec53 2b18 	vmov	r2, r3, d8
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	f7f6 f9ff 	bl	80002c8 <__aeabi_dsub>
 8009eca:	4604      	mov	r4, r0
 8009ecc:	460d      	mov	r5, r1
 8009ece:	4622      	mov	r2, r4
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	f7f6 fbaf 	bl	8000638 <__aeabi_dmul>
 8009eda:	a369      	add	r3, pc, #420	; (adr r3, 800a080 <__ieee754_exp+0x298>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	4606      	mov	r6, r0
 8009ee2:	460f      	mov	r7, r1
 8009ee4:	f7f6 fba8 	bl	8000638 <__aeabi_dmul>
 8009ee8:	a367      	add	r3, pc, #412	; (adr r3, 800a088 <__ieee754_exp+0x2a0>)
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f7f6 f9eb 	bl	80002c8 <__aeabi_dsub>
 8009ef2:	4632      	mov	r2, r6
 8009ef4:	463b      	mov	r3, r7
 8009ef6:	f7f6 fb9f 	bl	8000638 <__aeabi_dmul>
 8009efa:	a365      	add	r3, pc, #404	; (adr r3, 800a090 <__ieee754_exp+0x2a8>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 f9e4 	bl	80002cc <__adddf3>
 8009f04:	4632      	mov	r2, r6
 8009f06:	463b      	mov	r3, r7
 8009f08:	f7f6 fb96 	bl	8000638 <__aeabi_dmul>
 8009f0c:	a362      	add	r3, pc, #392	; (adr r3, 800a098 <__ieee754_exp+0x2b0>)
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	f7f6 f9d9 	bl	80002c8 <__aeabi_dsub>
 8009f16:	4632      	mov	r2, r6
 8009f18:	463b      	mov	r3, r7
 8009f1a:	f7f6 fb8d 	bl	8000638 <__aeabi_dmul>
 8009f1e:	a360      	add	r3, pc, #384	; (adr r3, 800a0a0 <__ieee754_exp+0x2b8>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	f7f6 f9d2 	bl	80002cc <__adddf3>
 8009f28:	4632      	mov	r2, r6
 8009f2a:	463b      	mov	r3, r7
 8009f2c:	f7f6 fb84 	bl	8000638 <__aeabi_dmul>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4620      	mov	r0, r4
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7f6 f9c6 	bl	80002c8 <__aeabi_dsub>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4606      	mov	r6, r0
 8009f42:	460f      	mov	r7, r1
 8009f44:	4620      	mov	r0, r4
 8009f46:	4629      	mov	r1, r5
 8009f48:	f7f6 fb76 	bl	8000638 <__aeabi_dmul>
 8009f4c:	ec41 0b19 	vmov	d9, r0, r1
 8009f50:	f1ba 0f00 	cmp.w	sl, #0
 8009f54:	d15d      	bne.n	800a012 <__ieee754_exp+0x22a>
 8009f56:	2200      	movs	r2, #0
 8009f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	4639      	mov	r1, r7
 8009f60:	f7f6 f9b2 	bl	80002c8 <__aeabi_dsub>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	ec51 0b19 	vmov	r0, r1, d9
 8009f6c:	f7f6 fc8e 	bl	800088c <__aeabi_ddiv>
 8009f70:	4622      	mov	r2, r4
 8009f72:	462b      	mov	r3, r5
 8009f74:	f7f6 f9a8 	bl	80002c8 <__aeabi_dsub>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	4958      	ldr	r1, [pc, #352]	; (800a0e0 <__ieee754_exp+0x2f8>)
 8009f80:	f7f6 f9a2 	bl	80002c8 <__aeabi_dsub>
 8009f84:	e74d      	b.n	8009e22 <__ieee754_exp+0x3a>
 8009f86:	4857      	ldr	r0, [pc, #348]	; (800a0e4 <__ieee754_exp+0x2fc>)
 8009f88:	a347      	add	r3, pc, #284	; (adr r3, 800a0a8 <__ieee754_exp+0x2c0>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8009f92:	4629      	mov	r1, r5
 8009f94:	4620      	mov	r0, r4
 8009f96:	f7f6 fb4f 	bl	8000638 <__aeabi_dmul>
 8009f9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f9e:	f7f6 f995 	bl	80002cc <__adddf3>
 8009fa2:	f7f6 fdf9 	bl	8000b98 <__aeabi_d2iz>
 8009fa6:	4682      	mov	sl, r0
 8009fa8:	f7f6 fadc 	bl	8000564 <__aeabi_i2d>
 8009fac:	a340      	add	r3, pc, #256	; (adr r3, 800a0b0 <__ieee754_exp+0x2c8>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	f7f6 fb3f 	bl	8000638 <__aeabi_dmul>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	f7f6 f981 	bl	80002c8 <__aeabi_dsub>
 8009fc6:	a33c      	add	r3, pc, #240	; (adr r3, 800a0b8 <__ieee754_exp+0x2d0>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	4680      	mov	r8, r0
 8009fce:	4689      	mov	r9, r1
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7f6 fb30 	bl	8000638 <__aeabi_dmul>
 8009fd8:	ec41 0b18 	vmov	d8, r0, r1
 8009fdc:	e76f      	b.n	8009ebe <__ieee754_exp+0xd6>
 8009fde:	4a42      	ldr	r2, [pc, #264]	; (800a0e8 <__ieee754_exp+0x300>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d811      	bhi.n	800a008 <__ieee754_exp+0x220>
 8009fe4:	a336      	add	r3, pc, #216	; (adr r3, 800a0c0 <__ieee754_exp+0x2d8>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	ee10 0a10 	vmov	r0, s0
 8009fee:	4629      	mov	r1, r5
 8009ff0:	f7f6 f96c 	bl	80002cc <__adddf3>
 8009ff4:	4b3a      	ldr	r3, [pc, #232]	; (800a0e0 <__ieee754_exp+0x2f8>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f7f6 fdae 	bl	8000b58 <__aeabi_dcmpgt>
 8009ffc:	b138      	cbz	r0, 800a00e <__ieee754_exp+0x226>
 8009ffe:	4b38      	ldr	r3, [pc, #224]	; (800a0e0 <__ieee754_exp+0x2f8>)
 800a000:	2200      	movs	r2, #0
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	e70a      	b.n	8009e1e <__ieee754_exp+0x36>
 800a008:	f04f 0a00 	mov.w	sl, #0
 800a00c:	e75f      	b.n	8009ece <__ieee754_exp+0xe6>
 800a00e:	4682      	mov	sl, r0
 800a010:	e75d      	b.n	8009ece <__ieee754_exp+0xe6>
 800a012:	4632      	mov	r2, r6
 800a014:	463b      	mov	r3, r7
 800a016:	2000      	movs	r0, #0
 800a018:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a01c:	f7f6 f954 	bl	80002c8 <__aeabi_dsub>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	ec51 0b19 	vmov	r0, r1, d9
 800a028:	f7f6 fc30 	bl	800088c <__aeabi_ddiv>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	ec51 0b18 	vmov	r0, r1, d8
 800a034:	f7f6 f948 	bl	80002c8 <__aeabi_dsub>
 800a038:	4642      	mov	r2, r8
 800a03a:	464b      	mov	r3, r9
 800a03c:	f7f6 f944 	bl	80002c8 <__aeabi_dsub>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	2000      	movs	r0, #0
 800a046:	4926      	ldr	r1, [pc, #152]	; (800a0e0 <__ieee754_exp+0x2f8>)
 800a048:	f7f6 f93e 	bl	80002c8 <__aeabi_dsub>
 800a04c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a050:	4592      	cmp	sl, r2
 800a052:	db02      	blt.n	800a05a <__ieee754_exp+0x272>
 800a054:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a058:	e6e3      	b.n	8009e22 <__ieee754_exp+0x3a>
 800a05a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a05e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a062:	2200      	movs	r2, #0
 800a064:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800a068:	f7f6 fae6 	bl	8000638 <__aeabi_dmul>
 800a06c:	e6d9      	b.n	8009e22 <__ieee754_exp+0x3a>
 800a06e:	bf00      	nop
 800a070:	fefa39ef 	.word	0xfefa39ef
 800a074:	40862e42 	.word	0x40862e42
 800a078:	d52d3051 	.word	0xd52d3051
 800a07c:	c0874910 	.word	0xc0874910
 800a080:	72bea4d0 	.word	0x72bea4d0
 800a084:	3e663769 	.word	0x3e663769
 800a088:	c5d26bf1 	.word	0xc5d26bf1
 800a08c:	3ebbbd41 	.word	0x3ebbbd41
 800a090:	af25de2c 	.word	0xaf25de2c
 800a094:	3f11566a 	.word	0x3f11566a
 800a098:	16bebd93 	.word	0x16bebd93
 800a09c:	3f66c16c 	.word	0x3f66c16c
 800a0a0:	5555553e 	.word	0x5555553e
 800a0a4:	3fc55555 	.word	0x3fc55555
 800a0a8:	652b82fe 	.word	0x652b82fe
 800a0ac:	3ff71547 	.word	0x3ff71547
 800a0b0:	fee00000 	.word	0xfee00000
 800a0b4:	3fe62e42 	.word	0x3fe62e42
 800a0b8:	35793c76 	.word	0x35793c76
 800a0bc:	3dea39ef 	.word	0x3dea39ef
 800a0c0:	8800759c 	.word	0x8800759c
 800a0c4:	7e37e43c 	.word	0x7e37e43c
 800a0c8:	40862e41 	.word	0x40862e41
 800a0cc:	7fefffff 	.word	0x7fefffff
 800a0d0:	3fd62e42 	.word	0x3fd62e42
 800a0d4:	3ff0a2b1 	.word	0x3ff0a2b1
 800a0d8:	0800a680 	.word	0x0800a680
 800a0dc:	0800a690 	.word	0x0800a690
 800a0e0:	3ff00000 	.word	0x3ff00000
 800a0e4:	0800a670 	.word	0x0800a670
 800a0e8:	3defffff 	.word	0x3defffff

0800a0ec <with_errno>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	460d      	mov	r5, r1
 800a0f2:	4616      	mov	r6, r2
 800a0f4:	f7fb f8b0 	bl	8005258 <__errno>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	6006      	str	r6, [r0, #0]
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}

0800a100 <xflow>:
 800a100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a102:	4614      	mov	r4, r2
 800a104:	461d      	mov	r5, r3
 800a106:	b108      	cbz	r0, 800a10c <xflow+0xc>
 800a108:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a10c:	e9cd 2300 	strd	r2, r3, [sp]
 800a110:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a114:	4620      	mov	r0, r4
 800a116:	4629      	mov	r1, r5
 800a118:	f7f6 fa8e 	bl	8000638 <__aeabi_dmul>
 800a11c:	2222      	movs	r2, #34	; 0x22
 800a11e:	b003      	add	sp, #12
 800a120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a124:	f7ff bfe2 	b.w	800a0ec <with_errno>

0800a128 <__math_uflow>:
 800a128:	b508      	push	{r3, lr}
 800a12a:	2200      	movs	r2, #0
 800a12c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a130:	f7ff ffe6 	bl	800a100 <xflow>
 800a134:	ec41 0b10 	vmov	d0, r0, r1
 800a138:	bd08      	pop	{r3, pc}

0800a13a <__math_oflow>:
 800a13a:	b508      	push	{r3, lr}
 800a13c:	2200      	movs	r2, #0
 800a13e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a142:	f7ff ffdd 	bl	800a100 <xflow>
 800a146:	ec41 0b10 	vmov	d0, r0, r1
 800a14a:	bd08      	pop	{r3, pc}

0800a14c <finite>:
 800a14c:	b082      	sub	sp, #8
 800a14e:	ed8d 0b00 	vstr	d0, [sp]
 800a152:	9801      	ldr	r0, [sp, #4]
 800a154:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a158:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a15c:	0fc0      	lsrs	r0, r0, #31
 800a15e:	b002      	add	sp, #8
 800a160:	4770      	bx	lr
	...

0800a164 <_init>:
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a166:	bf00      	nop
 800a168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16a:	bc08      	pop	{r3}
 800a16c:	469e      	mov	lr, r3
 800a16e:	4770      	bx	lr

0800a170 <_fini>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	bf00      	nop
 800a174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a176:	bc08      	pop	{r3}
 800a178:	469e      	mov	lr, r3
 800a17a:	4770      	bx	lr
